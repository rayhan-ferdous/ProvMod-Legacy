0 >>>#include <vcl.h>
0 >>>#pragma hdrstop
0 >>>#define CurrentVersion "04/24/18"
0 >>>#include <stdexcept>
0 >>>#include "CRHMmain.h"
0 >>>#include "Common.h"
0 >>>#include "Para.h"
0 >>>#include "About.h"
0 >>>#include "Bld.h"
0 >>>#include "Log.h"
0 >>>#include "Export.h"
0 >>>#include "report.h"
0 >>>#include "ClassModule.h"
0 >>>#include <sstream>
0 >>>#include <iostream>
0 >>>#include <fstream.h>
0 >>>#include "SysUtils.hpp"
0 >>>#include "htmlhelp.h"
0 >>>#include <stdio.h>
0 >>>#include <io.h>
0 >>>#include <stdlib.h>
0 >>>#include <string>
0 >>>#include <algorithm>
0 >>>#include "Analy.h"
0 >>>#include "Flow.h"
0 >>>#include "EntryForm.h"
0 >>>#include "MacroUnit.h"
0 >>>#include "UpdateForm.h"
0 >>>#include <Forms.hpp>
0 >>>#include "TeeThemes.hpp"
0 >>>#include "TeeStore.hpp"
0 >>>#include "AKAform.h"
0 >>>#include <FileCtrl.hpp>
0 >>>#include <StrUtils.hpp>
0 >>>#include <vector>
0 >>>#include <math.hpp>
0 >>>#if !defined NO_MODULES
0 >>>#if defined QUINTON
0 >>>#include "quinton2.h"
0 >>>#include "quinton2.cpp"
0 >>>#elif defined CRHM_DLL
0 >>>#include "NewModules.h"
0 >>>#include "NewModules.cpp"
0 >>>#else
0 >>>#include "NewModules.h"
0 >>>#include "NewModules.cpp"
0 >>>#endif
0 >>>#endif
0 >>>Administer AdminMacro("03/24/06", "Macro");
0 >>>#pragma package(smart_init)
0 >>>#pragma link "TeeComma"
0 >>>#pragma link "TeeNavigator"
0 >>>#pragma link "TeeEdiGene"
0 >>>#pragma link "TeeEdit"
0 >>>#pragma link "TeeTools"
0 >>>#pragma link "TeeThemeEditor"
0 >>>#pragma link "TeePageNumTool"
0 >>>#pragma link "TeeEdiGene"
0 >>>#pragma link "TeeNavigator"
0 >>>#pragma link "TeeComma"
0 >>>#pragma link "TeeEdit"
0 >>>#pragma link "TeePageNumTool"
0 >>>#pragma link "TeeTools"
0 >>>#pragma link "TeeComma"
0 >>>#pragma link "TeeEdiGene"
0 >>>#pragma link "TeeEdit"
0 >>>#pragma link "TeeNavigator"
0 >>>#pragma link "TeePageNumTool"
0 >>>#pragma link "TeeProcs"
0 >>>#pragma link "TeeTools"
0 >>>#pragma link "Chart"
0 >>>#pragma link "TeeComma"
0 >>>#pragma link "TeeEdiGene"
0 >>>#pragma link "TeeEdit"
0 >>>#pragma link "TeeNavigator"
0 >>>#pragma link "TeEngine"
0 >>>#pragma link "TeePageNumTool"
0 >>>#pragma link "TeeProcs"
0 >>>#pragma link "TeeTools"
0 >>>#pragma resource "*.dfm"
0 >>>int _matherr (struct _exception *a)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 1 @ int _matherr (struct _exception *a)\n");  fclose(stdout);
1 >>>    cout << "signature# 1 @ int _matherr (struct _exception *a)";
1 >>>    char Error[][10] = {"NONE", "DOMAIN","SING","OVERFLOW","UNDERFLOW","TLOSS"};
1 >>>    CRHMException Except((String(Error[a->type]) + " error in function '" + a->name + "' ").c_str(), TERMINATE);
1 >>>    throw Except;
1 >>>}
0 >>>using namespace std;
0 >>>TMain *Main;
0 >>>Global global;
0 >>>extern double xLimit;
0 >>>extern long lLimit;
0 >>>bool CommandLine = false;
0 >>>String ApplicationDir = ExtractFilePath(AnsiReplaceStr(Application->ExeName, "/", "\\")); 
0 >>>String ProjectDir = ApplicationDir;
0 >>>String FStrings[] = {"Observation", "VP_saturated", "W_to_MJ/Int", "MJ/Int_to_W", "Average", "Minimum", "Maximum", "Total", "Positive",
0 >>>                     "First", "Last", "Count", "Count0", "Delta", "Intvl"
0 >>>                    };
0 >>>String Sstrings[] = {"", "_VPsat", "_WtoMJ", "_MJtoW", "_Avg", "_Min", "_Max", "_Tot", "_Pos", "_First", "_Last", "_Cnt", "_Cnt0", "_Dlta"};
0 >>>String TBases[] = {"Daily", "Water_year", "Calendar_year", "Monthly_summary", "Summarize_all"};
0 >>>String Tmonths[] = {"Jan", "Feb", "Mar", "Apr", "May", "Jun", "July", "Aug", "Sept", "Oct", "Nov", "Dec"};
0 >>>String TLogFormats[] = {"MS_time", "MM/DD/YYYY", "YYYY-MM-DD"};
0 >>>long water_year_month = 10;
0 >>>extern string AKAstrings[];
0 >>>CRHM::TFun Funct = CRHM::FOBS;
0 >>>long ObsFunct_Toggle = 0; 
0 >>>int InitModCnt = 0;
0 >>>int InitMacroCnt = 0;
0 >>>long TBase;
0 >>>long Box1Disply = CRHM::USUAL; 
0 >>>bool KeyShift = false;
0 >>>string DescripPrj("Description - to be added");
0 >>>ClassPar *StatePar = NULL; 
0 >>>const long colours[] = {clBlack, clDkGray, clBlue, clTeal, clFuchsia, clGreen, clNavy, clMaroon, clNavy, clOlive, clPurple, clRed, clTeal, clMaroon, 0x4763FF, 0x7280FA, 0xFF00FF, 0x008CFF, 0x00FF7F, 0x20A5DA};
0 >>>long ncolours = (sizeof colours)/4; 
0 >>>TColor CurrentColor;
0 >>>long TempTime;
0 >>>__fastcall TMain::TMain(TComponent* Owner)
0 >>>    : TForm(Owner)
0 >>>{
1 >>>    cout << "signature# 2 @ : TForm(Owner)";
1 >>>    ListHruNames = NULL;
1 >>>    MapGrpNames = NULL;
1 >>>    HruNames = False;
1 >>>    dirty = false;
1 >>>    RefreshTime = 0;
1 >>>}
0 >>>void __fastcall TMain::FileDefaults(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 2 @ void __fastcall TMain::FileDefaults(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 3 @ void __fastcall TMain::FileDefaults(TObject *Sender)";
1 >>>    OpenDialogPrj->InitialDir = GetCurrentDir();
1 >>>    SaveDialogPrj->InitialDir = GetCurrentDir();
1 >>>    OpenDialogObs->InitialDir = GetCurrentDir();
1 >>>    OpenDialogState->InitialDir = GetCurrentDir();
1 >>>    SaveDialogState->InitialDir = GetCurrentDir();
1 >>>    OpenDialogDLL->InitialDir = ApplicationDir;
1 >>>}
0 >>>void __fastcall TMain::FormCreate(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 3 @ void __fastcall TMain::FormCreate(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 4 @ void __fastcall TMain::FormCreate(TObject *Sender)";
1 >>>    OpenDialogPrj->InitialDir = GetCurrentDir();
1 >>>    SaveDialogPrj->InitialDir = GetCurrentDir();
1 >>>    OpenDialogObs->InitialDir = GetCurrentDir();
1 >>>    OpenDialogState->InitialDir = GetCurrentDir();
1 >>>    SaveDialogState->InitialDir = GetCurrentDir();
1 >>>    OpenDialogDLL->InitialDir = ApplicationDir;
1 >>>    ProjectOpen = false;
1 >>>    float W = Screen->Width;
1 >>>    float H = Screen->Height;
1 >>>    Width = W/H * Height;
1 >>>    Application->OnHint = OnHint;
1 >>>    Application->ShowHint = true;
1 >>>    Application->OnHelp = AppHelp;
1 >>>    ApplicationEvents1->Activate();
1 >>>    HelpContext = 1000;
1 >>>    Global::BuildFlag = CRHM::BUILD;
1 >>>    Global::maxhru = 1;
1 >>>    Global::maxlay = 1;
1 >>>    Global::maxobs = 1;
1 >>>    Global::Freq = 48;
1 >>>    Global::Interval = 1.0/Global::Freq;
1 >>>    TBase = 0;
1 >>>    cdSeries = NULL;
1 >>>    TDateTime Dt = TDateTime::CurrentDate();
1 >>>    DateTimePicker1->Date = Dt;
1 >>>    DateTimePicker2->Date = Dt;
1 >>>    DateTimePicker1->Format = "MMM dd', ' yyyy";
1 >>>    DateTimePicker2->Format = "MMM dd', ' yyyy";
1 >>>    DateTimePicker2->Font->Name = Screen->Fonts->Strings[0];
1 >>>    SaveStateFlag = false;
1 >>>    Global::crhmMain = Main->Handle; 
1 >>>    Global::nhru = Global::maxhru;
1 >>>    Global::nobs = Global::maxobs;
1 >>>    Global::nlay = Global::maxlay;
1 >>>    Global::OBS_AS_IS = false;
1 >>>    ObsFilesList = new TStringList;
1 >>>    ProjectList = new TStringList;
1 >>>    PrjObsHelp = new TStringList;
1 >>>    PrjObsHelp->AddObject("", (TObject*) 1);
1 >>>    Global::AllModulesList = new TStringList;
1 >>>    Global::AllModulesList->CaseSensitive = true;
1 >>>    Global::OurModulesList = new TStringList;
1 >>>    Global::OurModulesList->Sorted = false;
1 >>>    Global::MacroModulesList = new TStringList;
1 >>>    Global::MacroModulesList->Sorted = false; 
1 >>>    Global::MacroModulesList->QuoteChar = '\'';
1 >>>    Global::AllModelsList = new TStringList;
1 >>>    Global::AllModelsList->Sorted = true;
1 >>>    Global::ModelModulesList = new TStringList;
1 >>>    Global::ModelModulesList->Sorted = false;
1 >>>    Global::OurHelpList = new TStringList;   
1 >>>    Global::PendingDLLModuleList = new TStringList; 
1 >>>    Global::ReportList = NULL; 
1 >>>    LoopList = NULL; 
1 >>>    Global::DeclRootList = new TStringList;
1 >>>    Global::DeclRootList->Sorted = true;
1 >>>#ifdef CRHM_DLL
1 >>>    DLL1->Enabled = true;
1 >>>    OpenDLLs = new TStringList;
1 >>>#else
1 >>>    DLL1->Enabled = false;
1 >>>#endif
1 >>>#if !defined NO_MODULES
1 >>>    MoveModulesToGlobal();
1 >>>    ((ClassModule*) Global::PendingDLLModuleList->Objects[0])->OurAdmin->Accept(mrYesToAll);
1 >>>    ++InitModCnt;
1 >>>    UpDateModelMenu();
1 >>>#endif
1 >>>    CurChartPage = 1;
1 >>>    Chart->Legend->LegendStyle = lsSeries;
1 >>>    Chart->Legend->CheckBoxes = true;
1 >>>    Chart->View3D = false;
1 >>>    Chart->Axes->Right->Grid->Visible = false;
1 >>>    StatusBar1->Panels->Items[0]->Text = "Idle";
1 >>>    LabelFunct->Caption = FStrings[Funct];
1 >>>    TCommanderControls Tcntrls[4] = {tcbEdit,tcbSeparator,tcbPrintPreview,tcbSeparator};
1 >>>    TeeCommander1->CreateControls(Tcntrls, 3);
1 >>>    Global::OldModuleName = new TStringList;
1 >>>    Global::NewModuleName = new TStringList;
1 >>>    Global::OldModuleName->CommaText = "long, CanopyClearingGap2, pbsm_WQ, Soil_WQ, Netroute_WQ, Netroute_M_D_WQ";
1 >>>    Global::NewModuleName->CommaText = "longVt, CanopyClearingGap, WQ_pbsm, WQ_Soil, WQ_Netroute, WQ_Netroute_M_D";
1 >>>#if !defined NO_MODULES
1 >>>    for(long ii = 0; ii < Global::NewModuleName->Count; ++ii)
1 >>>        long jj = Global::AllModulesList->IndexOf(Global::NewModuleName->Strings[ii]);
1 >>>    assert(jj != -1);
1 >>>    Global::OldModuleName->Objects[ii] = (TObject*) jj;
1 >>>}
0 >>>#endif
0 >>>Global::CRHMStatus = 0;  
0 >>>Global::CurrentModuleRun = -1;  
0 >>>Global::CRHMControlSaveCnt = 0; 
0 >>>Global::HRU_OBS_DIRECT = new long*[5];
0 >>>for(long jj = 0; jj < 5; ++jj)
0 >>>    Global::HRU_OBS_DIRECT[jj] = new long[500];
0 >>>for(long ii=0; ii < 500; ++ii)
0 >>>    Global::HRU_OBS_DIRECT[jj][ii] = ii + 1;
0 >>>}//raf835:end void __fastcall TMain::FormCreate(TObject *Sender)
0 >>>Global::HRU_OBS = Global::HRU_OBS_DIRECT;
0 >>>Global::NaNcheck = false;
0 >>>Global::LOGVARLOAD = false;
0 >>>Global::TimeFormat = MS;
0 >>>}//raf835:end void __fastcall TMain::FormCreate(TObject *Sender)
0 >>>void __fastcall TMain::UpDownHRUIndxClick(TObject *Sender, TUDBtnType Button)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 4 @ void __fastcall TMain::UpDownHRUIndxClick(TObject *Sender, TUDBtnType Button)\n");  fclose(stdout);
1 >>>    cout << "signature# 5 @ void __fastcall TMain::UpDownHRUIndxClick(TObject *Sender, TUDBtnType Button)";
1 >>>    UpDownHRUIndx->Max = Global::maxhru;
1 >>>    LabelHRUIndx->Caption = "HRU " + String(UpDownHRUIndx->Position);
1 >>>    LabelHRUIndx->Refresh();
1 >>>}
0 >>>void __fastcall TMain::ExitClick(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 5 @ void __fastcall TMain::ExitClick(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 6 @ void __fastcall TMain::ExitClick(TObject *Sender)";
1 >>>    Application->Terminate();
1 >>>}
0 >>>void __fastcall TMain::OpenClick(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 6 @ void __fastcall TMain::OpenClick(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 7 @ void __fastcall TMain::OpenClick(TObject *Sender)";
1 >>>    OpenDialogObs->Filter = "Observation Files (*.obs)|*.obs";
1 >>>    OpenDialogObs->Title = "Open Observation File";
1 >>>    OpenDialogObs->DefaultExt = "obs";
1 >>>    if(OpenDialogObs->Execute())
1 >>>        OpenDialogObs->InitialDir = ExtractFilePath(AnsiReplaceStr(OpenDialogObs->FileName, "/", "\\")); 
1 >>>    if(OpenDialogObs->InitialDir.IsEmpty())
1 >>>        OpenDialogObs->InitialDir = GetCurrentDir();
1 >>>    Box1Disply = CRHM::PRIVATE;
1 >>>    Label4Click(Sender);
1 >>>    OpenObsFile(Sender, OpenDialogObs->FileName);
1 >>>}
0 >>>Box1Disply = CRHM::OUTPUT;
0 >>>Label4Click(Sender);
0 >>>}//raf835:end void __fastcall TMain::OpenClick(TObject *Sender)
0 >>>bool __fastcall TMain::OpenObsFile(TObject *Sender, String FileName)
0 >>>{
1 >>>    cout << "signature# 8 @ bool __fastcall TMain::OpenObsFile(TObject *Sender, String FileName)";
1 >>>    ClassData  * FileData;
1 >>>    if(ObsFilesList->IndexOf(FileName.c_str()) != -1)
1 >>>        return false;  
1 >>>    if(ObsFilesList->Count == 0)
1 >>>        Global::DTstart = 0; 
1 >>>    Global::DTend = 0; 
1 >>>}
0 >>>StatusBar1->Panels->Items[0]->Text = "Reading Data File";
0 >>>StatusBar1->Repaint();
0 >>>SetCaptureControl(Main);
0 >>>FileData = new ClassData(FileName.c_str());
0 >>>StatusBar1->Panels->Items[0]->Text = "Idle";
0 >>>if(FileData->Success)
0 >>>    if(ObsFilesList->Count == 0)
0 >>>        if(FileData->Times != NULL)   
0 >>>        {
1 >>>            Application->MessageBox("Could be a Sequential file with an error at indicated position.", "Sparse file cannot be the first file.", MB_OK);
1 >>>            delete FileData;
1 >>>            FileData = NULL;
1 >>>            return false;
1 >>>        }
0 >>>Global::Interval = FileData->Interval;
0 >>>Global::Freq = FileData->Freq;
0 >>>Global::IndxMin = FileData->IndxMin;
0 >>>Global::IndxMax = FileData->IndxMax;
0 >>>DateTimePicker1->MinDate = 0;
0 >>>DateTimePicker1->MaxDate = 80000;
0 >>>DateTimePicker2->MinDate = 0;
0 >>>DateTimePicker2->MaxDate = 80000;
0 >>>DateTimePicker1->Date = FileData->Dt1;
0 >>>DateTimePicker2->Date = FileData->Dt2;
0 >>>DateTimePicker1->MinDate = floor(FileData->Dt1);
0 >>>DateTimePicker1->MaxDate = floor(FileData->Dt2);
0 >>>DateTimePicker2->MinDate = floor(FileData->Dt1);
0 >>>DateTimePicker2->MaxDate = floor(FileData->Dt2);
0 >>>DateTimePicker1->Enabled = true;
0 >>>DateTimePicker2->Enabled = true;
0 >>>}//raf835:end void __fastcall TMain::OpenClick(TObject *Sender)
0 >>>else if(FileData->Freq > Global::Freq)   
0 >>>{
1 >>>    Application->MessageBox("later observation file has finer time step than first", "File time step Error", MB_OK);
1 >>>    delete FileData;
1 >>>    FileData = NULL;
1 >>>    return false;
1 >>>}
0 >>>FileData->ModN = Global::Freq / FileData->Freq;
0 >>>MapVar::iterator itVar;
0 >>>ClassVar * thisVar;
0 >>>for(int ii = 0; ii < ListBox1->Items->Count; ii++)
0 >>>    thisVar =  (ClassVar *) ListBox1->Items->Objects[ii];
0 >>>if(thisVar && thisVar->varType >= CRHM::Read)
0 >>>    ListBox1->Items->Delete(ii);
0 >>>ii = 0;
0 >>>}//raf835:end void __fastcall TMain::OpenClick(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::OpenClick(TObject *Sender)
0 >>>for(int ii = 0; ii < ListBox3->Items->Count; ii++)
0 >>>    thisVar =  (ClassVar *) ListBox3->Items->Objects[ii];
0 >>>if(thisVar && thisVar->varType >= CRHM::Read)
0 >>>    ListBox3->Items->Delete(ii);
0 >>>ii = 0;
0 >>>}//raf835:end void __fastcall TMain::OpenClick(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::OpenClick(TObject *Sender)
0 >>>ListBox2->Clear();
0 >>>for (itVar = Global::MapVars.begin(); itVar !=  Global::MapVars.end(); itVar++)
0 >>>    thisVar = (*itVar).second;
0 >>>if(thisVar && thisVar->varType >= CRHM::Read)
0 >>>    if(IndexOf(ListBox2, thisVar->name.c_str()) == -1)
0 >>>        ListBox2->Items->AddObject(thisVar->name.c_str(), (TObject*) thisVar);
0 >>>}//raf835:end void __fastcall TMain::OpenClick(TObject *Sender)
0 >>>TMenuItem *ObsItem, *NewItem;
0 >>>ObsItem = MainMenu1->Items->Items[1];
0 >>>NewItem = new TMenuItem(ObsItem);
0 >>>String S = "&" + IntToStr(ObsFilesList->Count + 1) +
0 >>>           " " + OpenDialogObs->FileName;
0 >>>NewItem->Caption = S;
0 >>>ObsFilesList->AddObject(OpenDialogObs->FileName.c_str() , (TObject *) FileData);
0 >>>String as = ExtractFileName(OpenDialogObs->FileName);
0 >>>as = ChangeFileExt(as,".CHM");
0 >>>if(FileExistsSp(as))
0 >>>    PrjObsHelp->AddObject(as.SubString(1, as.Length()-4) + ".obs", (TObject*) ObsItem->Count);
0 >>>UpDateHelpMenu();
0 >>>}//raf835:end void __fastcall TMain::OpenClick(TObject *Sender)
0 >>>NewItem->OnClick = ObsFileClose;
0 >>>ObsItem->Insert(ObsItem->Count, NewItem);
0 >>>ReleaseCapture();
0 >>>return true;
0 >>>}//raf835:end void __fastcall TMain::OpenClick(TObject *Sender)
0 >>>else if(ObsFilesList->Count == 0)
0 >>>    Global::DTstart = 0; 
0 >>>Global::DTend = 0; 
0 >>>}//raf835:end void __fastcall TMain::OpenClick(TObject *Sender)
0 >>>delete FileData;
0 >>>FileData = NULL;
0 >>>ReleaseCapture();
0 >>>return false;
0 >>>}//raf835:end void __fastcall TMain::OpenClick(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::OpenClick(TObject *Sender)
0 >>>void __fastcall TMain::ObsCloseClick(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 7 @ void __fastcall TMain::ObsCloseClick(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 9 @ void __fastcall TMain::ObsCloseClick(TObject *Sender)";
1 >>>    TMenuItem *ObsItem;
1 >>>    ObsItem = MainMenu1->Items->Items[1];
1 >>>    if(ObsItem->Count <= 4) return; 
1 >>>    if(ProjectOpen)
1 >>>        if(Application->MessageBox("First observation File affects Obs timebase",
1 >>>                                   "Close All Observation Files", IDOK) != IDOK) return;
1 >>>    ListBox2->Clear();
1 >>>    ClearListBox4(Sender);
1 >>>    while(ObsItem->Count > 4)
1 >>>        ObsItem->Delete(ObsItem->Count-1);
1 >>>    for(int ii = 0; ii < ObsFilesList->Count; ii++)
1 >>>        ClassData * FileData = (ClassData *) ObsFilesList->Objects[ii];
1 >>>    delete FileData;   
1 >>>    FileData = NULL;
1 >>>}
0 >>>ObsFilesList->Clear();  
0 >>>ResetPickers();
0 >>>Global::nobs = 1;  
0 >>>Global::maxobs = 1;  
0 >>>while (PrjObsHelp->Count > 1)
0 >>>    PrjObsHelp->Delete(PrjObsHelp->Count-1);
0 >>>UpDateModelMenu();
0 >>>}//raf835:end void __fastcall TMain::ObsCloseClick(TObject *Sender)
0 >>>void __fastcall TMain::BldModelClick(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 8 @ void __fastcall TMain::BldModelClick(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 10 @ void __fastcall TMain::BldModelClick(TObject *Sender)";
1 >>>    TMenuItem *ObsItem;
1 >>>    TMenuItem * thisMenu = (TMenuItem *) Sender;
1 >>>    FreeChart1(Sender);          
1 >>>    ClearModules(Sender, false);
1 >>>    int Index = (int) Global::AllModelsList->Objects[thisMenu->MenuIndex - 6]; 
1 >>>    Global::OurModulesList->CommaText = Global::ModelModulesList->Strings[Index]; 
1 >>>    DescripPrj = Global::AllModelsList->Strings[thisMenu->MenuIndex - 6].c_str();
1 >>>    Chart->SubTitle->Text->Clear(); 
1 >>>    Chart->SubTitle->Text->Add(DescripPrj.c_str());
1 >>>    for(int ii = 0; ii < Global::OurModulesList->Count; ii++)
1 >>>        long Variation = 0;
1 >>>    int P;
1 >>>    if(P = Global::OurModulesList->Strings[ii].Pos("#"), P > 0)  
1 >>>    {
2 >>>        Variation = pow(2, Global::OurModulesList->Strings[ii][P+1] - char('1'));
2 >>>        Global::OurModulesList->Strings[ii] = Global::OurModulesList->Strings[ii].Delete(Global::OurModulesList->Strings[ii].Length()-1, 2);
2 >>>    }
1 >>>    int jj = Global::AllModulesList->IndexOf(Global::OurModulesList->Strings[ii]);
1 >>>    if(jj < 0)
1 >>>        CRHMException Except((Global::OurModulesList->Strings[ii] + " Module not defined in CRHM model").c_str(), ERR);
1 >>>    Global::OurModulesList->Clear();
1 >>>    Application->MessageBox(Except.Message.c_str(), "Missing module", MB_OK);
1 >>>    LogError(Except);
1 >>>    return;
1 >>>}
0 >>>((ClassModule*) Global::AllModulesList->Objects[jj])->variation = Variation;
0 >>>Global::OurModulesList->Objects[ii] = Global::AllModulesList->Objects[jj];
0 >>>}//raf835:end void __fastcall TMain::BldModelClick(TObject *Sender)
0 >>>ProjectOpen = true;
0 >>>InitModules(Sender);
0 >>>SqueezeParams(Sender);  
0 >>>dirty = true;
0 >>>}//raf835:end void __fastcall TMain::BldModelClick(TObject *Sender)
0 >>>void __fastcall TMain::RunClick(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 9 @ void __fastcall TMain::RunClick(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 11 @ void __fastcall TMain::RunClick(TObject *Sender)";
1 >>>    ClassVar *thisVar;
1 >>>    float **mmsData;
1 >>>    long **mmsDataL;
1 >>>    bool GoodRun = true;
1 >>>    MapVar::iterator itVar;
1 >>>    PlotControl->IntervalControl = 0;
1 >>>    PlotControl->IntervalLength = 3; 
1 >>>    Global::ModuleBitSet.reset();
1 >>>    Global::HRU_OBS = Global::HRU_OBS_DIRECT; 
1 >>>    Global::OBS_AS_IS = false;
1 >>>    Global::WQ_prj = false;
1 >>>    UpDownHRUIndxClick(Sender, btNext); 
1 >>>    if(LogForm->DeclErrors > 0)
1 >>>        if(Application->MessageBox("Module errors", "Model Declaration Error", MB_OK)) return;
1 >>>    LogForm->ClearRunLogs();
1 >>>    if(ObsFilesList->Count == 0 && ((ClassModule*) Global::OurModulesList->Objects[0])->UsingObservations())
1 >>>        if(Application->MessageBox("CRHM requires an observation file(s) with at least; t, rh, ea, u, p (or ppt).", "No observation file(s) specified", MB_OK)) return;
1 >>>    return;  
1 >>>}
0 >>>if(Global::IndxMin != 0)
0 >>>    if(Application->MessageBox("", "First observation day - not an entire day", MB_OK)) return;
0 >>>return;  
0 >>>}//raf835:end void __fastcall TMain::RunClick(TObject *Sender)
0 >>>if(cdSeries)
0 >>>    for (int ii = 0; ii < SeriesCnt; ii ++)
0 >>>        thisVar =  (ClassVar *) cdSeries[ii]->Tag;
0 >>>thisVar->TchrtOpt = cdSeries[ii]->VertAxis == aRightAxis;
0 >>>cdSeries[ii]->ParentChart = NULL;
0 >>>cdSeries[ii]->Clear();
0 >>>}//raf835:end void __fastcall TMain::RunClick(TObject *Sender)
0 >>>delete [] cdSeries;
0 >>>cdSeries = NULL;
0 >>>SeriesCnt = 0;
0 >>>}//raf835:end void __fastcall TMain::RunClick(TObject *Sender)
0 >>>if(ListBox3->Items->Count == 0)
0 >>>    if(Application->MessageBox("", "No model output selected", MB_OK)) return;
0 >>>return;  
0 >>>}//raf835:end void __fastcall TMain::RunClick(TObject *Sender)
0 >>>String Message = "Project file: " + OpenDialogPrj->FileName;
0 >>>LogMessage(Message.c_str());
0 >>>LogMessage(" ");
0 >>>for(int ii = 0; ii < ObsFilesList->Count; ii++)
0 >>>    Message = "Observation file: " + ObsFilesList->Strings[ii];
0 >>>LogMessage(Message.c_str());
0 >>>}//raf835:end void __fastcall TMain::RunClick(TObject *Sender)
0 >>>LogMessage(" ");
0 >>>TDateTime Dt = TDateTime::CurrentDateTime();
0 >>>Message = "Time of model run: " + Dt.DateString() +  FormatDateTime(" hh:mm", Dt)
0 >>>          + ". Program  " + AboutBox->Label2->Caption;
0 >>>LogMessage(Message.c_str());
0 >>>LogMessage(" ");
0 >>>String S = String("Module List \"") ;
0 >>>for(int ii = 0; ii < Global::OurModulesList->Count; ++ii)
0 >>>    ClassModule* thisModule = (ClassModule*) Global::OurModulesList->Objects[ii];
0 >>>S += Global::OurModulesList->Strings[ii];
0 >>>if(thisModule->variation != 0)
0 >>>    String AA("#0");
0 >>>AA[2] += log(thisModule->variation)/log(2) + 1;
0 >>>S += AA;
0 >>>}//raf835:end void __fastcall TMain::RunClick(TObject *Sender)
0 >>>if(ii == Global::OurModulesList->Count-1)
0 >>>    S += ".\"";
0 >>>else
0 >>>    S += ", ";
0 >>>}//raf835:end void __fastcall TMain::RunClick(TObject *Sender)
0 >>>LogDebug(S.c_str());
0 >>>LogMessage(" ");
0 >>>if(!Global::MapAKA.empty())
0 >>>    Mapstr2::iterator it;
0 >>>LogMessage("Linkage modifications (AKAs)");
0 >>>for (it = Global::MapAKA.begin(); it !=  Global::MapAKA.end(); ++it)
0 >>>    Message = String((*it).first.c_str()) + " " + String((*it).second.c_str());
0 >>>LogMessage(Message.c_str());
0 >>>}//raf835:end void __fastcall TMain::RunClick(TObject *Sender)
0 >>>LogMessage(" ");
0 >>>}//raf835:end void __fastcall TMain::RunClick(TObject *Sender)
0 >>>Global::DeclRootList->Clear(); 
0 >>>((ClassModule*) Global::OurModulesList->Objects[0])->InitReadObs();
0 >>>double DTstartR = INT(DateTimePicker1->Date);
0 >>>double DTendR   = INT(DateTimePicker2->Date);
0 >>>ClassPar *thisPar;
0 >>>if(CommandLine)                           
0 >>>{
1 >>>    double P = 0;
1 >>>    thisPar = ParFind("basin RUN_START");
1 >>>    if(thisPar)
1 >>>        if(thisPar->ivalues[0] > 0)
1 >>>            P = thisPar->ivalues[0];
1 >>>}
0 >>>else
0 >>>    MapPar::iterator itPar;
0 >>>for (itPar = Global::MapPars.begin(); itPar !=  Global::MapPars.end(); itPar++)
0 >>>    thisPar = (*itPar).second;
0 >>>if(thisPar->param == "RUN_START" && thisPar->ivalues[0] > 0)
0 >>>    P = thisPar->ivalues[0];
0 >>>break;
0 >>>}//raf835:end void __fastcall TMain::RunClick(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::RunClick(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::RunClick(TObject *Sender)
0 >>>if(P > 0)
0 >>>    if(P < Global::DTstart || P > Global::DTend)
0 >>>        P = Global::DTstart;
0 >>>DTstartR = P;
0 >>>DateTimePicker1->Date = P;
0 >>>}//raf835:end void __fastcall TMain::RunClick(TObject *Sender)
0 >>>P = 0;
0 >>>thisPar = ParFind("basin RUN_END");
0 >>>if(thisPar)
0 >>>    if(thisPar->ivalues[0] > 0)
0 >>>        P = thisPar->ivalues[0];
0 >>>}//raf835:end void __fastcall TMain::RunClick(TObject *Sender)
0 >>>else
0 >>>    MapPar::iterator itPar;
0 >>>for (itPar = Global::MapPars.begin(); itPar !=  Global::MapPars.end(); itPar++)
0 >>>    thisPar = (*itPar).second;
0 >>>if(thisPar->param == "RUN_END" && thisPar->ivalues[0] > 0)
0 >>>    P = thisPar->ivalues[0];
0 >>>break;
0 >>>}//raf835:end void __fastcall TMain::RunClick(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::RunClick(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::RunClick(TObject *Sender)
0 >>>if(P > 0)
0 >>>    if(P < Global::DTstart || P > Global::DTend)
0 >>>        P = Global::DTend;
0 >>>DTendR = P;
0 >>>DateTimePicker2->Date = P;
0 >>>}//raf835:end void __fastcall TMain::RunClick(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::RunClick(TObject *Sender)
0 >>>Global::DTmin  = INT((DTstartR-Global::DTstart)* Global::Freq);
0 >>>Global::DTmax  = INT((DTendR-Global::DTstart)* Global::Freq);
0 >>>Global::DTindx = Global::DTmin;
0 >>>Global::DTnow = Global::DTstart + Global::Interval*(Global::DTindx+1);
0 >>>Global::MapVarsGet.clear();
0 >>>Global::MapVarsPut.clear();
0 >>>Global::MapObsGet.clear();
0 >>>try
0 >>>    for(Global::CurrentModuleRun = 0; Global::CurrentModuleRun < Global::OurModulesList->Count; Global::CurrentModuleRun++)
0 >>>        ((ClassModule*) (Global::OurModulesList->Objects[Global::CurrentModuleRun]))->initbase();
0 >>>}//raf835:end void __fastcall TMain::RunClick(TObject *Sender)
0 >>>catch (CRHMException Except)  
0 >>>{
1 >>>    Application->MessageBox(Except.Message.c_str(),
1 >>>                            (String("Initialisation of module - ") + ((ClassModule*) Global::OurModulesList->Objects[Global::CurrentModuleRun])->Name.c_str()).c_str(),
1 >>>                            MB_OK);
1 >>>    GoodRun = false;
1 >>>}
0 >>>catch (Sysutils::Exception &E)
0 >>>    ShowMessage(E.Message + " in Initialisation of " + ((ClassModule*) Global::OurModulesList->Objects[Global::CurrentModuleRun])->Name.c_str());
0 >>>GoodRun = false;
0 >>>}//raf835:end void __fastcall TMain::RunClick(TObject *Sender)
0 >>>if(LogForm->Errors > 0 && !GoodRun)  
0 >>>{
1 >>>    GoodRun = false;
1 >>>}
0 >>>else if(DTstartR >= DTendR)
0 >>>    Application->MessageBox("Start Time >= EndTime", "Time Error", MB_OK);
0 >>>GoodRun = false;
0 >>>}//raf835:end void __fastcall TMain::RunClick(TObject *Sender)
0 >>>if(CommandLine)
0 >>>    thisPar = ParFind("Shared INIT_STATE");
0 >>>if(thisPar && thisPar->Strings->Count && !thisPar->Strings->Strings[0].IsEmpty())
0 >>>    OpenDialogState->FileName = thisPar->Strings->Strings[0].c_str();
0 >>>ReadStateFile(Sender, GoodRun);
0 >>>}//raf835:end void __fastcall TMain::RunClick(TObject *Sender)
0 >>>else
0 >>>    MapPar::iterator itPar;
0 >>>for (itPar = Global::MapPars.begin(); itPar !=  Global::MapPars.end(); itPar++)
0 >>>    thisPar = (*itPar).second;
0 >>>if(thisPar->param == "INIT_STATE" && thisPar->Strings->Count && !thisPar->Strings->Strings[0].IsEmpty())
0 >>>    OpenDialogState->FileName = thisPar->Strings->Strings[0].c_str();
0 >>>ReadStateFile(Sender, GoodRun);
0 >>>break;
0 >>>}//raf835:end void __fastcall TMain::RunClick(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::RunClick(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::RunClick(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::RunClick(TObject *Sender)
0 >>>TMenuItem *StateItem = MainMenu1->Items->Items[5];
0 >>>if(StateItem->Count > 5)  
0 >>>{
1 >>>    for(int ii = 5; ii < StateItem->Count; ++ii)
1 >>>        LogMessage(" ");
1 >>>    OpenDialogState->FileName = StateItem->Items[ii]->Caption;
1 >>>    ReadStateFile(Sender, GoodRun);
1 >>>}
0 >>>}//raf835:end void __fastcall TMain::RunClick(TObject *Sender)
0 >>>if(!GoodRun)   
0 >>>{
1 >>>    ((ClassModule*) Global::OurModulesList->Objects[0])->InitReadObs();
1 >>>    for(int ii = 0; ii < Global::CurrentModuleRun; ii++)
1 >>>        ((ClassModule*) (Global::OurModulesList->Objects[ii]))->finish(false);
1 >>>    Global::BuildFlag = CRHM::DECL;
1 >>>    StatusBar1->Panels->Items[0]->Text = "Faulty Run";
1 >>>    Chart->Repaint();
1 >>>    return;
1 >>>}
0 >>>SeriesCnt = ListBox3->Items->Count;
0 >>>cdSeries = new TLineSeries*[SeriesCnt];
0 >>>mmsData = new float*[SeriesCnt];
0 >>>mmsDataL = new long*[SeriesCnt];
0 >>>for (int ii = 0; ii < ListBox3->Items->Count; ii ++)
0 >>>    thisVar = (ClassVar *) (ListBox3->Items->Objects[ii]);
0 >>>if(thisVar->PointPlot)
0 >>>    cdSeries[ii] = (TLineSeries *) new TPointSeries(this);
0 >>>else
0 >>>    cdSeries[ii] = new TLineSeries(this);
0 >>>CurrentColor = colours[ii % ncolours];
0 >>>cdSeries[ii]->Color = CurrentColor;
0 >>>cdSeries[ii]->Tag = (int) thisVar;
0 >>>cdSeries[ii]->VertAxis = (TVertAxis) thisVar->TchrtOpt;
0 >>>if(ii == 0) Chart->Axes->Items[2]->Title->Caption = thisVar->units.c_str();
0 >>>cdSeries[ii]->XValues->DateTime = TRUE;
0 >>>cdSeries[ii]->ParentChart = Chart;
0 >>>String S = ListBox3->Items->Strings[ii];
0 >>>cdSeries[ii]->Title = S;
0 >>>if(thisVar->TchrtOpt)
0 >>>    cdSeries[ii]->VertAxis = aRightAxis;
0 >>>long lay, dim;
0 >>>ExtractHruLay(S, dim, lay);
0 >>>if(thisVar->varType == CRHM::Float)
0 >>>    mmsDataL[ii] = NULL;
0 >>>if(thisVar->lay == 0)
0 >>>    mmsData[ii]  = thisVar->values+(dim-1);
0 >>>}//raf835:end void __fastcall TMain::RunClick(TObject *Sender)
0 >>>else
0 >>>    mmsData[ii]  = (thisVar->layvalues[lay-1])+(dim-1);
0 >>>}//raf835:end void __fastcall TMain::RunClick(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::RunClick(TObject *Sender)
0 >>>else if(thisVar->varType == CRHM::Int)
0 >>>    mmsData[ii]  = NULL;
0 >>>if(thisVar->lay == 0)
0 >>>    mmsDataL[ii] = thisVar->ivalues+(dim-1);
0 >>>}//raf835:end void __fastcall TMain::RunClick(TObject *Sender)
0 >>>else
0 >>>    mmsDataL[ii] = (thisVar->ilayvalues[lay-1])+(dim-1);
0 >>>}//raf835:end void __fastcall TMain::RunClick(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::RunClick(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::RunClick(TObject *Sender)
0 >>>Global::BuildFlag = CRHM::RUN;
0 >>>Chart->AutoRepaint = false;
0 >>>StatusBar1->Panels->Items[0]->Text = "Spacing";
0 >>>StatusBar1->Repaint();
0 >>>bool First = true;
0 >>>TCursor OriginalCursor = Screen->Cursor;
0 >>>Screen->Cursor = crHourGlass;
0 >>>SetCaptureControl(Main);
0 >>>ParameterBackUp(Sender); 
0 >>>RefreshTime = 0;
0 >>>LogMessage(" ");
0 >>>S = String("timestep ") + Global::Interval*24 + " hr.";
0 >>>LogDebug(S.c_str());
0 >>>LogDebugT("\"start of run\".");
0 >>>LogMessage(" ");
0 >>>Global::CRHMControlSaveCnt = 0; 
0 >>>Global::CRHMStatus = 0; 
0 >>>Global::LoopCntDown = -1;
0 >>>StatePar = NULL;
0 >>>Global::ModuleBitSet.reset();
0 >>>ClassModule* Obs_preset; 
0 >>>int jj = Global::OurModulesList->IndexOf("obs");
0 >>>if(jj == -1)
0 >>>    Obs_preset = NULL;
0 >>>else
0 >>>    Obs_preset = (ClassModule*) Global::OurModulesList->Objects[jj];
0 >>>if(Global::LoopCnt && ((double) Global::RapidAdvanceTo == 0.0 || (double) Global::RapidAdvanceTo <= DTstartR))
0 >>>    Global::RapidAdvanceTo = DTstartR + 1;
0 >>>try
0 >>>    for (Global::DTindx = Global::DTmin; Global::DTindx < Global::DTmax; Global::DTindx++)
0 >>>        if(Global::Freq == 1)
0 >>>            Global::DTnow = Global::DTstart + Global::Interval*(Global::DTindx);
0 >>>        else
0 >>>            Global::DTnow = Global::DTstart + Global::Interval*(Global::DTindx+1);
0 >>>if((double) Global::RapidAdvanceTo > 0.0)
0 >>>    if(Global::DTnow < Global::RapidAdvanceTo)
0 >>>        Global::CRHMStatus |= 2; 
0 >>>    else if(Global::DTnow == Global::RapidAdvanceTo)  
0 >>>    {
1 >>>        Global::CRHMStatus &=125; 
1 >>>        Global::RapidAdvanceTo = 0;
1 >>>        LogMessage("Terminate fast loop aheadMain", DD);
1 >>>    }
0 >>>}//raf835:end void __fastcall TMain::RunClick(TObject *Sender)
0 >>>if(Global::LoopCnt && (double) Global::RapidAdvanceTo == 0.0)
0 >>>    if(Global::LoopCntDown == -1)  
0 >>>    {
1 >>>        Global::LoopCntDown = Global::LoopCnt;
1 >>>        StatePar = ParFind("basin StateVars_to_Update");
1 >>>        ControlSaveState(Sender, true, StatePar, Global::RunUpBitSet); 
1 >>>        Global::CRHMStatus |= 2; 
1 >>>        LogMessage("Initialise LoopTo Main", DD);
1 >>>    }
0 >>>    else if(Global::DTnow == Global::LoopTo)  
0 >>>    {
1 >>>        ControlReadState(Sender, true, StatePar); 
1 >>>        --Global::LoopCntDown; 
1 >>>        LogMessage("Reached loop Main", DD);
1 >>>        if(Global::LoopCntDown <= 0)
1 >>>            ResetLoopList(Sender);
1 >>>        Global::CRHMStatus &=125; 
1 >>>        Global::CRHMStatus |= 4; 
1 >>>        Global::LoopCnt = 0;
1 >>>        LogMessage("Terminate LoopTo Main", DD);
1 >>>    }
0 >>>}//raf835:end void __fastcall TMain::RunClick(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::RunClick(TObject *Sender)
0 >>>if(RefreshTime <= 0)
0 >>>    String S = String("Calculating  ") +
0 >>>               Global::DTnow.FormatString("yyyy'/'m'/'d");
0 >>>if(PrjAutoExit->Checked && (All1->Checked || Last1->Checked || SummaryScreen1->Checked))
0 >>>    RefreshTime = Global::DTmax - Global::DTmin - 1;
0 >>>S += " with No graphical refresh!";
0 >>>}//raf835:end void __fastcall TMain::RunClick(TObject *Sender)
0 >>>else
0 >>>    switch(PlotControl->IntervalLength)
0 >>>    case 2: 
0 >>>RefreshTime = Global::Freq;
0 >>>daily1->Checked = true;
0 >>>break;
0 >>>case 3: 
0 >>>RefreshTime = (float) Global::Freq*3.5;
0 >>>biweekly1->Checked = true;
0 >>>break;
0 >>>case 4: 
0 >>>RefreshTime = Global::Freq*7;
0 >>>weekly1->Checked = true;
0 >>>S += " with weekly refresh!";
0 >>>break;
0 >>>case 5:  
0 >>>RefreshTime = Global::Freq*30;
0 >>>monthly1->Checked = true;
0 >>>S += " with monthly refresh!";
0 >>>break;
0 >>>case 6:  
0 >>>RefreshTime = Global::Freq*366;
0 >>>yearly1->Checked = true;
0 >>>S += " with yearly refresh!";
0 >>>break;
0 >>>case 7: 
0 >>>RefreshTime = Global::DTmax - Global::DTindx;
0 >>>atend1->Checked = true;
0 >>>S += " with No graphical refresh!";
0 >>>biweekly1Click(Sender); 
0 >>>break;
0 >>>}//raf835:end void __fastcall TMain::RunClick(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::RunClick(TObject *Sender)
0 >>>StatusBar1->Panels->Items[0]->Text = S.c_str();
0 >>>StatusBar1->Repaint();
0 >>>Chart->AutoRepaint = true;
0 >>>Chart->Repaint();
0 >>>Application->ProcessMessages();
0 >>>}//raf835:end void __fastcall TMain::RunClick(TObject *Sender)
0 >>>if(PlotControl->IntervalControl)
0 >>>    break;
0 >>>DoObsStatus(Sender, First);
0 >>>long Nan_error = 0;
0 >>>bool Reset = true;
0 >>>if(Obs_preset) 
0 >>>    Obs_preset->pre_run();
0 >>>for(Global::CurrentModuleRun = 0; Global::CurrentModuleRun < Global::OurModulesList->Count; Global::CurrentModuleRun++)
0 >>>    long Last = Global::CRHMControlSaveCnt;
0 >>>ClassModule *p = (ClassModule*) Global::OurModulesList->Objects[Global::CurrentModuleRun];
0 >>>if(p->GroupCnt && ((ClassMacro*) p)->ObsModule) 
0 >>>    ((ClassMacro*) p)->ObsModule->pre_run();
0 >>>p->ReadObs(Reset);
0 >>>Reset = false;
0 >>>CheckBlankModule(Sender);
0 >>>if(!p->isGroup || !Global::CRHMStatus || (Global::CRHMStatus & 1 && Global::ModuleBitSet[Global::CurrentModuleRun]))
0 >>>    p->run();
0 >>>}//raf835:end void __fastcall TMain::RunClick(TObject *Sender)
0 >>>CheckBlankModule(Sender);
0 >>>if(Last != Global::CRHMControlSaveCnt) 
0 >>>    Global::ModuleBitSet.set(Global::CurrentModuleRun);
0 >>>}//raf835:end void __fastcall TMain::RunClick(TObject *Sender)
0 >>>if(Global::NaNcheck)
0 >>>    for (itVar = Global::MapVars.begin(); itVar !=  Global::MapVars.end(); itVar++)
0 >>>        thisVar = (*itVar).second;
0 >>>if(thisVar->varType == CRHM::Float)
0 >>>    for(long cc = 0; cc < thisVar->dim; ++cc)
0 >>>        if(IsNan(thisVar->values[cc]))
0 >>>            thisVar->values[cc] = -999;
0 >>>if(Nan_error <= 0)
0 >>>    Nan_error = 1;
0 >>>String D = "***** NAN (not a number error) found at yy mm dd hh mm: " + Global::DTnow.FormatString("yy mm dd hh nn ") + " ,DTindx = " + String(Global::DTindx);
0 >>>LogMessage(D.c_str());
0 >>>}//raf835:end void __fastcall TMain::RunClick(TObject *Sender)
0 >>>String SS = String(String(thisVar->module.c_str()) + " " + String(thisVar->name.c_str()) + "(" + String(cc+1) + ")");
0 >>>LogMessage(SS.c_str());
0 >>>}//raf835:end void __fastcall TMain::RunClick(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::RunClick(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::RunClick(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::RunClick(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::RunClick(TObject *Sender)
0 >>>if(Nan_error > 0)
0 >>>    LogMessage("***** NAN (not a number error) end");
0 >>>LogMessage("");
0 >>>Nan_error = -1;
0 >>>}//raf835:end void __fastcall TMain::RunClick(TObject *Sender)
0 >>>bool OneOutput = false;
0 >>>bool DoOutput = true;
0 >>>if(Global::CRHMControlSaveCnt && !(Global::CRHMStatus & 1))  
0 >>>{
1 >>>    VariableBackUp(Sender); 
1 >>>    Global::CRHMStatus |= 1; 
1 >>>    LogMessage("Start save Main", DD);
1 >>>    OneOutput = true;
1 >>>}
0 >>>if((Global::CRHMStatus & 1) && (!Global::CRHMControlSaveCnt || Global::DTindx >= Global::DTmax-1))  
0 >>>{
1 >>>    Global::CRHMStatus &= 126; 
1 >>>    VariableRestore(Sender);
1 >>>    Global::CRHMControlSaveCnt = 0; 
1 >>>    LogMessage("End save Main", DD);
1 >>>    LogDebug(" ");
1 >>>    DoOutput = false;
1 >>>}
0 >>>if(!(Global::CRHMStatus & 7) && !(Global::CRHMControlSaveCnt) && DoOutput || OneOutput)  
0 >>>{
1 >>>    double xx;
1 >>>    for (int ii = 0; ii < SeriesCnt; ii++)
1 >>>        if(mmsData[ii] != NULL)
1 >>>            xx = *mmsData[ii];
1 >>>    if(xx < xLimit)
1 >>>        cdSeries[ii]->AddXY(Global::DTnow, xx, "", CurrentColor);
1 >>>}
0 >>>else
0 >>>    xx = (*mmsDataL[ii]);
0 >>>if(xx < lLimit)
0 >>>    cdSeries[ii]->AddXY(Global::DTnow, xx, "", CurrentColor);
0 >>>}//raf835:end void __fastcall TMain::RunClick(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::RunClick(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::RunClick(TObject *Sender)
0 >>>else
0 >>>    Global::CRHMStatus &=123; 
0 >>>RefreshTime--;
0 >>>if(Nan_error != 0)
0 >>>    String D = "yy mm dd hh mm: " + Global::DTnow.FormatString("yy mm dd hh nn ") + ", DTindx = " + String(Global::DTindx);
0 >>>Application->MessageBox(D.c_str(), "NaN error", MB_OK);
0 >>>GoodRun = false;
0 >>>break;
0 >>>}//raf835:end void __fastcall TMain::RunClick(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::RunClick(TObject *Sender)
0 >>>Global::BuildFlag = CRHM::DECL;
0 >>>}//raf835:end void __fastcall TMain::RunClick(TObject *Sender)
0 >>>catch (Sysutils::Exception &E)
0 >>>    String S = E.Message + " at " +
0 >>>               Global::DTnow.FormatString("yyyy'/'m'/'d hh':'nn") + " (" + Global::DTindx + ") in '" + Global::OurModulesList->Strings[Global::CurrentModuleRun] + "'";
0 >>>ShowMessage(S.c_str());
0 >>>LogError(S + " (" + FloatToStrF(Global::DTnow, ffGeneral	, 10, 0) + ")", ERR);
0 >>>GoodRun = false;
0 >>>}//raf835:end void __fastcall TMain::RunClick(TObject *Sender)
0 >>>catch (CRHMException Except)
0 >>>    String S = Except.Message.c_str() + String("at ") +
0 >>>               Global::DTnow.FormatString("yyyy'/'m'/'d hh':'nn") + " in '" + Global::OurModulesList->Strings[Global::CurrentModuleRun] + "'";
0 >>>ShowMessage(S.c_str());
0 >>>LogError(S + " (" + FloatToStrF(Global::DTnow, ffGeneral	, 10, 0) + ")", ERR);
0 >>>GoodRun = false;
0 >>>}//raf835:end void __fastcall TMain::RunClick(TObject *Sender)
0 >>>LogMessage(" ");
0 >>>Dt = TDateTime::CurrentDateTime();
0 >>>Message = "End of model run: " + Dt.DateString() +  FormatDateTime(" hh:mm", Dt)
0 >>>          + ". Program  " + AboutBox->Label2->Caption;
0 >>>LogMessage(Message.c_str());
0 >>>LogDebug(" ");
0 >>>Screen->Cursor = OriginalCursor;
0 >>>ReleaseCapture();
0 >>>Global::CRHMStatus = 0;  
0 >>>delete[] mmsData;
0 >>>delete[] mmsDataL;
0 >>>ParameterRestore(Sender);
0 >>>((ClassModule*) Global::OurModulesList->Objects[0])->InitReadObs();
0 >>>for(int ii = 0; ii < Global::OurModulesList->Count; ii++)
0 >>>    ((ClassModule*) (Global::OurModulesList->Objects[ii]))->finish(true);
0 >>>if(GoodRun)
0 >>>    if(!PlotControl->IntervalControl)
0 >>>        StatusBar1->Panels->Items[0]->Text = "Updating VarObsFunct";
0 >>>StatusBar1->Repaint();
0 >>>VarObsFunct_Update(Sender);
0 >>>if(SaveStateFlag) SaveState(Sender);
0 >>>if(Last1->Checked) Last1Rprt(Sender);
0 >>>if(All1->Checked) All1Rprt(Sender);
0 >>>if(DebugScreen1->Checked) DebugScreen1Rprt(Sender);
0 >>>if(SummaryScreen1->Checked) SummaryScreen1Rprt(Sender);
0 >>>}//raf835:end void __fastcall TMain::RunClick(TObject *Sender)
0 >>>else if(LoopList)  
0 >>>{
1 >>>    delete LoopList;
1 >>>    LoopList = NULL;
1 >>>}
0 >>>StatusBar1->Panels->Items[0]->Text = "Idle";
0 >>>LogDebugT("\"end of run\".");
0 >>>}//raf835:end void __fastcall TMain::RunClick(TObject *Sender)
0 >>>else
0 >>>    StatusBar1->Panels->Items[0]->Text = "Faulty Run";
0 >>>Chart->AutoRepaint = true;
0 >>>Chart->Repaint();
0 >>>}//raf835:end void __fastcall TMain::RunClick(TObject *Sender)
0 >>>void __fastcall TMain::ExportClick(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 10 @ void __fastcall TMain::ExportClick(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 12 @ void __fastcall TMain::ExportClick(TObject *Sender)";
1 >>>    FileOutput->ShowModal();
1 >>>}
0 >>>void __fastcall TMain::AboutClick(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 11 @ void __fastcall TMain::AboutClick(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 13 @ void __fastcall TMain::AboutClick(TObject *Sender)";
1 >>>    AboutBox->ShowModal();
1 >>>}
0 >>>void __fastcall TMain::ListBox3Click(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 12 @ void __fastcall TMain::ListBox3Click(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 14 @ void __fastcall TMain::ListBox3Click(TObject *Sender)";
1 >>>    int ii = ListBox3->ItemIndex;
1 >>>    if(SeriesCnt <= 0)
1 >>>        ListBox3->Items->Delete(ii);
1 >>>    else
1 >>>        for(int jj = 0; jj < SeriesCnt; jj++)
1 >>>            if(cdSeries[jj]->Title == ListBox3->Items->Strings[ii])
1 >>>                ((ClassVar*) cdSeries[jj]->Tag)->TchrtOpt = cdSeries[jj]->VertAxis == aRightAxis;
1 >>>    cdSeries[jj]->ParentChart = NULL;
1 >>>    cdSeries[jj]->Clear();
1 >>>    for(int kk = jj+1; kk < SeriesCnt; kk++)
1 >>>        cdSeries[kk-1] = cdSeries[kk];
1 >>>    ListBox3->Items->Delete(ii);
1 >>>    SeriesCnt--;
1 >>>    break;
1 >>>}
0 >>>}//raf835:end void __fastcall TMain::ListBox3Click(TObject *Sender)
0 >>>void __fastcall TMain::ConstructClick(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 13 @ void __fastcall TMain::ConstructClick(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 15 @ void __fastcall TMain::ConstructClick(TObject *Sender)";
1 >>>    LogForm->ClearRunLogs();
1 >>>    FreeChart1(Sender);          
1 >>>    BldForm->ShowModal();
1 >>>    if(BldForm->Execute)
1 >>>        InitModules(Sender);
1 >>>    BldForm->ReadBuildParameters(Sender); 
1 >>>    dirty = true;
1 >>>}
0 >>>}//raf835:end void __fastcall TMain::ConstructClick(TObject *Sender)
0 >>>void __fastcall TMain::InitModules(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 14 @ void __fastcall TMain::InitModules(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 16 @ void __fastcall TMain::InitModules(TObject *Sender)";
1 >>>    ClassVar *thisVar;
1 >>>    Global::BuildFlag = CRHM::DECL;
1 >>>    Box1Disply = CRHM::OUTPUT; 
1 >>>    for(Global::CurrentModuleRun = 0; Global::CurrentModuleRun < Global::OurModulesList->Count; Global::CurrentModuleRun++)
1 >>>        ((ClassModule*) Global::OurModulesList->Objects[Global::CurrentModuleRun])->nhru = Global::nhru;
1 >>>    ((ClassModule*) Global::OurModulesList->Objects[Global::CurrentModuleRun])->decl();
1 >>>}
0 >>>if(LogForm->DeclErrors > 0)
0 >>>    Application->MessageBox("Module errors", "Model Declaration Error", MB_OK);
0 >>>Label4Click(Sender);
0 >>>}//raf835:end void __fastcall TMain::InitModules(TObject *Sender)
0 >>>void __fastcall TMain::ListBox4Click(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 15 @ void __fastcall TMain::ListBox4Click(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 17 @ void __fastcall TMain::ListBox4Click(TObject *Sender)";
1 >>>    long Showing = ListBox4->ItemIndex;
1 >>>    if(Showing == -1) return; 
1 >>>    TLineSeries *cdSeries = (TLineSeries *) ListBox4->Items->Objects[ListBox4->ItemIndex];
1 >>>    ClassVar* thisVar =  (ClassVar *) cdSeries->Tag;
1 >>>    thisVar->TchrtOpt = cdSeries->VertAxis == aRightAxis;
1 >>>    if(thisVar->FunKind > CRHM::FOBS)
1 >>>        delete thisVar;
1 >>>    cdSeries->ParentChart = NULL;
1 >>>    cdSeries->Clear();
1 >>>    ListBox4->Items->Delete(ListBox4->ItemIndex);
1 >>>}
0 >>>void __fastcall TMain::AddObsPlot(TObject *Sender, ClassVar *thisVar,
0 >>>                                  TLineSeries *cdSeries, String S, CRHM::TFun Funct)
0 >>>{
1 >>>    cout << "signature# 18 @ TLineSeries *cdSeries, String S, CRHM::TFun Funct)";
1 >>>    ClassVar *newVar;
1 >>>    Global::HRU_OBS = Global::HRU_OBS_DIRECT; 
1 >>>    Chart->Axes->Items[2]->Title->Caption = thisVar->units.c_str();
1 >>>    float **Data = thisVar->FileData->Data;
1 >>>    double xx;
1 >>>    double DTstartR = INT(DateTimePicker1->Date);
1 >>>    double DTendR   = INT(DateTimePicker2->Date);
1 >>>    if(DTstartR >= DTendR) return;
1 >>>    TDateTime Save_DTnow = Global::DTnow; 
1 >>>    double MyInterval = thisVar->FileData->Interval;
1 >>>    long DTmin  = INT((DTstartR-Global::DTstart)* thisVar->FileData->Freq)*Global::Freq/thisVar->FileData->Freq;
1 >>>    long DTmax  = INT((DTendR-Global::DTstart)* thisVar->FileData->Freq)*Global::Freq/thisVar->FileData->Freq;
1 >>>    long jj1 = S.LastDelimiter("(");
1 >>>    long jj2 = S.LastDelimiter(")");
1 >>>    long Indx;
1 >>>    string::size_type pp;
1 >>>    pp = thisVar->name.rfind('(');
1 >>>    bool AlreadyIndex = (pp != string::npos); 
1 >>>    if(ListHruNames && thisVar->varType < CRHM::Read) 
1 >>>        Indx = ListHruNames->IndexOf(S.SubString(jj1+1, jj2-jj1-1)) - 1;
1 >>>    else
1 >>>    {
2 >>>        if(thisVar->root != "" || AlreadyIndex)
2 >>>            Indx = 0; 
2 >>>        else
2 >>>            Indx = (S.SubString(jj1+1, jj2-jj1-1)).ToInt()-1;
2 >>>    }
1 >>>    long IndxMin = thisVar->FileData->IndxMin;
1 >>>    long IndxMax = thisVar->FileData->IndxMax;
1 >>>    if(thisVar->FileData->Times != NULL)   
1 >>>    {
2 >>>        if(Global::Freq == 1)
2 >>>            --DTendR;
2 >>>        float Sum = 0.0;
2 >>>        for(long ii = 0; ii < thisVar->FileData->Lines; ++ii)
2 >>>            if(thisVar->FileData->Times[ii] < DTstartR) continue;
2 >>>        if(thisVar->FileData->Times[ii] > DTendR) continue;
2 >>>        xx = Data[thisVar->offset+Indx][ii];
2 >>>        if(Funct == CRHM::TOT)
2 >>>            Sum += xx;
2 >>>        xx = Sum;
2 >>>    }
1 >>>    cdSeries->AddXY(thisVar->FileData->Times[ii], xx, "", CurrentColor);
1 >>>}
0 >>>}//raf835:end void __fastcall TMain::ListBox4Click(TObject *Sender)
0 >>>else if(Funct <= CRHM::MJ_W)  
0 >>>{
1 >>>    if(MyInterval == 1) cdSeries->Stairs = true;
1 >>>    for (Global::DTindx = DTmin; Global::DTindx < DTmax; Global::DTindx++)
1 >>>        Global::DTnow = Global::DTstart + Global::Interval*Global::DTindx + Global::Interval;
1 >>>    if(MyInterval >= 1) --Global::DTnow;
1 >>>    if(Global::DTindx*thisVar->FileData->Freq/Global::Freq >= IndxMin
1 >>>            && Global::DTindx*thisVar->FileData->Freq/Global::Freq <= IndxMax)
1 >>>        xx = Data[thisVar->offset+Indx][(Global::DTindx*thisVar->FileData->Freq/Global::Freq - IndxMin)];
1 >>>    if(Funct == CRHM::FOBS)
1 >>>        ; 
1 >>>    else if(Funct == CRHM::VP_SAT)
1 >>>        if (xx > 0.0)
1 >>>            xx = 0.611 * exp(17.27*xx / (xx + 237.3));
1 >>>        else
1 >>>            xx = 0.611 * exp(21.88*xx / (xx + 265.5));
1 >>>}
0 >>>else if(Funct == CRHM::W_MJ)
0 >>>    xx *= thisVar->FileData->Interval*86400/1.0E6;
0 >>>else if(Funct == CRHM::MJ_W)
0 >>>    xx *= 1.0E6/86400/thisVar->FileData->Interval;
0 >>>cdSeries->AddXY(Global::DTnow, xx, "", CurrentColor);
0 >>>}//raf835:end void __fastcall TMain::ListBox4Click(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::ListBox4Click(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::ListBox4Click(TObject *Sender)
0 >>>else   
0 >>>{
1 >>>    cdSeries->Stairs = true;
1 >>>    newVar = new ClassVar(*thisVar);
1 >>>    newVar->name = S.c_str();
1 >>>    newVar->FileData->DataFileName = "Copy";
1 >>>    string::size_type pp = thisVar->units.find_last_of(")");
1 >>>    if(thisVar->FileData->Freq > 1 && (thisVar->units[pp-1] == 'd'))   
1 >>>        thisVar->Daily = TRUE;
1 >>>    else
1 >>>        thisVar->Daily = FALSE;
1 >>>    if(newVar->root == "")  
1 >>>    {
2 >>>        if(thisVar->FileData->Freq == 1)
2 >>>            newVar->LoopFunct = &ClassVar::LoopFirst;
2 >>>        else if(thisVar->Daily)
2 >>>            newVar->LoopFunct = &ClassVar::LoopFirst;
2 >>>        else
2 >>>            newVar->LoopFunct = &ClassVar::LoopRange;
2 >>>    }
1 >>>    else   
1 >>>    {
2 >>>        if(thisVar->Daily)
2 >>>            newVar->LoopFunct = &ClassVar::LoopLast;
2 >>>        else
2 >>>            newVar->LoopFunct = &ClassVar::LoopRange;
2 >>>    }
1 >>>    newVar->FunctVar = thisVar;
1 >>>    switch (Funct)
1 >>>    case CRHM::AVG:
1 >>>    newVar->UserFunct_ = &ClassVar::Tot_;
1 >>>    newVar->FunKind = CRHM::AVG;
1 >>>    break;
1 >>>case CRHM::MIN:
1 >>>    newVar->UserFunct_ = &ClassVar::Min_;
1 >>>    newVar->FunKind = CRHM::MIN;
1 >>>    break;
1 >>>case CRHM::MAX:
1 >>>    newVar->UserFunct_ = &ClassVar::Max_;
1 >>>    newVar->FunKind = CRHM::MAX;
1 >>>    break;
1 >>>case CRHM::TOT:
1 >>>    newVar->UserFunct_ = &ClassVar::Tot_;
1 >>>    newVar->FunKind = CRHM::TOT;
1 >>>    break;
1 >>>case CRHM::POS:
1 >>>    newVar->UserFunct_ = &ClassVar::Pos_;
1 >>>    newVar->FunKind = CRHM::POS;
1 >>>    break;
1 >>>case CRHM::FIRST:
1 >>>    newVar->UserFunct_ = &ClassVar::First_;
1 >>>    newVar->FunKind = CRHM::FIRST;
1 >>>    newVar->LoopFunct = &ClassVar::LoopFirst;
1 >>>    break;
1 >>>case CRHM::LAST:
1 >>>    newVar->UserFunct_ = &ClassVar::Last_;
1 >>>    newVar->FunKind = CRHM::LAST;
1 >>>    newVar->LoopFunct = &ClassVar::LoopLast;
1 >>>    break;
1 >>>case CRHM::CNT:
1 >>>    newVar->UserFunct_ = &ClassVar::Count_;
1 >>>    newVar->FunKind = CRHM::CNT;
1 >>>    break;
1 >>>case CRHM::CNT0:
1 >>>    newVar->UserFunct_ = &ClassVar::Count0_;
1 >>>    newVar->FunKind = CRHM::CNT0;
1 >>>    break;
1 >>>case CRHM::DLTA:
1 >>>    newVar->UserFunct_ = &ClassVar::First_;
1 >>>    newVar->LoopFunct = &ClassVar::LoopFirst;
1 >>>    newVar->FunKind = CRHM::DLTA;
1 >>>    break;
1 >>>} 
0 >>>bool First = false;
0 >>>long Next = -1;
0 >>>long Days = 0;
0 >>>long LastDays = 0;
0 >>>long Lastkk = 0;
0 >>>long CurrentIndx = -1;
0 >>>long LastIndex = -1;
0 >>>long itime[6];
0 >>>long Greatest;
0 >>>long DTminX = DTmin;
0 >>>if(IndxMin > 0)
0 >>>    DTminX = IndxMin;
0 >>>float Delta0 = 0.0;
0 >>>float First0;
0 >>>float Temp;
0 >>>dattim("now", itime);
0 >>>for (Global::DTindx = DTmin; Global::DTindx < DTmax; Global::DTindx+=Global::Freq)
0 >>>    Global::DTnow = Global::DTstart + Global::Interval*Global::DTindx + Global::Interval;
0 >>>if(Global::DTindx*Global::Freq/thisVar->FileData->Freq >= IndxMin)
0 >>>    if(Global::DTindx*thisVar->FileData->Freq/Global::Freq > IndxMax)
0 >>>        break;
0 >>>    else if(Global::Interval >= 1) --Global::DTnow;
0 >>>dattim("now", itime);
0 >>>switch(TBase)
0 >>>case 0: 
0 >>>if(Next == -1 || Next != itime[2])
0 >>>    Next = itime[2];
0 >>>First = TRUE;
0 >>>}//raf835:end void __fastcall TMain::ListBox4Click(TObject *Sender)
0 >>>break;
0 >>>case 1: 
0 >>>if(Next == -1 || itime[0] == Next && itime[1] == water_year_month)
0 >>>    if(Next == -1 && itime[1] < water_year_month)
0 >>>        Next = itime[0];
0 >>>    else
0 >>>        Next = itime[0] + 1;
0 >>>First = TRUE;
0 >>>}//raf835:end void __fastcall TMain::ListBox4Click(TObject *Sender)
0 >>>break;
0 >>>case 2: 
0 >>>if(Next == -1 || itime[0] == Next && itime[1] == 1)
0 >>>    Next = itime[0] + 1;
0 >>>First = TRUE;
0 >>>}//raf835:end void __fastcall TMain::ListBox4Click(TObject *Sender)
0 >>>break;
0 >>>case 3: 
0 >>>if(Next == -1 || Next == itime[1])
0 >>>    Next = (itime[1])%12 + 1;
0 >>>First = TRUE;
0 >>>}//raf835:end void __fastcall TMain::ListBox4Click(TObject *Sender)
0 >>>break;
0 >>>case 4: 
0 >>>if(Next == -1)
0 >>>    Next = 0;
0 >>>First = TRUE; 
0 >>>}//raf835:end void __fastcall TMain::ListBox4Click(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::ListBox4Click(TObject *Sender)
0 >>>CurrentIndx = (Global::DTindx - DTminX)/thisVar->FileData->Freq-1;
0 >>>if(First)
0 >>>    if(Global::DTindx > DTmin && Global::DTindx > IndxMin)  
0 >>>    {
1 >>>        switch(Funct)
1 >>>        case CRHM::DLTA:
1 >>>        Temp = cdSeries->YValue[(Global::DTindx - DTmin)/thisVar->FileData->Freq-1];
1 >>>        cdSeries->YValue[CurrentIndx] -= Delta0;
1 >>>        Delta0 = Temp; 
1 >>>    case CRHM::AVG:
1 >>>    case CRHM::MIN: 
1 >>>    case CRHM::MAX: 
1 >>>    case CRHM::TOT: 
1 >>>    case CRHM::POS: 
1 >>>    case CRHM::LAST: 
1 >>>    case CRHM::CNT:  
1 >>>    case CRHM::CNT0: 
1 >>>        if(ObsFunct_Toggle == 1) 
1 >>>            for(long jj = LastIndex+1; jj <= CurrentIndx; ++jj)
1 >>>                cdSeries->YValue[jj] = cdSeries->YValue[CurrentIndx];
1 >>>        break;
1 >>>    case CRHM::FIRST: 
1 >>>        for(long jj = LastIndex+1; jj <= CurrentIndx; ++jj)
1 >>>            cdSeries->YValue[jj] = First0;
1 >>>        break;
1 >>>    } 
0 >>>}//raf835:end void __fastcall TMain::ListBox4Click(TObject *Sender)
0 >>>else if(Funct == CRHM::DLTA && TBase)  
0 >>>{
1 >>>    (newVar->*(newVar->LoopFunct))(Indx);
1 >>>    Delta0 = newVar->values[Indx];
1 >>>    newVar->UserFunct_ = &ClassVar::Last_; 
1 >>>    newVar->FunKind = CRHM::LAST;
1 >>>    newVar->LoopFunct = &ClassVar::LoopLast;
1 >>>}
0 >>>Lastkk = Global::DTindx;
0 >>>if(CurrentIndx > -1) 
0 >>>    LastIndex = CurrentIndx;
0 >>>switch (Funct)   
0 >>>{
1 >>>case CRHM::MAX:
1 >>>    newVar->values[Indx] = -1000000.0;
1 >>>    break;
1 >>>case CRHM::MIN:
1 >>>    newVar->values[Indx] = 1000000.0;
1 >>>    break;
1 >>>case CRHM::AVG:
1 >>>case CRHM::TOT:
1 >>>case CRHM::CNT:
1 >>>case CRHM::CNT0:
1 >>>case CRHM::DLTA:
1 >>>case CRHM::POS:
1 >>>    newVar->values[Indx] = 0.0;
1 >>>} 
0 >>>LastDays = Days;
0 >>>Days = 0.0;
0 >>>}//raf835:end void __fastcall TMain::ListBox4Click(TObject *Sender)
0 >>>(newVar->*(newVar->LoopFunct))(Indx);
0 >>>xx = newVar->values[Indx];
0 >>>cdSeries->AddXY(Global::DTnow, xx, "", CurrentColor);
0 >>>if(First)
0 >>>    First0 = xx;
0 >>>if(Global::DTindx > DTmin && Global::DTindx > IndxMin)
0 >>>    switch(Funct)
0 >>>    case CRHM::AVG:
0 >>>Greatest = Days;
0 >>>if(LastDays > Days)
0 >>>    Greatest = LastDays;
0 >>>cdSeries->YValue[CurrentIndx] /= (Global::Freq*Greatest);
0 >>>LastDays = 0;
0 >>>break;
0 >>>case CRHM::DLTA:
0 >>>if(!First)
0 >>>    cdSeries->YValue[CurrentIndx] -= Delta0;
0 >>>break;
0 >>>}//raf835:end void __fastcall TMain::ListBox4Click(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::ListBox4Click(TObject *Sender)
0 >>>++Days;
0 >>>First = FALSE;
0 >>>}//raf835:end void __fastcall TMain::ListBox4Click(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::ListBox4Click(TObject *Sender)
0 >>>if(Global::DTindx > DTmin && Global::DTindx > IndxMin)  
0 >>>{
1 >>>    CurrentIndx = (Global::DTindx - DTminX)/thisVar->FileData->Freq-1;
1 >>>    switch(Funct)
1 >>>    case CRHM::AVG:
1 >>>    Greatest = Days;
1 >>>    if(LastDays > Days)
1 >>>        Greatest = LastDays;
1 >>>    cdSeries->YValue[CurrentIndx] /= (Global::Freq*Greatest);
1 >>>    if(ObsFunct_Toggle == 1) 
1 >>>        for(long jj = LastIndex+1; jj <= CurrentIndx; ++jj)
1 >>>            cdSeries->YValue[jj] = cdSeries->YValue[CurrentIndx];
1 >>>    break;
1 >>>case CRHM::DLTA:
1 >>>    cdSeries->YValue[CurrentIndx] -= Delta0;
1 >>>case CRHM::MIN: 
1 >>>case CRHM::MAX: 
1 >>>case CRHM::TOT: 
1 >>>case CRHM::POS: 
1 >>>case CRHM::LAST: 
1 >>>case CRHM::CNT:  
1 >>>case CRHM::CNT0: 
1 >>>    if(ObsFunct_Toggle == 1) 
1 >>>        for(long jj = LastIndex+1; jj <= CurrentIndx; ++jj)
1 >>>            cdSeries->YValue[jj] = cdSeries->YValue[CurrentIndx];
1 >>>    break;
1 >>>case CRHM::FIRST: 
1 >>>    for(long jj = LastIndex+1; jj <= CurrentIndx; ++jj)
1 >>>        cdSeries->YValue[jj] = First0;
1 >>>    break;
1 >>>} 
0 >>>}//raf835:end void __fastcall TMain::ListBox4Click(TObject *Sender)
0 >>>delete newVar->FileData; 
0 >>>delete newVar; 
0 >>>cdSeries->Tag = NULL;
0 >>>}//raf835:end void __fastcall TMain::ListBox4Click(TObject *Sender)
0 >>>Global::DTnow = Save_DTnow; 
0 >>>if(!CommandLine)  
0 >>>    Chart->Repaint();
0 >>>}//raf835:end void __fastcall TMain::ListBox4Click(TObject *Sender)
0 >>>void __fastcall TMain::PrjExitClick(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 16 @ void __fastcall TMain::PrjExitClick(TObject *Sender)\n");  fclose(stdout);
1 >>>    this->Close(); 
1 >>>}
0 >>>void __fastcall TMain::ObsFileClose(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 17 @ void __fastcall TMain::ObsFileClose(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 19 @ void __fastcall TMain::ObsFileClose(TObject *Sender)";
1 >>>    TMenuItem *ObsItem;
1 >>>    MapVar::iterator itVar;
1 >>>    ClassVar * thisVar;
1 >>>    TMenuItem * thisMenu = (TMenuItem *) Sender;
1 >>>    String S = thisMenu->Caption;
1 >>>    S = S.Delete(1, S.Pos(" ")); 
1 >>>    int Pos  = ObsFilesList->IndexOf(S);
1 >>>    if(Pos == 0 && ObsFilesList->Count > 1)
1 >>>        ObsCloseClick(Sender);
1 >>>    return;
1 >>>}
0 >>>int Reply = Application->MessageBox(S.c_str(), "Close Observation File", IDOK);
0 >>>if(Reply == IDOK)
0 >>>    if(Pos == 0)
0 >>>        ResetPickers();
0 >>>Global::nobs = 1;  
0 >>>Global::maxobs = 1;  
0 >>>}//raf835:end void __fastcall TMain::ObsFileClose(TObject *Sender)
0 >>>ObsItem = MainMenu1->Items->Items[1];
0 >>>ObsItem->Delete(Pos+4);  
0 >>>FreeChart2(Sender); 
0 >>>ListBox2->Clear();
0 >>>ClassData * FileData = (ClassData *) ObsFilesList->Objects[Pos];
0 >>>delete FileData;   
0 >>>FileData = NULL;
0 >>>ObsFilesList->Delete(Pos);  
0 >>>for (itVar = Global::MapVars.begin(); itVar !=  Global::MapVars.end(); itVar++)
0 >>>    thisVar = (*itVar).second;
0 >>>if(thisVar->varType >= CRHM::Read)
0 >>>    if(IndexOf(ListBox2, (*itVar).second->name.c_str()) == -1)
0 >>>        ListBox2->Items->AddObject((*itVar).second->name.c_str(),
0 >>>                                   (TObject*) (*itVar).second);
0 >>>}//raf835:end void __fastcall TMain::ObsFileClose(TObject *Sender)
0 >>>for (itVar = Global::MapVars.begin(); itVar !=  Global::MapVars.end(); itVar++)
0 >>>    thisVar = (*itVar).second;
0 >>>if(thisVar->varType < CRHM::Read && thisVar->visibility == CRHM::VARIABLE)
0 >>>    if(IndexOf(ListBox1, (*itVar).second->name.c_str()) == -1)
0 >>>        ListBox1->Items->AddObject((*itVar).second->name.c_str(),
0 >>>                                   (TObject*) (*itVar).second);
0 >>>}//raf835:end void __fastcall TMain::ObsFileClose(TObject *Sender)
0 >>>S = ExtractFileName(S);
0 >>>for(long jj = 0; jj < SeriesCnt; jj++)
0 >>>    if(cdSeries[jj]->Title == S)
0 >>>        cdSeries[jj]->ParentChart = NULL;
0 >>>cdSeries[jj]->Clear();
0 >>>}//raf835:end void __fastcall TMain::ObsFileClose(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::ObsFileClose(TObject *Sender)
0 >>>Pos  = PrjObsHelp->IndexOf(S.SubString(1, S.Length()-4) + ".obs");  
0 >>>if(Pos > -1)
0 >>>    PrjObsHelp->Delete(Pos);
0 >>>UpDateModelMenu();
0 >>>}//raf835:end void __fastcall TMain::ObsFileClose(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::ObsFileClose(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::ObsFileClose(TObject *Sender)
0 >>>void __fastcall TMain::FormDestroy(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 18 @ void __fastcall TMain::FormDestroy(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 20 @ void __fastcall TMain::FormDestroy(TObject *Sender)";
1 >>>    HtmlHelp(0, NULL, HH_CLOSE_ALL, 0);
1 >>>    for(int ii = 0; ii < ObsFilesList->Count; ++ii)
1 >>>        ClassData * FileData = (ClassData *) ObsFilesList->Objects[ii];
1 >>>    delete FileData;   
1 >>>}
0 >>>delete ObsFilesList;
0 >>>ModVarRemove(Global::MapVars);
0 >>>Global::SharedMapPars.clear();
0 >>>delete ProjectList;
0 >>>#ifdef CRHM_DLL
0 >>>Global::OurModulesList->Clear();  
0 >>>DLL1CloseALLClick(Sender);    
0 >>>delete OpenDLLs;
0 >>>#endif
0 >>>delete Global::OurModulesList;
0 >>>delete Global::ModelModulesList;
0 >>>delete Global::OurHelpList;
0 >>>delete Global::PendingDLLModuleList;
0 >>>delete PrjObsHelp;
0 >>>delete Global::DeclRootList;
0 >>>ClearListBox4(Sender);
0 >>>if(cdSeries)
0 >>>    for (int ii = 0; ii < SeriesCnt; ii ++)
0 >>>        cdSeries[ii]->ParentChart = NULL;
0 >>>cdSeries[ii]->Clear();
0 >>>}//raf835:end void __fastcall TMain::FormDestroy(TObject *Sender)
0 >>>delete [] cdSeries;
0 >>>}//raf835:end void __fastcall TMain::FormDestroy(TObject *Sender)
0 >>>for(long ii=0; ii < 5; ++ii)
0 >>>    delete[] Global::HRU_OBS_DIRECT[ii];
0 >>>delete[] Global::HRU_OBS_DIRECT;
0 >>>}//raf835:end void __fastcall TMain::FormDestroy(TObject *Sender)
0 >>>void __fastcall TMain::DateTimePicker1Change(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 19 @ void __fastcall TMain::DateTimePicker1Change(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 21 @ void __fastcall TMain::DateTimePicker1Change(TObject *Sender)";
1 >>>    FreeChart2(Sender);
1 >>>}
0 >>>void __fastcall TMain::DateTimePicker2Change(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 20 @ void __fastcall TMain::DateTimePicker2Change(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 22 @ void __fastcall TMain::DateTimePicker2Change(TObject *Sender)";
1 >>>    FreeChart2(Sender);
1 >>>}
0 >>>void __fastcall TMain::FreeChart1(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 21 @ void __fastcall TMain::FreeChart1(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 23 @ void __fastcall TMain::FreeChart1(TObject *Sender)";
1 >>>    if(SeriesCnt > 0)
1 >>>        for (int ii = 0; ii < SeriesCnt; ii ++)
1 >>>            ClassVar* thisVar =  (ClassVar *) cdSeries[ii]->Tag;
1 >>>    if(thisVar->FunKind > CRHM::FOBS && !thisVar->values && !thisVar->ivalues)
1 >>>        delete thisVar;
1 >>>    cdSeries[ii]->ParentChart = NULL;
1 >>>    cdSeries[ii]->Clear();
1 >>>}
0 >>>SeriesCnt = 0;
0 >>>}//raf835:end void __fastcall TMain::FreeChart1(TObject *Sender)
0 >>>ClearListBox4(Sender);
0 >>>}//raf835:end void __fastcall TMain::FreeChart1(TObject *Sender)
0 >>>void __fastcall TMain::FreeChart2(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 22 @ void __fastcall TMain::FreeChart2(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 24 @ void __fastcall TMain::FreeChart2(TObject *Sender)";
1 >>>    long end = ListBox4->Items->Count-1;
1 >>>    for (long ii = end; ii >= 0; --ii)   
1 >>>    {
2 >>>        TLineSeries * cdSeries = (TLineSeries *) ListBox4->Items->Objects[ii];
2 >>>        ClassVar* thisVar =  (ClassVar *) cdSeries->Tag;
2 >>>        if(thisVar)  
2 >>>        {
3 >>>            if(thisVar->root == "") 
3 >>>                ListBox4->Items->Delete(ii);
3 >>>            else 
3 >>>                continue;
3 >>>            if(thisVar->FunKind > CRHM::FOBS)
3 >>>                delete thisVar;
3 >>>        }
2 >>>        else  
2 >>>        {
3 >>>            String Name = ListBox4->Items->Strings[ii];
3 >>>            Name = Name.SubString(1, Name.LastDelimiter('(')-1);
3 >>>            thisVar = VarFind(string(string("obs ") + Name.c_str()));
3 >>>            if(thisVar && thisVar->root == "") 
3 >>>                ListBox4->Items->Delete(ii);
3 >>>            else 
3 >>>                continue;
3 >>>        }
2 >>>        cdSeries->ParentChart = NULL;
2 >>>        cdSeries->Clear();
2 >>>    }
1 >>>}
0 >>>void __fastcall TMain::WMGetMinMaxInfo(TWMGetMinMaxInfo &Msg)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 23 @ void __fastcall TMain::WMGetMinMaxInfo(TWMGetMinMaxInfo &Msg)\n");  fclose(stdout);
1 >>>    cout << "signature# 25 @ void __fastcall TMain::WMGetMinMaxInfo(TWMGetMinMaxInfo &Msg)";
1 >>>    int X = Msg.MinMaxInfo->ptMaxSize.x; 
1 >>>    int Y = Msg.MinMaxInfo->ptMaxSize.y; 
1 >>>    Msg.MinMaxInfo->ptMaxSize.x = X;
1 >>>    Msg.MinMaxInfo->ptMaxSize.y = Y;
1 >>>    Msg.MinMaxInfo->ptMaxPosition.x = 0;
1 >>>    Msg.MinMaxInfo->ptMaxPosition.y = 0;
1 >>>    Msg.MinMaxInfo->ptMinTrackSize.x = X*0.75; 
1 >>>    Msg.MinMaxInfo->ptMinTrackSize.y = Y*0.75; 
1 >>>    Msg.MinMaxInfo->ptMaxTrackSize.x = X; 
1 >>>    Msg.MinMaxInfo->ptMaxTrackSize.y = Y; 
1 >>>}
0 >>>void __fastcall TMain::PrjSaveAsClick(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 24 @ void __fastcall TMain::PrjSaveAsClick(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 26 @ void __fastcall TMain::PrjSaveAsClick(TObject *Sender)";
1 >>>    SaveDialogPrj->Filter = "Project Files (*.prj)|*.prj";
1 >>>    SaveDialogPrj->DefaultExt = "prj";
1 >>>    SaveDialogPrj->Title = "Save Project As";
1 >>>    if(SaveDialogPrj->Execute())
1 >>>        SaveDialogPrj->InitialDir = ExtractFilePath(AnsiReplaceStr(SaveDialogPrj->FileName, "/", "\\")); 
1 >>>    if(SaveDialogPrj->InitialDir.IsEmpty())
1 >>>        SaveDialogPrj->InitialDir = GetCurrentDir();
1 >>>    OpenDialogPrj->FileName = SaveDialogPrj->FileName;
1 >>>    SaveProject(Sender);
1 >>>}
0 >>>}//raf835:end void __fastcall TMain::PrjSaveAsClick(TObject *Sender)
0 >>>void __fastcall TMain::PrjSaveClick(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 25 @ void __fastcall TMain::PrjSaveClick(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 27 @ void __fastcall TMain::PrjSaveClick(TObject *Sender)";
1 >>>    if(!SaveDialogPrj->FileName.IsEmpty())
1 >>>        SaveProject(Sender);
1 >>>    else
1 >>>        PrjSaveAsClick(Sender);
1 >>>}
0 >>>void __fastcall TMain::SaveProject(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 26 @ void __fastcall TMain::SaveProject(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 28 @ void __fastcall TMain::SaveProject(TObject *Sender)";
1 >>>    MapPar::iterator itPar;
1 >>>    MapDim::iterator itDim;
1 >>>    ClassPar *thisPar;
1 >>>    ClassVar *lastVar = NULL;
1 >>>    String Output;
1 >>>    ProjectList->Add(DescripPrj.c_str());
1 >>>    TDateTime Dt = TDateTime::CurrentDateTime();
1 >>>    String S("  Creation: " + Dt.DateString() +  FormatDateTime(" hh:mm", Dt));
1 >>>    ProjectList->Add("###### " + AboutBox->Label2->Caption + S);
1 >>>    bool Prj = (SaveDialogPrj->FileName.LowerCase()).Pos(".prj");
1 >>>    if(Prj)
1 >>>        Main->Text = Main->Text.SubString(1, 49) + " - " + SaveDialogPrj->FileName;
1 >>>    ProjectList->Add("Dimensions:");
1 >>>    ProjectList->Add("######");
1 >>>    ProjectList->Add(String("nhru " + String(Global::maxhru)));
1 >>>    ProjectList->Add(String("nlay " + String(Global::nlay)));
1 >>>    ProjectList->Add(String("nobs " + String(Global::nobs)));
1 >>>    ProjectList->Add("######");
1 >>>    ProjectList->Add("Macros:");
1 >>>    ProjectList->Add("######");
1 >>>    for (int ii = 0; ii < Global::MacroModulesList->Count; ++ii)
1 >>>        ProjectList->Add("'" + Global::MacroModulesList->Strings[ii] + "'");
1 >>>    ProjectList->Add("######");
1 >>>    if(!Global::MapAKA.empty())
1 >>>        Mapstr2::iterator it;
1 >>>    ProjectList->Add("AKAs:");
1 >>>    ProjectList->Add("######");
1 >>>    for (it = Global::MapAKA.begin(); it !=  Global::MapAKA.end(); ++it)
1 >>>        string Var = (*it).first + ' ' + (*it).second;
1 >>>    ProjectList->Add(Var.c_str());
1 >>>}
0 >>>ProjectList->Add("######");
0 >>>}//raf835:end void __fastcall TMain::SaveProject(TObject *Sender)
0 >>>ProjectList->Add("Observations:");
0 >>>ProjectList->Add("######");
0 >>>for(int ii = 0; ii < ObsFilesList->Count; ii++)
0 >>>    String S = ObsFilesList->Strings[ii];
0 >>>ProjectList->Add(S);
0 >>>}//raf835:end void __fastcall TMain::SaveProject(TObject *Sender)
0 >>>ProjectList->Add("######");
0 >>>ProjectList->Add("Dates:");
0 >>>ProjectList->Add("######");
0 >>>String S;
0 >>>S = DateTimePicker1->Date.FormatString("yyyy m d");
0 >>>if(ObsFilesList->Count == 0)
0 >>>    S = S + " " + FloatToStrF(Global::Freq, ffGeneral, 0, 0);
0 >>>ProjectList->Add(S);
0 >>>S = DateTimePicker2->Date.FormatString("yyyy m d");
0 >>>ProjectList->Add(S);
0 >>>ProjectList->Add("######");
0 >>>#ifdef CRHM_DLL
0 >>>if(OpenDLLs->Count > 0)
0 >>>    ProjectList->Add("DLLs:");
0 >>>ProjectList->Add("######");
0 >>>CompactDlls();
0 >>>for(int ii = 0; ii < OpenDLLs->Count; ii++)
0 >>>    String S = OpenDLLs->Strings[ii];
0 >>>ProjectList->Add(S);
0 >>>}//raf835:end void __fastcall TMain::SaveProject(TObject *Sender)
0 >>>ProjectList->Add("######");
0 >>>}//raf835:end void __fastcall TMain::SaveProject(TObject *Sender)
0 >>>#endif
0 >>>ProjectList->Add("Modules:");
0 >>>ProjectList->Add("######");
0 >>>for(int ii = 0; ii < Global::OurModulesList->Count; ii++)
0 >>>    ClassModule* thisModule = (ClassModule*) Global::OurModulesList->Objects[ii];
0 >>>String S = Global::OurModulesList->Strings[ii];
0 >>>if(thisModule->variation > 0)
0 >>>    string AA("#0 ");
0 >>>AA[1] += log(thisModule->variation)/log(2) + 1;
0 >>>S = S + AA.c_str();
0 >>>}//raf835:end void __fastcall TMain::SaveProject(TObject *Sender)
0 >>>else
0 >>>    S = S + " ";
0 >>>S = S + thisModule->DLLName + " ";
0 >>>S = S + thisModule->Version;
0 >>>ProjectList->Add(S);
0 >>>if(thisModule->isGroup || thisModule->isStruct)
0 >>>    list<ModulePtr> ::iterator iterM;
0 >>>iterM = ((ClassMacro *) thisModule)->Modules.begin();
0 >>>while(iterM != ((ClassMacro *) thisModule)->Modules.end())
0 >>>    boost::weak_ptr<ClassModule> MP((*iterM));
0 >>>String S = String(" +") + (*iterM)->NameRoot.c_str();
0 >>>if((*iterM)->variation > 0)
0 >>>    string AA("#0 ");
0 >>>AA[1] += log((*iterM)->variation)/log(2) + 1;
0 >>>S = S + AA.c_str();
0 >>>}//raf835:end void __fastcall TMain::SaveProject(TObject *Sender)
0 >>>else
0 >>>    S = S + " ";
0 >>>S = S + (*iterM)->DLLName + " ";
0 >>>S = S + (*iterM)->Version;
0 >>>ProjectList->Add(S);
0 >>>++iterM;
0 >>>}//raf835:end void __fastcall TMain::SaveProject(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::SaveProject(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::SaveProject(TObject *Sender)
0 >>>ProjectList->Add("######");
0 >>>ProjectList->Add("Parameters:");
0 >>>ProjectList->Add("###### 'basin' parameters always first");
0 >>>for(int bb = 0; bb < 2; ++bb)  
0 >>>{
1 >>>    for (itPar = Global::MapPars.begin(); itPar !=  Global::MapPars.end(); itPar++)
1 >>>        thisPar = (*itPar).second;
1 >>>    if(thisPar->param == "HRU_group")
1 >>>        continue;
1 >>>    if(bb == 0 && thisPar->module != "shared")
1 >>>        continue;
1 >>>    if(bb == 1 && thisPar->module == "shared")
1 >>>        continue;
1 >>>    String S = String(thisPar->module.c_str()) + " " + String(thisPar->param.c_str());
1 >>>    if(thisPar->varType != CRHM::Txt)
1 >>>        S += " <" + FloatToStrF(thisPar->minVal, ffGeneral, 4, 0)+ " to " + FloatToStrF(thisPar->maxVal, ffGeneral, 4, 0) + ">";
1 >>>    ProjectList->Add(S);
1 >>>    for(int jj = 0; jj<thisPar->lay; jj++)
1 >>>        S = "";
1 >>>    for(int ii = 0; ii < thisPar->dim; ii++)
1 >>>        if(thisPar->varType == CRHM::Float)
1 >>>            S = S + FloatToStrF(thisPar->layvalues[jj][ii], ffGeneral, 4, 0) + " ";
1 >>>        else if(thisPar->varType == CRHM::Int)
1 >>>            S = S + FloatToStrF(thisPar->ilayvalues[jj][ii], ffFixed, 8, 0) + " ";
1 >>>        else if(thisPar->varType == CRHM::Txt)
1 >>>            if(thisPar->Strings->Count > ii)
1 >>>                S = S + "'" + thisPar->Strings->Strings[ii] + "' ";
1 >>>            else
1 >>>                S = "''"; 
1 >>>    if(ii%16 == 15)
1 >>>        ProjectList->Add(S);
1 >>>    S = "";
1 >>>}
0 >>>}//raf835:end void __fastcall TMain::SaveProject(TObject *Sender)
0 >>>if(!S.IsEmpty())
0 >>>{
1 >>>    ProjectList->Add(S);
1 >>>    S = "";
1 >>>}
0 >>>}//raf835:end void __fastcall TMain::SaveProject(TObject *Sender)
0 >>>if(!S.IsEmpty()) ProjectList->Add(S);
0 >>>}//raf835:end void __fastcall TMain::SaveProject(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::SaveProject(TObject *Sender)
0 >>>ProjectList->Add("######");
0 >>>ProjectList->Add("Initial_State");
0 >>>ProjectList->Add("######");
0 >>>TMenuItem *StateItem;
0 >>>StateItem = MainMenu1->Items->Items[5];
0 >>>if(StateItem->Count > 5)  
0 >>>{
1 >>>    for(int ii = 5; ii < StateItem->Count; ++ii)
1 >>>        ProjectList->Add(StateItem->Items[ii]->Caption);
1 >>>}
0 >>>ProjectList->Add("######");
0 >>>ProjectList->Add("Final_State");
0 >>>ProjectList->Add("######");
0 >>>if(SaveStateFlag)
0 >>>    ProjectList->Add(SaveDialogState->FileName);
0 >>>}//raf835:end void __fastcall TMain::SaveProject(TObject *Sender)
0 >>>ProjectList->Add("######");
0 >>>}//raf835:end void __fastcall TMain::SaveProject(TObject *Sender)
0 >>>ProjectList->Add("Summary_period");
0 >>>ProjectList->Add("######");
0 >>>String T = TBases[TBase];
0 >>>if(TBase == 1)
0 >>>    T = T + " " + String(water_year_month);
0 >>>ProjectList->Add(T);
0 >>>ProjectList->Add("######");
0 >>>ProjectList->Add("Log_Time_Format");
0 >>>ProjectList->Add("######");
0 >>>T = TLogFormats[Global::TimeFormat];
0 >>>ProjectList->Add(T);
0 >>>ProjectList->Add("######");
0 >>>if(Global::LOGVARLOAD)
0 >>>    ProjectList->Add("LOGVARLOAD");
0 >>>ProjectList->Add("######");
0 >>>}//raf835:end void __fastcall TMain::SaveProject(TObject *Sender)
0 >>>ProjectList->Add("Display_Variable:");
0 >>>ProjectList->Add("######");
0 >>>for (int ii = 0; ii < SeriesCnt; ii ++)   
0 >>>{
1 >>>    ClassVar *thisVar =  (ClassVar *) cdSeries[ii]->Tag;
1 >>>    thisVar->TchrtOpt = cdSeries[ii]->VertAxis == aRightAxis;
1 >>>}
0 >>>lastVar = NULL;
0 >>>Output = "";
0 >>>if(HruNames)
0 >>>    HruNameClick(Sender);
0 >>>for (int ii = 0; ii < ListBox3->Items->Count; ++ii)
0 >>>    long lay, dim;
0 >>>ExtractHruLay(ListBox3->Items->Strings[ii], dim, lay);
0 >>>ClassVar *thisVar = (ClassVar *) (ListBox3->Items->Objects[ii]);
0 >>>if(thisVar->TchrtOpt)
0 >>>    dim = -dim;
0 >>>String SS = String(dim);
0 >>>if(thisVar->lay > 0) SS += "," + String(lay);
0 >>>string Mod = thisVar->module;
0 >>>if(lastVar == NULL)
0 >>>    Output = (Mod + " " + thisVar->name + " ").c_str() + SS;
0 >>>else if(lastVar != thisVar)
0 >>>    ProjectList->Add(Output);
0 >>>Output = (Mod + " " + thisVar->name + " ").c_str() + SS;
0 >>>}//raf835:end void __fastcall TMain::SaveProject(TObject *Sender)
0 >>>else
0 >>>    Output += " " + SS;
0 >>>lastVar = thisVar;
0 >>>}//raf835:end void __fastcall TMain::SaveProject(TObject *Sender)
0 >>>if(!Output.IsEmpty()) ProjectList->Add(Output);
0 >>>ProjectList->Add("######");
0 >>>ProjectList->Add("Display_Observation:");
0 >>>ProjectList->Add("######");
0 >>>lastVar = NULL;
0 >>>String kind, lastkind;
0 >>>Output = "";
0 >>>for (int ii = 0; ii < ListBox4->Items->Count; ii ++)
0 >>>    String S = ListBox4->Items->Strings[ii];
0 >>>String FullName;
0 >>>long dim, lay;
0 >>>kind = "_obs";
0 >>>String Name = ExtractHruLayFunct(ListBox4->Items->Strings[ii], dim, lay, kind, FullName);
0 >>>TLineSeries *cdSeries = (TLineSeries *) ListBox4->Items->Objects[ii];
0 >>>ClassVar *thisVar;
0 >>>thisVar =  (ClassVar *) cdSeries->Tag; 
0 >>>if(!thisVar || !thisVar-> FileData)   
0 >>>{
1 >>>    if(!thisVar)
1 >>>        long Indx = ListBox3->Items->IndexOf(FullName);
1 >>>    if(Indx > -1)
1 >>>        thisVar = (ClassVar *) ListBox3->Items->Objects[Indx];
1 >>>    else
1 >>>        thisVar = VarFind(string(string("obs ") + Name.c_str()));
1 >>>}
0 >>>}//raf835:end void __fastcall TMain::SaveProject(TObject *Sender)
0 >>>if(cdSeries->VertAxis == aRightAxis)
0 >>>    dim = -dim;
0 >>>String SS = String(dim);
0 >>>if(lay > 0)
0 >>>    SS += "," + String(lay);
0 >>>if(Output != "" && (thisVar != lastVar || kind != lastkind))
0 >>>    ProjectList->Add(Output + " " + lastkind);
0 >>>if(thisVar)
0 >>>    Output = (thisVar->module + " " + Name.c_str() + " " + SS.c_str()).c_str();
0 >>>else 
0 >>>    Output = (String("obs ") + Name.c_str() + " " + SS.c_str()).c_str();
0 >>>}//raf835:end void __fastcall TMain::SaveProject(TObject *Sender)
0 >>>else if(lastVar) 
0 >>>    Output += " " + SS;
0 >>>else 
0 >>>    Output = (thisVar->module + " " + Name.c_str() + " " + SS.c_str()).c_str();
0 >>>lastVar = thisVar;
0 >>>lastkind = kind;
0 >>>}//raf835:end void __fastcall TMain::SaveProject(TObject *Sender)
0 >>>if(!Output.IsEmpty()) ProjectList->Add(Output + " " + kind); 
0 >>>ProjectList->Add("######");
0 >>>if(PrjAutoRun->Checked)
0 >>>    ProjectList->Add("Auto_Run");
0 >>>ProjectList->Add("######");
0 >>>}//raf835:end void __fastcall TMain::SaveProject(TObject *Sender)
0 >>>if(SaveChartTemplate->Checked)
0 >>>    ProjectList->Add("SaveChartTemplate");
0 >>>ProjectList->Add("######");
0 >>>String FileName = ChangeFileExt(SaveDialogPrj->FileName, ".Tee");
0 >>>Chart->RemoveAllSeries();
0 >>>SaveChartToFile(Chart, FileName, false, true);
0 >>>}//raf835:end void __fastcall TMain::SaveProject(TObject *Sender)
0 >>>if(PrjAutoExit->Checked)
0 >>>    ProjectList->Add("Auto_Exit");
0 >>>ProjectList->Add("######");
0 >>>}//raf835:end void __fastcall TMain::SaveProject(TObject *Sender)
0 >>>if(Last1->Checked)
0 >>>    ProjectList->Add("Log_Last");
0 >>>ProjectList->Add("######");
0 >>>}//raf835:end void __fastcall TMain::SaveProject(TObject *Sender)
0 >>>if(All1->Checked)
0 >>>    ProjectList->Add("Log_All");
0 >>>ProjectList->Add("######");
0 >>>}//raf835:end void __fastcall TMain::SaveProject(TObject *Sender)
0 >>>if(DebugScreen1->Checked)
0 >>>    ProjectList->Add("Log_Screen");
0 >>>ProjectList->Add("######");
0 >>>}//raf835:end void __fastcall TMain::SaveProject(TObject *Sender)
0 >>>if(SummaryScreen1->Checked)
0 >>>    ProjectList->Add("Summary_Screen");
0 >>>ProjectList->Add("######");
0 >>>}//raf835:end void __fastcall TMain::SaveProject(TObject *Sender)
0 >>>ProjectList->Add("TChart:");
0 >>>ProjectList->Add("######");
0 >>>for(int ii = 0; ii < Chart->Title->Text->Count; ++ii)
0 >>>    ProjectList->Add(Chart->Title->Text->Strings[ii]);
0 >>>ProjectList->Add(" ");
0 >>>for(int ii = 0; ii < Chart->SubTitle->Text->Count; ++ii)
0 >>>    ProjectList->Add(Chart->SubTitle->Text->Strings[ii]);
0 >>>ProjectList->Add(" ");
0 >>>ProjectList->Add(Chart->Axes->Items[2]->Title->Caption);
0 >>>ProjectList->Add(" ");
0 >>>for(int ii = 0; ii < Chart->Foot->Text->Count; ++ii)
0 >>>    ProjectList->Add(Chart->Foot->Text->Strings[ii]);
0 >>>ProjectList->Add(" ");
0 >>>for(int ii = 0; ii < Chart->SubFoot->Text->Count; ++ii)
0 >>>    ProjectList->Add(Chart->SubFoot->Text->Strings[ii]);
0 >>>ProjectList->Add(" ");
0 >>>if(Chart->MaxPointsPerPage != 0)
0 >>>    String S = String(Chart->MaxPointsPerPage) + " " + String(Chart->Page);
0 >>>ProjectList->Add(S);
0 >>>}//raf835:end void __fastcall TMain::SaveProject(TObject *Sender)
0 >>>ProjectList->Add("######");
0 >>>ProjectList->SaveToFile(SaveDialogPrj->FileName);
0 >>>ProjectList->Clear();
0 >>>dirty = false;
0 >>>}//raf835:end void __fastcall TMain::SaveProject(TObject *Sender)
0 >>>void __fastcall TMain::PrjOpenClick(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 27 @ void __fastcall TMain::PrjOpenClick(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 29 @ void __fastcall TMain::PrjOpenClick(TObject *Sender)";
1 >>>    OpenDialogPrj->Filter = "Project Files (*.prj)|*.prj";
1 >>>    OpenDialogPrj->Title = "Open Project";
1 >>>    if(OpenDialogPrj->Execute()) DoPrjOpen(Sender);
1 >>>}
0 >>>void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 28 @ void __fastcall TMain::DoPrjOpen(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 30 @ void __fastcall TMain::DoPrjOpen(TObject *Sender)";
1 >>>    MapPar::iterator itPar;
1 >>>    ClassPar *thisPar;
1 >>>    ClassVar *thisVar;
1 >>>    ifstream DataFile;
1 >>>    long Variation;
1 >>>    char module[80], param[80], name[80];
1 >>>    string S, s, Line;
1 >>>    String SS;
1 >>>    Global::WQ_prj = false;
1 >>>    Global::NaNcheck = false;
1 >>>    Global::LOGVARLOAD = false;
1 >>>    String Default = GetCurrentDir();
1 >>>    SaveDialogPrj->InitialDir = Default;
1 >>>    ProjectDir  = Default + "\\";
1 >>>    int iFileHandle = FileOpen(OpenDialogPrj->FileName, fmOpenRead);
1 >>>    if(iFileHandle > -1)  
1 >>>    {
2 >>>        int T = FileGetDate(iFileHandle);
2 >>>        ProjectFileDate = FileDateToDateTime(T);
2 >>>        FileClose(iFileHandle);
2 >>>    }
1 >>>    DataFile.open(OpenDialogPrj->FileName.c_str());
1 >>>    if(!DataFile)
1 >>>        Application->MessageBox("cannot open file", "File Error", MB_OK);
1 >>>    return;
1 >>>}
0 >>>bool Prj = (OpenDialogPrj->FileName.LowerCase()).Pos(".prj");
0 >>>if(Prj)
0 >>>    if(ProjectOpen)
0 >>>        if(Application->MessageBox("Current Project will be overwritten! Proceed?",
0 >>>                                   "Warning", MB_OKCANCEL) == IDCANCEL) return;
0 >>>String OpenSave(OpenDialogPrj->FileName);
0 >>>PrjCloseClick(Sender);
0 >>>if(cancel) 
0 >>>    return; 
0 >>>OpenDialogPrj->FileName = OpenSave;
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>else
0 >>>    ObsCloseClick(Sender); 
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>OpenDialogPrj->InitialDir = ExtractFilePath(AnsiReplaceStr(OpenDialogPrj->FileName, "/", "\\")); 
0 >>>if(OpenDialogPrj->InitialDir.IsEmpty())
0 >>>    OpenDialogPrj->InitialDir = GetCurrentDir();
0 >>>SaveDialogPrj->InitialDir = OpenDialogPrj->InitialDir;
0 >>>SetCurrentDir(OpenDialogPrj->InitialDir);
0 >>>ProjectOpen = true;
0 >>>Last1->Checked = false;
0 >>>All1->Checked = false;
0 >>>DebugScreen1->Checked = false;
0 >>>Main->Text = Main->Text.SubString(1, 49) + " - " + OpenDialogPrj->FileName;
0 >>>Chart->Title->Text->Clear();
0 >>>Chart->Title->Text->Add(Main->Text.SubString(1, 49));
0 >>>Chart->SubTitle->Text->Clear();
0 >>>Chart->SubTitle->Text->Add(OpenDialogPrj->FileName);
0 >>>Chart->Foot->Text->Clear();
0 >>>Chart->SubFoot->Text->Clear();
0 >>>SaveDialogPrj->FileName = OpenDialogPrj->FileName;
0 >>>SaveDialogPrj->InitialDir = ExtractFilePath(AnsiReplaceStr(OpenDialogPrj->FileName, "/", "\\")); 
0 >>>if(SaveDialogPrj->InitialDir.IsEmpty())
0 >>>    SaveDialogPrj->InitialDir = GetCurrentDir();
0 >>>getline(DataFile, DescripPrj);
0 >>>DataFile.ignore(180, '#');
0 >>>getline(DataFile, Line);
0 >>>String as = ExtractFileName(OpenDialogPrj->FileName);
0 >>>as = ChangeFileExt(as,".CHM");
0 >>>if(FileExistsSp(as))
0 >>>    PrjObsHelp->Strings[0] = as.SubString(1, as.Length()-4) + ".chm";
0 >>>UpDateHelpMenu();
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>Global::MacroModulesList->Clear();
0 >>>TBase = 0; 
0 >>>LabelBase->Caption = TBases[TBase];
0 >>>CRHM::TFun Funct = CRHM::FOBS; 
0 >>>LabelFunct->Caption = FStrings[Funct];
0 >>>try
0 >>>    do
0 >>>        DataFile >> S;
0 >>>if(DataFile.eof()) break;
0 >>>DataFile.ignore(180, '#');
0 >>>getline(DataFile, Line);
0 >>>if(S == "AKAs:")
0 >>>    string module, type, name, alias, source;
0 >>>while(!DataFile.eof())
0 >>>    DataFile >> type ;
0 >>>if(type[1] == '#') break;
0 >>>DataFile >> module >> name >> alias;
0 >>>string::size_type pp = module.find('#');  
0 >>>if(pp != string::npos)
0 >>>    module.erase(pp);
0 >>>TAKA Type = AKAtype(type);
0 >>>if(Type == VARG || Type == OBSR || Type == OBSF)
0 >>>    DataFile >> source;
0 >>>pp = source.find('#');
0 >>>if(pp != string::npos)
0 >>>    source.erase(pp);
0 >>>alias += ' ' + source;
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>if(Type != AKAERROR)
0 >>>    Pairstr2 Item = Pairstr2(type + " " + module + " " + name, alias);
0 >>>Global::MapAKA.insert(Item);
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>if(DataFile.eof()) return; 
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>else if(S == "DLLs:")
0 >>>    getline(DataFile, S);
0 >>>#ifdef CRHM_DLL
0 >>>while(S[1] != '#')
0 >>>    SS = S.c_str();
0 >>>if(!FindFileName(SS))
0 >>>    Application->MessageBox(String("file: " + SS).c_str(), "DLL not found!", MB_OK);
0 >>>return;
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>getline(DataFile, S);
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>#else
0 >>>CRHMException Except("Using DLLs in Non-DLL CRHM model", ERR);
0 >>>Application->MessageBox(Except.Message.c_str(),
0 >>>                        "Use DLL CHRM model", MB_OK);
0 >>>LogError(Except);
0 >>>while(S[1] != '#')
0 >>>    DataFile >> S;
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>#endif
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>else if(S == "Macros:")
0 >>>    getline(DataFile, S);
0 >>>while (S[1] != '#')
0 >>>    Global::MacroModulesList->Add((S.substr(1, S.length()-2)).c_str());
0 >>>getline(DataFile, S);
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>MacroLoad(Sender);
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>else if(S == "Observations:")
0 >>>    getline(DataFile, S);
0 >>>while(S[1] != '#')
0 >>>    SS = S.c_str();
0 >>>if(FindFileName(SS))
0 >>>    OpenDialogObs->FileName = SS.c_str();
0 >>>OpenDialogObs->InitialDir = ExtractFilePath(AnsiReplaceStr(OpenDialogObs->FileName, "/", "\\")); 
0 >>>if(!OpenObsFile(Sender, SS)) ;   
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>else
0 >>>    Application->MessageBox(SS.c_str(), "Cannot find observation file", MB_OK);
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>getline(DataFile, S);
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>else if(S == "Dates:")
0 >>>    int D[3];
0 >>>TDateTime DT;
0 >>>if(Global::DTstart == 0.0)  
0 >>>{
1 >>>    ResetPickers();
1 >>>    DateTimePicker1->Enabled = true;
1 >>>    DateTimePicker2->Enabled = true;
1 >>>}
0 >>>for (int ii = 0; ii < 3; ii++)
0 >>>    DataFile >> D[ii];
0 >>>DT = EncodeDate((Word)D[0], (Word)D[1], (Word)D[2]);
0 >>>if(ObsFilesList->Count)  
0 >>>{
1 >>>    DateTimePicker1->MinDate = Global::DTstart;
1 >>>    DateTimePicker1->MaxDate = Global::DTend;
1 >>>}
0 >>>if(DT >= DateTimePicker1->MinDate && DT <= DateTimePicker1->MaxDate || !ObsFilesList->Count) 
0 >>>    DateTimePicker1->Date = floor(DT);
0 >>>else
0 >>>    DateTimePicker1->Date = DateTimePicker1->MinDate;
0 >>>int c;
0 >>>while((c = DataFile.peek(), c==32))
0 >>>    DataFile.get();
0 >>>c = DataFile.peek();
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>if(isdigit(c) && ObsFilesList->Count == 0)
0 >>>    DataFile >> Global::Freq;
0 >>>Global::Interval = 1.0/Global::Freq;
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>else
0 >>>    DataFile.ignore(256, '\n');
0 >>>for (int ii = 0; ii < 3; ii++)
0 >>>    DataFile >> D[ii];
0 >>>DT = EncodeDate((Word)D[0], (Word)D[1], (Word)D[2]);
0 >>>if(ObsFilesList->Count)  
0 >>>{
1 >>>    DateTimePicker2->MinDate = Global::DTstart;
1 >>>    DateTimePicker2->MaxDate = Global::DTend;
1 >>>}
0 >>>if(DT >= DateTimePicker2->MinDate && DT <= DateTimePicker2->MaxDate || !ObsFilesList->Count) 
0 >>>    DateTimePicker2->Date = floor(DT);
0 >>>else
0 >>>    DateTimePicker2->Date = DateTimePicker2->MaxDate;
0 >>>DataFile >> S;
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>else if(S == "Modules:")
0 >>>    Global::OurModulesList->Clear();
0 >>>#ifdef CRHM_DLL
0 >>>TDllModule DllModule;
0 >>>#endif
0 >>>for(;;)
0 >>>    getline(DataFile, S);
0 >>>if(S[1] == '#') break;
0 >>>bool InGrp = false;
0 >>>string::size_type idx = S.find('+');
0 >>>if(idx != string::npos)
0 >>>    S = S.substr(idx+1);
0 >>>InGrp = true;
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>idx = S.find(' ');
0 >>>s = S.substr(0, idx);
0 >>>idx = S.find('#');
0 >>>if(idx != string::npos)
0 >>>    Variation = pow(2, S[idx+1] - char('1'));
0 >>>s = S.substr(0, idx);
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>else
0 >>>    Variation = 0;
0 >>>if(!InGrp)
0 >>>    Global::OurModulesList->AddObject(s.c_str(), (TObject*) Variation);
0 >>>S = S.substr(idx+1);
0 >>>idx = S.rfind(' ');
0 >>>S = S.substr(0, idx);
0 >>>transform(S.begin(), S.end(), S.begin(), ::toupper);
0 >>>idx = S.rfind(".DLL");
0 >>>#ifdef CRHM_DLL
0 >>>if(idx != string::npos)  
0 >>>{
1 >>>    bool exists = false;
1 >>>    TDllModule::iterator it;
1 >>>    pair<TDllModule::iterator, TDllModule::iterator> range = DllModule.equal_range(S.c_str());
1 >>>    for(it = range.first; it != range.second; ++it)
1 >>>        if(it->second == s.c_str())
1 >>>            exists = true;
1 >>>    break;
1 >>>}
0 >>>if(!exists)
0 >>>    String SS = S.c_str();
0 >>>FindFileName(SS);
0 >>>PairDllModule Item = PairDllModule(SS.c_str(), s.c_str());
0 >>>DllModule.insert(Item);
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>#endif
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>#ifdef CRHM_DLL
0 >>>TDllModule::iterator itPar, itPar2;
0 >>>pair<TDllModule::iterator, TDllModule::iterator> range;
0 >>>itPar = DllModule.begin();
0 >>>while (itPar !=  DllModule.end())
0 >>>    string S = (*itPar).first;
0 >>>Global::PendingDLLModuleList->Clear(); 
0 >>>range = DllModule.equal_range(S);
0 >>>for(itPar2 = range.first; itPar2 != range.second; ++itPar2)
0 >>>    String S2 = (*itPar2).second;
0 >>>Global::PendingDLLModuleList->Add(S2); 
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>if(!OpenDLLFile(S.c_str())) ;
0 >>>itPar = DllModule.upper_bound(S);
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>DllModule.clear(); 
0 >>>#endif
0 >>>for(int ii = Global::OurModulesList->Count-1; ii >= 0; --ii)
0 >>>    String Name = Global::OurModulesList->Strings[ii];
0 >>>int jj = CheckforModule(Name, ii);
0 >>>if(jj < 0)
0 >>>    CRHMException Except("Unknown Module: \"" + string(Name.c_str()) + "\"", ERR);
0 >>>Application->MessageBox(Except.Message.c_str(),
0 >>>                        "Unknown Module: incorrect CRHM version or DLL not loaded", MB_OK);
0 >>>LogError(Except);
0 >>>Global::OurModulesList->Delete(ii);
0 >>>DataFile.seekg(0, ios_base::end);  
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>else
0 >>>    Variation = ((long) Global::OurModulesList->Objects[ii]);
0 >>>((ClassModule*) Global::AllModulesList->Objects[jj])->variation = Variation;
0 >>>Global::OurModulesList->Objects[ii] = Global::AllModulesList->Objects[jj];
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>InitModules(Sender);
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>else if(S == "Dimensions:")
0 >>>    DataFile >> S;
0 >>>long dim;
0 >>>while(S[1] != '#')
0 >>>    DataFile >> dim;
0 >>>setdim(S, dim);
0 >>>DataFile >> S;
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>else if(S == "Parameters:")
0 >>>    int c;
0 >>>long Cols, Rows;
0 >>>bool TooFewHRUs = false;
0 >>>string ss;
0 >>>while(!DataFile.eof())
0 >>>    DataFile >> module;
0 >>>if(module[1] == '#') break;
0 >>>DataFile  >> param;
0 >>>if(DataFile.eof()) return; 
0 >>>DataFile.ignore(80, '\n'); 
0 >>>S = "";
0 >>>do   
0 >>>{
1 >>>    getline(DataFile, ss);
1 >>>    S += ss + ' ';
1 >>>    while(c = DataFile.peek(), iscntrl(c) || isspace(c))
1 >>>        DataFile.get();
1 >>>}
0 >>>while(c = DataFile.peek(), !isalpha(c) && c != '#');
0 >>>string Sc = S; 
0 >>>string::iterator pos; 
0 >>>bool inField = false;
0 >>>for(pos = Sc.begin(); pos != Sc.end(); ++pos)  
0 >>>{
1 >>>    if(*pos == '\'')
1 >>>        inField = !inField;
1 >>>    if(inField && *pos == ' ')
1 >>>        *pos = '_';
1 >>>}
0 >>>istringstream instr; 
0 >>>instr.clear();
0 >>>instr.str(Sc);
0 >>>Cols = 0;
0 >>>for (;;)
0 >>>    instr >> s;
0 >>>if(instr.fail()) break;
0 >>>++Cols; 
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>if(string(module, strlen(module)) == "Shared")
0 >>>    MapPar::iterator itPar;
0 >>>for(itPar = Global::MapPars.begin(); itPar != Global::MapPars.end(); ++itPar)
0 >>>    thisPar = (*itPar).second;
0 >>>if(thisPar->param == string(param, strlen(param)))
0 >>>    if(thisPar->dim == Cols/thisPar->lay) 
0 >>>        break;
0 >>>    else if(thisPar->varType == CRHM::Txt && thisPar->dimen < CRHM::NHRU) 
0 >>>        break;
0 >>>    else if(thisPar->param == "obs_elev" || thisPar->param == "soil_withdrawal")
0 >>>        break;
0 >>>    else   
0 >>>    {
1 >>>        if(thisPar->param == string(param, strlen(param)) && (thisPar->dim == Cols/thisPar->dim))
1 >>>            break;
1 >>>        else
1 >>>            thisPar = NULL;
1 >>>    }
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>else
0 >>>    thisPar = NULL; 
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>else
0 >>>    thisPar = ClassParFind(module, param); 
0 >>>if(thisPar)
0 >>>    strcpy(module, thisPar->module.c_str()); 
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>if(thisPar)
0 >>>    ClassPar *newPar = new ClassPar(*thisPar);
0 >>>newPar->module = module; 
0 >>>if(thisPar->varType == CRHM::Txt)
0 >>>    newPar->Strings->DelimitedText = S.c_str();
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>else
0 >>>    Rows = 0;
0 >>>istringstream instr; 
0 >>>instr.clear();
0 >>>instr.str(S);
0 >>>for(int jj = 0; jj <thisPar->lay; ++jj)
0 >>>    Cols = 0;
0 >>>for(int ii = 0; ii < newPar->dim; ++ii)
0 >>>    if(newPar->varType == CRHM::Float)
0 >>>        float x;
0 >>>instr >> x;
0 >>>if(instr.fail())
0 >>>    break;
0 >>>newPar->layvalues[jj][ii] = x;
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>else if(newPar->varType == CRHM::Int)
0 >>>    float x;
0 >>>instr >> x;
0 >>>if(instr.fail())
0 >>>    break;
0 >>>newPar->ilayvalues[jj][ii] = x;
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>++Cols;
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>if(instr.fail())   
0 >>>{
1 >>>    if(!TooFewHRUs && newPar->module != "Shared")
1 >>>        Application->MessageBox(string("parameter \"" + thisPar->param + "\" in module \"" + newPar->module + "\" only some parameter values or layers are available.").c_str(),
1 >>>                                "Too few parameter values or layers. Duplicating last HRU values.", MB_OK);
1 >>>    if(newPar->lay > Global::nlay)
1 >>>        Global::nlay = newPar->lay;
1 >>>    TooFewHRUs = true;
1 >>>}
0 >>>if(!(Cols == 0 && newPar->lay > Rows))  
0 >>>{
1 >>>    for(int ii = Cols; ii < newPar->dim; ++ii)  
1 >>>    {
2 >>>        if(newPar->varType == CRHM::Float)
2 >>>            newPar->layvalues[Rows][ii] = newPar->layvalues[Rows][ii-1];
2 >>>        else
2 >>>            newPar->ilayvalues[Rows][ii] = newPar->ilayvalues[Rows][ii-1];
2 >>>    }
1 >>>} 
0 >>>else
0 >>>    for(int jjj = Rows; jjj <thisPar->lay; ++jjj)
0 >>>        for(int ii = 0; ii < newPar->dim; ++ii)
0 >>>            if(newPar->varType == CRHM::Float)
0 >>>                newPar->layvalues[jjj][ii] = newPar->layvalues[jjj-1][ii];
0 >>>            else
0 >>>                newPar->ilayvalues[jjj][ii] = newPar->ilayvalues[jjj-1][ii];
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>++Rows;
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>if(String(module) == "Shared")  
0 >>>{
1 >>>    SetSharedParams(newPar); 
1 >>>    delete newPar;
1 >>>}
0 >>>else
0 >>>    ClassParSet(newPar);  
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>else if(String(param) != "Use_Observations_As_Supplied")
0 >>>    CRHMException Except("Unknown Module Parameter: " + string(module) + " -> "+ string(param) +
0 >>>                         " in " + string(OpenDialogPrj->FileName.c_str()), ERR);
0 >>>Application->MessageBox(Except.Message.c_str(),
0 >>>                        "Unknown Parameter in project file", MB_OK);
0 >>>LogError(Except);
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>while(c = DataFile.peek(), !isalpha(c) && c != '#')
0 >>>    DataFile.ignore(256, '\n');
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>long cnt = Global::MapPars.size();
0 >>>DataFile.clear();
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>SqueezeParams(Sender);  
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>else if(S == "Summary_period")
0 >>>    while(!DataFile.eof())
0 >>>        getline(DataFile, S);
0 >>>if(S[1] == '#') break;
0 >>>String MM;
0 >>>SS = S.c_str();
0 >>>long jj = SS.LastDelimiter(" ");
0 >>>if(jj)
0 >>>    water_year_month = (SS.SubString(jj+1, SS.Length()-1)).ToInt();
0 >>>SS = SS.SubString(1, jj-1);
0 >>>MM = " - " + Tmonths[water_year_month-1];
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>for(long Base = 0; Base < 5; ++Base)
0 >>>    if(SS == TBases[Base])
0 >>>        LabelBase->Caption = TBases[Base] + MM;
0 >>>TBase = Base;
0 >>>break;
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>else if(S == "Log_Time_Format")
0 >>>    while(!DataFile.eof())
0 >>>        getline(DataFile, S);
0 >>>if(S[1] == '#') break;
0 >>>SS = S.c_str();
0 >>>for(long Base = 0; Base < 3; ++Base)
0 >>>    if(SS == TLogFormats[Base])
0 >>>        Global::TimeFormat = (CRHM::TIMEFORMAT) Base;
0 >>>break;
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>else if(S == "LOGVARLOAD")
0 >>>    Global::LOGVARLOAD = true;
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>else if(S == "Display_Variable:")
0 >>>    istringstream instr;
0 >>>string::size_type pp;
0 >>>if(Global::LOGVARLOAD)
0 >>>    ifstream DataFile;
0 >>>string List("SWE, soil_moist, snowmeltD");
0 >>>DataFile.open(String(OpenDialogPrj->InitialDir + "\\LogVarLoad.lvl").c_str());
0 >>>if(DataFile)
0 >>>    CRHMException TExcept("Loading ouput variables from file: 'LogVarLoad.lvl'.", WARNING);
0 >>>LogError(TExcept);
0 >>>getline(DataFile, List);
0 >>>DataFile.close();
0 >>>pp = List.rfind(',');  
0 >>>if(pp != string::npos)
0 >>>    while(pp != string::npos)
0 >>>        List[pp] = ' ';
0 >>>pp = List.rfind(',');
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>instr.str(List);
0 >>>for( ; ; )
0 >>>    instr >> S;
0 >>>if(instr.fail()) break;
0 >>>for(long gg = 0; gg <= Global::GroupCntTrk; gg++)
0 >>>    string AA, S2;
0 >>>S2 = S;
0 >>>if(Global::GroupCntTrk > 0)
0 >>>    if(gg > 0)
0 >>>        GroupEnding(AA, gg);
0 >>>S2 += AA;
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>else
0 >>>    continue;
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>long GetUnit = FindWildVarFloat(S2, thisVar); 
0 >>>if(thisVar)
0 >>>    for(long hh = 1; hh <= thisVar->dim; hh++)
0 >>>        SS = String(S2.c_str()) + "(" + String(hh) + ")";
0 >>>if(IndexOf(ListBox3, SS) == -1)
0 >>>    ListBox3->Items->AddObject(SS, (TObject*) thisVar);
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>else
0 >>>    while(!DataFile.eof())
0 >>>        long Index, lay;
0 >>>bool comma;
0 >>>getline(DataFile, S);
0 >>>if(S[1] == '#') break;
0 >>>pp = S.rfind(',');
0 >>>if(pp != string::npos)
0 >>>    comma = true;
0 >>>while(pp != string::npos)
0 >>>    S[pp] = ' ';
0 >>>pp = S.rfind(',');
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>else
0 >>>    comma = false;
0 >>>instr.clear();
0 >>>instr.str(S);
0 >>>instr  >> module;
0 >>>instr  >> name;
0 >>>S = string(module) + ' ' +  string(name);
0 >>>thisVar = ClassVarFind(S);
0 >>>if(thisVar)
0 >>>    for( ; ; )
0 >>>        if(comma)
0 >>>            instr >> Index;
0 >>>if(Index < 0)   
0 >>>{
1 >>>    Index = labs(Index);
1 >>>    thisVar->TchrtOpt = 1;
1 >>>}
0 >>>if(instr.fail()) break;
0 >>>instr >> lay;
0 >>>SS = String(thisVar->name.c_str()) + "(" + String(Index) + ',' + String(lay) + ")";
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>else
0 >>>    lay = 0;
0 >>>instr >> Index;
0 >>>if(instr.fail()) break;
0 >>>if(Index < 0)   
0 >>>{
1 >>>    Index = labs(Index);
1 >>>    thisVar->TchrtOpt = 1;
1 >>>}
0 >>>SS = String(thisVar->name.c_str()) + "(" + String(Index) + ")";
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>if(IndexOf(ListBox3, SS) == -1 && Index <= thisVar->dim)
0 >>>    ListBox3->Items->AddObject(SS, (TObject*) thisVar);
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>else
0 >>>    CRHMException Except("Unknown Variable \"" + S +
0 >>>                         "\" in " + string(OpenDialogPrj->FileName.c_str()), ERR);
0 >>>Application->MessageBox(Except.Message.c_str(),
0 >>>                        "Unknown Variable in project file", MB_OK);
0 >>>LogError(Except);
0 >>>DataFile.ignore(256, '\n');
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>instr.clear();
0 >>>DataFile.clear();
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>else if(S == "Display_Observation:")
0 >>>    istringstream instr;
0 >>>string::size_type pp, pp1;
0 >>>string Kind;
0 >>>String SS_Index;
0 >>>long Index, lay;
0 >>>bool comma, isVar;
0 >>>while(!DataFile.eof())
0 >>>    getline(DataFile, S);
0 >>>if(S[1] == '#') break;
0 >>>pp = S.rfind('_');
0 >>>if(pp != string::npos)
0 >>>    Kind = S.substr(pp);
0 >>>S.erase(pp-1);
0 >>>if(Kind == "_obs")
0 >>>    Kind = "";
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>pp = S.rfind(',');
0 >>>if(pp != string::npos)
0 >>>    comma = true;
0 >>>while(pp != string::npos)
0 >>>    S[pp] = ' ';
0 >>>pp = S.rfind(',');
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>else
0 >>>    comma = false;
0 >>>instr.clear();
0 >>>instr.str(S);
0 >>>instr  >> module;
0 >>>instr  >> name;
0 >>>string S1 = string(module) + ' ' +  string(name);
0 >>>thisVar = ClassVarFind(S1);
0 >>>if(thisVar)
0 >>>    isVar = true;
0 >>>else
0 >>>    isVar = false;
0 >>>for( ; ; )
0 >>>    if(comma)
0 >>>        instr >> Index;
0 >>>if(instr.fail()) break;
0 >>>instr >> lay;
0 >>>SS = String(name) + '(' + String(labs(Index)) + ',' + String(lay) + ')';
0 >>>SS_Index = SS;
0 >>>S1 = string(module) + ' ' + SS.c_str();
0 >>>if(!isVar)
0 >>>    thisVar = ClassVarFind(S1);
0 >>>SS += "(" + String(Index) + ")" + Kind.c_str();
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>else
0 >>>    SS += Kind.c_str();
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>else
0 >>>    lay = 0;
0 >>>instr >> Index;
0 >>>if(instr.fail()) break;
0 >>>if(Index < 0)   
0 >>>{
1 >>>    Index = labs(Index);
1 >>>}
0 >>>SS = String(name) + '(' + String(labs(Index)) + ')';
0 >>>SS_Index = SS;
0 >>>S1 = string(module) + ' ' + SS.c_str();
0 >>>if(!isVar)
0 >>>    thisVar = ClassVarFind(S1);
0 >>>SS +=  String("(1)") + Kind.c_str(); 
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>else
0 >>>    SS += Kind.c_str();
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>if(thisVar && IndexOf(ListBox4, SS) == -1 && (!isVar || lay <= thisVar->lay && Index <= thisVar->dim))
0 >>>    if(thisVar->FileData)  
0 >>>    {
1 >>>        TLineSeries *cdSeries;
1 >>>        if(!thisVar || !thisVar->FileData->Times)
1 >>>            cdSeries = new TLineSeries(this);
1 >>>        else
1 >>>            cdSeries = (TLineSeries *) new TPointSeries(this);
1 >>>        cdSeries->Tag = (int) thisVar;
1 >>>        cdSeries->VertAxis =  (Index < 0);
1 >>>        cdSeries->XValues->DateTime = TRUE;
1 >>>        CurrentColor = colours[ListBox4->Count-1 % ncolours];
1 >>>        cdSeries->Color = CurrentColor;
1 >>>        cdSeries->Title = SS;
1 >>>        if(Index < 0)
1 >>>            cdSeries->VertAxis = aRightAxis;
1 >>>        ListBox4->Items->AddObject(SS, (TObject *) cdSeries);
1 >>>        if(thisVar && thisVar->FileData)  
1 >>>        {
2 >>>            AddObsPlot(Sender, (ClassVar *) thisVar, cdSeries, SS, FindObservationType(Kind.c_str()));
2 >>>            cdSeries->ParentChart = Chart;
2 >>>        }
1 >>>        else  
1 >>>            cdSeries->Tag = NULL;
1 >>>    }
0 >>>    else  
0 >>>    {
1 >>>        if(FindObservationType(Kind.c_str()) > CRHM::MJ_W)
1 >>>            long Indx = ListBox3->Items->IndexOf(SS_Index);
1 >>>        if(Indx == -1)
1 >>>            ListBox3->Items->AddObject(SS_Index, (TObject*) thisVar);
1 >>>    }
0 >>>TLineSeries *cdSeries;
0 >>>cdSeries = new TLineSeries(this);
0 >>>cdSeries->Tag = (int) thisVar;
0 >>>cdSeries->VertAxis =  (Index < 0);
0 >>>cdSeries->XValues->DateTime = TRUE;
0 >>>CurrentColor = colours[ListBox4->Count % ncolours];
0 >>>cdSeries->Color = CurrentColor;
0 >>>cdSeries->ParentChart = Chart;
0 >>>cdSeries->Title = SS;
0 >>>if(Index < 0)
0 >>>    cdSeries->VertAxis = aRightAxis;
0 >>>ListBox4->Items->AddObject(SS, (TObject *) cdSeries);
0 >>>cdSeries->Tag = NULL;
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>else
0 >>>    CRHMException Except("Unknown Variable " + S +
0 >>>                         " in " + string(OpenDialogPrj->FileName.c_str()), ERR);
0 >>>Application->MessageBox(Except.Message.c_str(),
0 >>>                        "Unknown Variable in project file", MB_OK);
0 >>>LogError(Except);
0 >>>DataFile.ignore(256, '\n');
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>instr.clear();
0 >>>DataFile.clear();
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>else if(S == "Initial_State")
0 >>>    while(!DataFile.eof())
0 >>>        getline(DataFile, S);
0 >>>if(S[1] == '#') break;
0 >>>SS = S.c_str();
0 >>>if(FindFileName(SS))
0 >>>    TMenuItem *ObsItem, *NewItem;
0 >>>ObsItem = MainMenu1->Items->Items[5];
0 >>>NewItem = new TMenuItem(ObsItem);
0 >>>NewItem->Caption = SS;
0 >>>NewItem->OnClick = StateFileClose;
0 >>>ObsItem->Insert(ObsItem->Count, NewItem);
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>else if(S == "Final_State")
0 >>>    getline(DataFile, S);
0 >>>if(S[1] != '#')
0 >>>    SS = S.c_str();
0 >>>SaveDialogState->FileName = SS;
0 >>>SaveStateFlag = true;
0 >>>DataFile >> S;
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>else
0 >>>    SaveDialogState->FileName = "";
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>else if(S == "Auto_Run")
0 >>>    PrjAutoRun->Checked = true;
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>else if(S == "Auto_Exit")
0 >>>    PrjAutoExit->Checked = true;
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>else if(S == "Log_Last")
0 >>>    Last1->Checked = true;
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>else if(S == "Log_All")
0 >>>    All1->Checked = true;
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>else if(S == "Log_Screen")
0 >>>    DebugScreen1->Checked = true;
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>else if(S == "Summary_Screen")
0 >>>    SummaryScreen1->Checked = true;
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>else if(S == "SaveChartTemplate")
0 >>>    String FileName = ChangeFileExt(SaveDialogPrj->FileName, ".Tee");
0 >>>if(FileExistsSp(FileName))
0 >>>    LoadChartFromFile(dynamic_cast<TCustomChart*>(Chart),FileName);
0 >>>SaveChartTemplate->Checked = true;
0 >>>Chart->RemoveAllSeries();
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>else
0 >>>    Application->MessageBox(String("file: '" + FileName).c_str(), "TeeChart Template file not found", MB_OK);
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>else if(S == "TChart:" && !SaveChartTemplate->Checked)
0 >>>    Chart->Title->Text->Clear();
0 >>>Chart->SubTitle->Text->Clear();
0 >>>Chart->Foot->Text->Clear();
0 >>>Chart->SubFoot->Text->Clear();
0 >>>int nn = 0;
0 >>>while(!DataFile.eof())
0 >>>    getline(DataFile, S);
0 >>>if(DataFile.eof()) break;
0 >>>if(S[1] == '#') break;
0 >>>SS = S.c_str();
0 >>>SS = SS.TrimRight();
0 >>>if(SS.IsEmpty())
0 >>>    ++nn;
0 >>>else
0 >>>    switch (nn)
0 >>>    case 0:
0 >>>Chart->Title->Text->Add(SS);
0 >>>break;
0 >>>case 1:
0 >>>Chart->SubTitle->Text->Add(SS);
0 >>>break;
0 >>>case 2:
0 >>>Chart->Axes->Items[2]->Title->Caption = SS;
0 >>>break;
0 >>>case 3:
0 >>>Chart->Foot->Text->Add(SS);
0 >>>break;
0 >>>case 4:
0 >>>Chart->SubFoot->Text->Add(SS);
0 >>>break;
0 >>>case 5:
0 >>>int pos = SS.Pos(" ");
0 >>>Chart->MaxPointsPerPage = SS.SubString(1, pos-1).ToInt();
0 >>>Chart->Page = SS.SubString(pos+1, 10).ToInt();
0 >>>break;
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>} while(!DataFile.eof());
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>catch (CRHMException Except)
0 >>>    Application->MessageBox(Except.Message.c_str(), "Loading project Error", MB_OK);
0 >>>LogForm->ShowModal();
0 >>>DataFile.close();
0 >>>return;
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>DataFile.close();
0 >>>if(PrjAutoRun->Checked && !CommandLine && ObsFilesList->Count != 0)
0 >>>    Main->Refresh();
0 >>>RunClick(Sender);
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::DoPrjOpen(TObject *Sender)
0 >>>void __fastcall TMain::PrjCloseClick(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 29 @ void __fastcall TMain::PrjCloseClick(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 31 @ void __fastcall TMain::PrjCloseClick(TObject *Sender)";
1 >>>    cancel = false;
1 >>>    if(dirty)
1 >>>        int Reply = Application->MessageBox(String("Save changes to " + SaveDialogPrj->FileName + " ?").c_str(), "", MB_YESNOCANCEL);
1 >>>    if(Reply == IDCANCEL)
1 >>>        cancel = true;
1 >>>    return;
1 >>>}
0 >>>else if(Reply == IDYES)
0 >>>    PrjSaveClick(Sender);
0 >>>dirty = false;
0 >>>}//raf835:end void __fastcall TMain::PrjCloseClick(TObject *Sender)
0 >>>ProjectOpen = false;
0 >>>Chart->MaxPointsPerPage = 0; 
0 >>>while (PrjObsHelp->Count > 1)
0 >>>    PrjObsHelp->Delete(PrjObsHelp->Count-1);
0 >>>PrjObsHelp->Strings[0] = "";
0 >>>UpDateHelpMenu();
0 >>>Main->Text = Main->Text.SubString(1, 49);
0 >>>ObsCloseClick(Sender);       
0 >>>FreeChart1(Sender);          
0 >>>StateFileCloseAll(Sender); 
0 >>>ClearModules(Sender, true);   
0 >>>if(cdSeries)
0 >>>    delete [] cdSeries;        
0 >>>cdSeries = NULL;
0 >>>}//raf835:end void __fastcall TMain::PrjCloseClick(TObject *Sender)
0 >>>if(InitMacroCnt && InitModCnt)
0 >>>    --InitModCnt;
0 >>>InitMacroCnt = 0;
0 >>>}//raf835:end void __fastcall TMain::PrjCloseClick(TObject *Sender)
0 >>>AdminMacro.MacroClear();
0 >>>UpDateModelMenu();
0 >>>DLL1CloseALLClick(Sender);    
0 >>>Chart->Refresh();
0 >>>Global::OurModulesList->Clear();
0 >>>Global::MacroModulesList->Clear();
0 >>>Global::DeclRootList->Clear();
0 >>>Global::MapVars.clear();
0 >>>Global::MapVarsGet.clear();
0 >>>Global::MapVarsPut.clear();
0 >>>Global::MapObsGet.clear();
0 >>>Global::MapPars.clear();
0 >>>Global::SharedMapPars.clear();
0 >>>Global::MapAKA.clear();
0 >>>DescripPrj = "Description";
0 >>>Global::RapidAdvanceTo = 0;
0 >>>Global::LoopTo = 0;
0 >>>Global::LoopCnt = 0;
0 >>>}//raf835:end void __fastcall TMain::PrjCloseClick(TObject *Sender)
0 >>>void __fastcall TMain::ClearListBox4(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 30 @ void __fastcall TMain::ClearListBox4(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 32 @ void __fastcall TMain::ClearListBox4(TObject *Sender)";
1 >>>    for (int ii = 0; ii < ListBox4->Items->Count; ii++)
1 >>>        TLineSeries * cdSeries = (TLineSeries *) ListBox4->Items->Objects[ii];
1 >>>    ClassVar* thisVar =  (ClassVar *) cdSeries->Tag;
1 >>>    if(thisVar && thisVar->FunKind > CRHM::FOBS)
1 >>>        if(thisVar->visibility == CRHM::PRIVATE)
1 >>>            delete thisVar->FileData;
1 >>>    delete thisVar;
1 >>>}
0 >>>cdSeries->ParentChart = NULL;
0 >>>cdSeries->Clear();
0 >>>}//raf835:end void __fastcall TMain::ClearListBox4(TObject *Sender)
0 >>>ListBox4->Clear();
0 >>>}//raf835:end void __fastcall TMain::ClearListBox4(TObject *Sender)
0 >>>void __fastcall TMain::ClearModulesClick(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 31 @ void __fastcall TMain::ClearModulesClick(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 33 @ void __fastcall TMain::ClearModulesClick(TObject *Sender)";
1 >>>    ClearModules(Sender, true);
1 >>>}
0 >>>void __fastcall TMain::ClearModules(TObject *Sender, bool All)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 32 @ void __fastcall TMain::ClearModules(TObject *Sender, bool All)\n");  fclose(stdout);
1 >>>    cout << "signature# 34 @ void __fastcall TMain::ClearModules(TObject *Sender, bool All)";
1 >>>    ModVarRemove(Global::MapVars);
1 >>>    Global::SharedMapPars.clear();
1 >>>    if(All)
1 >>>        for(int ii = 0; ii < Global::OurModulesList->Count; ii++)
1 >>>            ((ClassModule*) (Global::OurModulesList->Objects[ii]))->reset();
1 >>>    Global::OurModulesList->Clear();
1 >>>    if(All)
1 >>>        AdminMacro.MacroClear();
1 >>>    Global::MacroModulesList->Clear();
1 >>>    OpenDialogPrj->FileName = "";
1 >>>    SaveDialogPrj->FileName = "";
1 >>>}
0 >>>ListBox1->Clear();
0 >>>ListBox3->Clear();
0 >>>if(cdSeries)
0 >>>    for (int ii = 0; ii < SeriesCnt; ii ++)
0 >>>        cdSeries[ii]->ParentChart = NULL;
0 >>>delete [] cdSeries;           
0 >>>cdSeries = NULL;
0 >>>SeriesCnt = 0; 
0 >>>}//raf835:end void __fastcall TMain::ClearModules(TObject *Sender, bool All)
0 >>>Chart->Refresh();
0 >>>Global::BuildFlag = CRHM::BUILD;
0 >>>Global::MapAKA.clear(); 
0 >>>}//raf835:end void __fastcall TMain::ClearModules(TObject *Sender, bool All)
0 >>>void __fastcall TMain::StatSaveStateAsClick(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 33 @ void __fastcall TMain::StatSaveStateAsClick(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 35 @ void __fastcall TMain::StatSaveStateAsClick(TObject *Sender)";
1 >>>    SaveDialogState->Filter = "Initial State Files (*.int)|*.int";
1 >>>    SaveDialogState->DefaultExt = "int";
1 >>>    SaveDialogState->Title = "Save Final State As";
1 >>>    if(SaveDialogState->Execute())
1 >>>        SaveDialogState->InitialDir = ExtractFilePath(AnsiReplaceStr(SaveDialogState->FileName, "/", "\\")); 
1 >>>    if(SaveDialogState->InitialDir.IsEmpty())
1 >>>        SaveDialogState->InitialDir = GetCurrentDir();
1 >>>    SaveStateFlag = true;
1 >>>}
0 >>>else  SaveStateFlag = false;
0 >>>}//raf835:end void __fastcall TMain::StatSaveStateAsClick(TObject *Sender)
0 >>>void __fastcall TMain::SaveState(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 34 @ void __fastcall TMain::SaveState(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 36 @ void __fastcall TMain::SaveState(TObject *Sender)";
1 >>>    TStringList *StateList;
1 >>>    MapVar::iterator itVar;
1 >>>    ClassVar * thisVar;
1 >>>    StateList = new TStringList;
1 >>>    String S;
1 >>>    StateList->Add("Description of State File - to be added");
1 >>>    StateList->Add("######");
1 >>>    StateList->Add("Time:");
1 >>>    S = (Global::DTnow).FormatString("yyyy m d");
1 >>>    StateList->Add(S);
1 >>>    StateList->Add("######");
1 >>>    StateList->Add("Dimension:");
1 >>>    StateList->Add(String(Global::nhru) + " " + String(Global::nlay ));
1 >>>    StateList->Add("######");
1 >>>    for (itVar = Global::MapVars.begin(); itVar !=  Global::MapVars.end(); itVar++)
1 >>>        thisVar = (*itVar).second;
1 >>>    if(thisVar->varType < CRHM::Read && thisVar->StatVar)
1 >>>        S = String(thisVar->module.c_str()) + " " +
1 >>>            String(thisVar->name.c_str());
1 >>>    StateList->Add(S);
1 >>>    S = "";
1 >>>    if(thisVar->lay == 0)
1 >>>        for(int ii = 0; ii < thisVar->dim; ii++)
1 >>>            if(thisVar->values != NULL)
1 >>>                S = S + FloatToStrF(thisVar->values[ii], ffGeneral, 4, 0) + " ";
1 >>>            else if(thisVar->ivalues != NULL)
1 >>>                S = S + FloatToStrF(thisVar->ivalues[ii], ffGeneral, 4, 0) + " ";
1 >>>            else
1 >>>                S = S + "-0 ";
1 >>>    if(ii%10 == 9)
1 >>>        StateList->Add(S);
1 >>>    S = "";
1 >>>}
0 >>>}//raf835:end void __fastcall TMain::SaveState(TObject *Sender)
0 >>>else
0 >>>    for(int ll = 0; ll < thisVar->lay; ll++)
0 >>>        for(int ii = 0; ii < thisVar->dim; ii++)
0 >>>            if(thisVar->layvalues != NULL)
0 >>>                S = S + FloatToStrF(thisVar->layvalues[ll][ii], ffGeneral, 4, 0) + " ";
0 >>>            else if(thisVar->ivalues != NULL)
0 >>>                S = S + FloatToStrF(thisVar->ilayvalues[ll][ii], ffGeneral, 4, 0) + " ";
0 >>>            else
0 >>>                S = S + "-0 ";
0 >>>if(ii%10 == 9)
0 >>>    StateList->Add(S);
0 >>>S = "";
0 >>>}//raf835:end void __fastcall TMain::SaveState(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::SaveState(TObject *Sender)
0 >>>if(!S.IsEmpty()) StateList->Add(S);
0 >>>S = "";
0 >>>}//raf835:end void __fastcall TMain::SaveState(TObject *Sender)
0 >>>if(!S.IsEmpty()) StateList->Add(S);
0 >>>StateList->Add("######");
0 >>>}//raf835:end void __fastcall TMain::SaveState(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::SaveState(TObject *Sender)
0 >>>StateList->SaveToFile(SaveDialogState->FileName);
0 >>>delete StateList;
0 >>>SaveDialogState->FileName = "";
0 >>>SaveStateFlag = false;
0 >>>}//raf835:end void __fastcall TMain::SaveState(TObject *Sender)
0 >>>void __fastcall TMain::ControlSaveState(TObject *Sender, bool MainLoop, ClassPar * VarPar, BitSet &Bit)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 35 @ void __fastcall TMain::ControlSaveState(TObject *Sender, bool MainLoop, ClassPar * VarPar, BitSet &Bit)\n");  fclose(stdout);
1 >>>    cout << "signature# 37 @ void __fastcall TMain::ControlSaveState(TObject *Sender, bool MainLoop, ClassPar * VarPar, BitSet &Bit)";
1 >>>    TStringList *StateList;
1 >>>    MapVar::iterator itVar;
1 >>>    ClassVar * thisVar;
1 >>>    StateList = new TStringList;
1 >>>    String S;
1 >>>    bool Needed;
1 >>>    Global::RunUpBitSet.reset();
1 >>>    bool Wild = false;
1 >>>    if(VarPar && !VarPar->Strings->Strings[0].IsEmpty()) 
1 >>>        Wild = VarPar->Strings->Strings[0].Pos("@") == 0;
1 >>>    if( MainLoop)
1 >>>        StateList->Add("Starting main run-up loop");
1 >>>    else
1 >>>        StateList->Add("starting module run-ahead to determine future variables");
1 >>>    StateList->Add("######");
1 >>>    StateList->Add("Time:");
1 >>>    S = (Global::DTnow).FormatString("yyyy m d");
1 >>>    StateList->Add(S);
1 >>>    StateList->Add("######");
1 >>>    StateList->Add("DTindx:");
1 >>>    StateList->Add(String(Global::DTindx));
1 >>>    StateList->Add("######");
1 >>>    StateList->Add("CurrentModuleRun:");
1 >>>    StateList->Add(String(Global::CurrentModuleRun));
1 >>>    StateList->Add("######");
1 >>>    StateList->Add("Dimension:");
1 >>>    StateList->Add(String(Global::nhru) + " " + String(Global::nlay));
1 >>>    StateList->Add("######");
1 >>>    for (itVar = Global::MapVars.begin(); itVar !=  Global::MapVars.end(); itVar++)
1 >>>        thisVar = (*itVar).second;
1 >>>    Needed = false;
1 >>>    if(thisVar->varType < CRHM::Read && (thisVar->visibility != CRHM::PRIVATE || thisVar->StatVar))  
1 >>>    {
2 >>>        if(!thisVar->InGroup || Global::ModuleBitSet[thisVar->InGroup-1])  
2 >>>            Needed = true;
2 >>>        else if(MainLoop)
2 >>>            String namebasic = thisVar->name.c_str();
2 >>>        if(VarPar->Strings->IndexOf(namebasic) > -1)
2 >>>            Needed = true;
2 >>>        else if(Wild)  
2 >>>        {
3 >>>            int Idx = namebasic.Pos("@");
3 >>>            if(Idx)
3 >>>                namebasic = namebasic.SubString(1, Idx-1);
3 >>>            if(VarPar->Strings->IndexOf(namebasic) > -1)
3 >>>                Needed = true;
3 >>>        }
2 >>>    } 
1 >>>    Global::RunUpBitSet[thisVar->InGroup-1] = true;
1 >>>} 
0 >>>}//raf835:end void __fastcall TMain::ControlSaveState(TObject *Sender, bool MainLoop, ClassPar * VarPar, BitSet &Bit)
0 >>>if(Needed)
0 >>>    S = String(thisVar->module.c_str()) + " " + String(thisVar->name.c_str());
0 >>>StateList->Add(S);
0 >>>S = "";
0 >>>if(thisVar->lay == 0)
0 >>>    for(int ii = 0; ii < thisVar->dim; ii++)
0 >>>        if(thisVar->values != NULL)
0 >>>            S = S + FloatToStrF(thisVar->values[ii], ffGeneral, 7, 0) + " ";
0 >>>        else if(thisVar->ivalues != NULL)
0 >>>            S = S + FloatToStrF(thisVar->ivalues[ii], ffGeneral, 7, 0) + " ";
0 >>>        else
0 >>>            S = S + "-0 ";
0 >>>if(ii%10 == 9)
0 >>>    StateList->Add(S);
0 >>>S = "";
0 >>>}//raf835:end void __fastcall TMain::ControlSaveState(TObject *Sender, bool MainLoop, ClassPar * VarPar, BitSet &Bit)
0 >>>}//raf835:end void __fastcall TMain::ControlSaveState(TObject *Sender, bool MainLoop, ClassPar * VarPar, BitSet &Bit)
0 >>>else
0 >>>    for(int ll = 0; ll < thisVar->lay; ll++)
0 >>>        for(int ii = 0; ii < thisVar->dim; ii++)
0 >>>            if(thisVar->layvalues != NULL)
0 >>>                S = S + FloatToStrF(thisVar->layvalues[ll][ii], ffGeneral, 4, 0) + " ";
0 >>>            else if(thisVar->ivalues != NULL)
0 >>>                S = S + FloatToStrF(thisVar->ilayvalues[ll][ii], ffGeneral, 4, 0) + " ";
0 >>>            else
0 >>>                S = S + "-0 ";
0 >>>if(ii%10 == 9)
0 >>>    StateList->Add(S);
0 >>>S = "";
0 >>>}//raf835:end void __fastcall TMain::ControlSaveState(TObject *Sender, bool MainLoop, ClassPar * VarPar, BitSet &Bit)
0 >>>}//raf835:end void __fastcall TMain::ControlSaveState(TObject *Sender, bool MainLoop, ClassPar * VarPar, BitSet &Bit)
0 >>>if(!S.IsEmpty()) StateList->Add(S);
0 >>>S = "";
0 >>>}//raf835:end void __fastcall TMain::ControlSaveState(TObject *Sender, bool MainLoop, ClassPar * VarPar, BitSet &Bit)
0 >>>if(!S.IsEmpty()) StateList->Add(S);
0 >>>StateList->Add("######");
0 >>>}//raf835:end void __fastcall TMain::ControlSaveState(TObject *Sender, bool MainLoop, ClassPar * VarPar, BitSet &Bit)
0 >>>}//raf835:end void __fastcall TMain::ControlSaveState(TObject *Sender, bool MainLoop, ClassPar * VarPar, BitSet &Bit)
0 >>>if(MainLoop)
0 >>>    StateList->SaveToFile(SaveDialogPrj->InitialDir + "\\" + "ControlStateFile.tmp1");
0 >>>else
0 >>>    StateList->SaveToFile(SaveDialogPrj->InitialDir + "\\" + "ControlStateFile.tmp2");
0 >>>delete StateList;
0 >>>}//raf835:end void __fastcall TMain::ControlSaveState(TObject *Sender, bool MainLoop, ClassPar * VarPar, BitSet &Bit)
0 >>>void __fastcall TMain::StatSaveClick(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 36 @ void __fastcall TMain::StatSaveClick(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 38 @ void __fastcall TMain::StatSaveClick(TObject *Sender)";
1 >>>    if(SaveDialogState->FileName.IsEmpty())
1 >>>        StatSaveStateAsClick(Sender);
1 >>>    else
1 >>>        SaveStateFlag = true;
1 >>>}
0 >>>void __fastcall TMain::StatOpenInitClick(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 37 @ void __fastcall TMain::StatOpenInitClick(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 39 @ void __fastcall TMain::StatOpenInitClick(TObject *Sender)";
1 >>>    OpenDialogState->Filter = "Initial State Files (*.int)|*.int";
1 >>>    OpenDialogState->DefaultExt = "int";
1 >>>    OpenDialogState->Title = "Open Initial State File";
1 >>>    if(OpenDialogState->Execute())
1 >>>        OpenDialogState->InitialDir = ExtractFilePath(AnsiReplaceStr(OpenDialogState->FileName, "/", "\\")); 
1 >>>    if(OpenDialogState->InitialDir.IsEmpty())
1 >>>        OpenDialogState->InitialDir = GetCurrentDir();
1 >>>    TMenuItem *ObsItem, *NewItem;
1 >>>    ObsItem = MainMenu1->Items->Items[5];
1 >>>    NewItem = new TMenuItem(ObsItem);
1 >>>    NewItem->Caption = OpenDialogState->FileName;
1 >>>    NewItem->OnClick = StateFileClose;
1 >>>    ObsItem->Insert(ObsItem->Count, NewItem);
1 >>>}
0 >>>}//raf835:end void __fastcall TMain::StatOpenInitClick(TObject *Sender)
0 >>>void __fastcall TMain::ReadStateFile(TObject *Sender, bool & GoodRun)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 38 @ void __fastcall TMain::ReadStateFile(TObject *Sender, bool & GoodRun)\n");  fclose(stdout);
1 >>>    cout << "signature# 40 @ void __fastcall TMain::ReadStateFile(TObject *Sender, bool & GoodRun)";
1 >>>    MapPar::iterator itVar;
1 >>>    ClassVar *thisVar;
1 >>>    ifstream DataFile;
1 >>>    char module[80], name[80];
1 >>>    string S, Descrip, Line;
1 >>>    DataFile.open(OpenDialogState->FileName.c_str());
1 >>>    if(!DataFile)
1 >>>        Application->MessageBox(String("cannot open StateFile '" + OpenDialogState->FileName + "'").c_str(), "File Error", MB_OK);
1 >>>    GoodRun = false;
1 >>>    return;
1 >>>}
0 >>>String Message = "State file: " + OpenDialogState->FileName;
0 >>>LogMessage(Message.c_str());
0 >>>getline(DataFile, Descrip);
0 >>>DataFile.ignore(180, '#');
0 >>>getline(DataFile, Line);
0 >>>getline(DataFile, Line); 
0 >>>Word D[3];
0 >>>DataFile >> D[0] >> D[1] >> D[2];
0 >>>double DT = EncodeDate(D[0], D[1], D[2]);
0 >>>if(DT != floor(DateTimePicker1->Date))
0 >>>    Application->MessageBox("State File and Run start times are not equal",
0 >>>                            "File Error", MB_OK);
0 >>>GoodRun = false;
0 >>>return;
0 >>>}//raf835:end void __fastcall TMain::ReadStateFile(TObject *Sender, bool & GoodRun)
0 >>>getline(DataFile, Descrip);
0 >>>DataFile.ignore(180, '#');
0 >>>getline(DataFile, Line);
0 >>>getline(DataFile, Line); 
0 >>>long filehru, filelay;
0 >>>DataFile >> filehru >> filelay;
0 >>>if(filehru != Global::nhru || filelay != Global::nlay )
0 >>>    Application->MessageBox("State File and Model #HRU's or #LAY's are not equal",
0 >>>                            "File Error", MB_OK);
0 >>>GoodRun = false;
0 >>>return;
0 >>>}//raf835:end void __fastcall TMain::ReadStateFile(TObject *Sender, bool & GoodRun)
0 >>>DataFile.ignore(80, '#');
0 >>>getline(DataFile, Line);
0 >>>while(!DataFile.eof())
0 >>>    DataFile >> module >> name;
0 >>>if(DataFile.fail()) break;
0 >>>DataFile.ignore();
0 >>>long exist = Global::OurModulesList->IndexOf(module);
0 >>>ClassModule*  mod;
0 >>>if(exist > -1)
0 >>>    mod = (ClassModule*) Global::OurModulesList->Objects[exist];
0 >>>else
0 >>>    Application->MessageBox((String("State File module ") + module).c_str(),
0 >>>                            "Unknown module", MB_OK);
0 >>>DataFile.ignore(180, '#');
0 >>>getline(DataFile, Line);
0 >>>continue;
0 >>>}//raf835:end void __fastcall TMain::ReadStateFile(TObject *Sender, bool & GoodRun)
0 >>>S = string(module) + ' ' + string(name);
0 >>>thisVar = ClassVarFind(S);
0 >>>if(!thisVar)
0 >>>    thisVar = ClassVarFind("#" + S);  
0 >>>if(!thisVar && mod->isGroup)
0 >>>    string::size_type idx = S.find('@');
0 >>>if(idx == -1)
0 >>>    string A;
0 >>>GroupEnding(A, mod->GroupCnt);
0 >>>S += A;
0 >>>thisVar = ClassVarFind(S);
0 >>>}//raf835:end void __fastcall TMain::ReadStateFile(TObject *Sender, bool & GoodRun)
0 >>>}//raf835:end void __fastcall TMain::ReadStateFile(TObject *Sender, bool & GoodRun)
0 >>>if(thisVar)
0 >>>    if(thisVar->lay == 0)
0 >>>        for(int ii = 0; ii < thisVar->dim; ii++)
0 >>>            if(thisVar->values != NULL)
0 >>>                DataFile >> thisVar->values[ii];
0 >>>            else if(thisVar->ivalues != NULL)
0 >>>                DataFile >> thisVar->ivalues[ii];
0 >>>}//raf835:end void __fastcall TMain::ReadStateFile(TObject *Sender, bool & GoodRun)
0 >>>else
0 >>>    for(int ll = 0; ll < thisVar->lay; ll++)
0 >>>        for(int ii = 0; ii < thisVar->dim; ii++)
0 >>>            if(thisVar->layvalues != NULL)
0 >>>                DataFile >> thisVar->layvalues[ll][ii];
0 >>>            else  if(thisVar->ivalues != NULL)
0 >>>                DataFile >> thisVar->ilayvalues[ll][ii];
0 >>>}//raf835:end void __fastcall TMain::ReadStateFile(TObject *Sender, bool & GoodRun)
0 >>>DataFile.ignore(180, '#');
0 >>>getline(DataFile, Line);
0 >>>}//raf835:end void __fastcall TMain::ReadStateFile(TObject *Sender, bool & GoodRun)
0 >>>else
0 >>>    Application->MessageBox((String("State File variable ") + S.c_str()).c_str(),
0 >>>                            "Unknown variable", MB_OK);
0 >>>DataFile.ignore(180, '#');
0 >>>getline(DataFile, Line);
0 >>>}//raf835:end void __fastcall TMain::ReadStateFile(TObject *Sender, bool & GoodRun)
0 >>>}//raf835:end void __fastcall TMain::ReadStateFile(TObject *Sender, bool & GoodRun)
0 >>>}//raf835:end void __fastcall TMain::ReadStateFile(TObject *Sender, bool & GoodRun)
0 >>>void __fastcall TMain::ResetLoopList(TObject *Sender)  
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 39 @ void __fastcall TMain::ResetLoopList(TObject *Sender)\n");  fclose(stdout);
1 >>>    if(LoopList == NULL)
1 >>>        return;
1 >>>    ClassPar *thisPar = ParFind("basin RUN_ID");
1 >>>    long ID = 0;
1 >>>    if(!thisPar)
1 >>>        MapPar::iterator itPar;
1 >>>    for (itPar = Global::MapPars.begin(); itPar !=  Global::MapPars.end(); itPar++)
1 >>>        thisPar = (*itPar).second;
1 >>>    if(thisPar->param == "RUN_ID" && thisPar->ivalues[0] > 0)
1 >>>        ID = thisPar->ivalues[0];
1 >>>    break;
1 >>>}
0 >>>}//raf835:end void __fastcall TMain::ResetLoopList(TObject *Sender)  
0 >>>}//raf835:end void __fastcall TMain::ResetLoopList(TObject *Sender)  
0 >>>else
0 >>>    ID = thisPar->ivalues[0];
0 >>>String FileName = "CRHM_loop_output";
0 >>>if(ID > 0)
0 >>>    FileName += String("_") + ID;
0 >>>LoopList->SaveToFile(OpenDialogPrj->InitialDir + "\\" + FileName + ".txt");
0 >>>delete LoopList;
0 >>>LoopList = NULL;
0 >>>}//raf835:end void __fastcall TMain::ResetLoopList(TObject *Sender)  
0 >>>void __fastcall TMain::ControlReadState(TObject *Sender, bool MainLoop, ClassPar * VarPar)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 40 @ void __fastcall TMain::ControlReadState(TObject *Sender, bool MainLoop, ClassPar * VarPar)\n");  fclose(stdout);
1 >>>    cout << "signature# 41 @ void __fastcall TMain::ControlReadState(TObject *Sender, bool MainLoop, ClassPar * VarPar)";
1 >>>    MapPar::iterator itVar;
1 >>>    ClassVar *thisVar;
1 >>>    String Sy;
1 >>>    String Sx;
1 >>>    bool first = true;
1 >>>    bool Wild = false;
1 >>>    if(VarPar && !VarPar->Strings->Strings[0].IsEmpty()) 
1 >>>        Wild = VarPar->Strings->Strings[0].Pos("@") == 0;
1 >>>    ifstream DataFile;
1 >>>    char module[80], name[80];
1 >>>    string S, Descrip, Line;
1 >>>    if(MainLoop)
1 >>>        DataFile.open(String(OpenDialogPrj->InitialDir + "\\" + "ControlStateFile.tmp1").c_str());
1 >>>    else
1 >>>        DataFile.open(String(OpenDialogPrj->InitialDir + "\\" + "ControlStateFile.tmp2").c_str());
1 >>>    getline(DataFile, Descrip);
1 >>>    DataFile.ignore(180, '#');
1 >>>    getline(DataFile, Line);
1 >>>    getline(DataFile, Line); 
1 >>>    Word D[3];
1 >>>    DataFile >> D[0] >> D[1] >> D[2];
1 >>>    DataFile.ignore(180, '#'); 
1 >>>    getline(DataFile, Line); 
1 >>>    getline(DataFile, Line); 
1 >>>    DataFile >> Global::DTindx;
1 >>>    DataFile.ignore(180, '#'); 
1 >>>    getline(DataFile, Line); 
1 >>>    getline(DataFile, Line); 
1 >>>    DataFile >> Global::CurrentModuleRun;
1 >>>    getline(DataFile, Descrip);
1 >>>    DataFile.ignore(180, '#');
1 >>>    getline(DataFile, Line);
1 >>>    getline(DataFile, Line); 
1 >>>    long filehru, filelay;
1 >>>    DataFile >> filehru >> filelay;
1 >>>    DataFile.ignore(180, '#');
1 >>>    getline(DataFile, Line);
1 >>>    while(!DataFile.eof())
1 >>>        DataFile >> module >> name;
1 >>>    if(DataFile.fail()) break;
1 >>>    DataFile.ignore();
1 >>>    long exist = Global::OurModulesList->IndexOf(module);
1 >>>    ClassModule*  mod;
1 >>>    if(exist > -1)
1 >>>        mod = (ClassModule*) Global::OurModulesList->Objects[exist];
1 >>>    else if(MainLoop) 
1 >>>    {
2 >>>        Application->MessageBox((String("State File module ") + module).c_str(),
2 >>>                                "Unknown module", MB_OK);
2 >>>        DataFile.ignore(180, '#');
2 >>>        getline(DataFile, Line);
2 >>>    }
1 >>>    continue;
1 >>>}
0 >>>S = string(module) + ' ' + string(name);
0 >>>thisVar = ClassVarFind(S);
0 >>>if(!thisVar)
0 >>>    thisVar = ClassVarFind("#" + S);  
0 >>>if(!thisVar && mod->isGroup)
0 >>>    string::size_type idx = S.find('@');
0 >>>if(idx == -1)
0 >>>    string A;
0 >>>GroupEnding(A, mod->GroupCnt);
0 >>>S += A;
0 >>>thisVar = ClassVarFind(S);
0 >>>}//raf835:end void __fastcall TMain::ControlReadState(TObject *Sender, bool MainLoop, ClassPar * VarPar)
0 >>>}//raf835:end void __fastcall TMain::ControlReadState(TObject *Sender, bool MainLoop, ClassPar * VarPar)
0 >>>String namebasic = name;
0 >>>if(Wild)  
0 >>>{
1 >>>    int Idx = namebasic.Pos("@");
1 >>>    if(Idx)
1 >>>        namebasic = namebasic.SubString(1, Idx-1);
1 >>>}
0 >>>if(thisVar)
0 >>>    if(VarPar && VarPar->Strings->IndexOf(namebasic) > -1)
0 >>>        if(LoopList == NULL)
0 >>>            LoopList = new TStringList;
0 >>>Sx = Global::DTnow.DateString();
0 >>>LoopList->Add(Sx);
0 >>>}//raf835:end void __fastcall TMain::ControlReadState(TObject *Sender, bool MainLoop, ClassPar * VarPar)
0 >>>if(first)
0 >>>    Sx = "loop " + IntToStr(Global::LoopCnt - Global::LoopCntDown + 1) + "\t" + name;
0 >>>first = false;
0 >>>}//raf835:end void __fastcall TMain::ControlReadState(TObject *Sender, bool MainLoop, ClassPar * VarPar)
0 >>>else
0 >>>    Sx += ("\t" + String(name));
0 >>>Sy ="";
0 >>>if(thisVar->lay == 0)
0 >>>    for(int ii = 0; ii < thisVar->dim; ii++)
0 >>>        if(thisVar->values != NULL)
0 >>>            Sy += FloatToStrF(thisVar->values[ii], ffGeneral, 4, 0) + " ";
0 >>>}//raf835:end void __fastcall TMain::ControlReadState(TObject *Sender, bool MainLoop, ClassPar * VarPar)
0 >>>else if(thisVar->ivalues != NULL)
0 >>>    Sy += FloatToStrF(thisVar->ivalues[ii], ffFixed, 0, 0) + " ";
0 >>>}//raf835:end void __fastcall TMain::ControlReadState(TObject *Sender, bool MainLoop, ClassPar * VarPar)
0 >>>}//raf835:end void __fastcall TMain::ControlReadState(TObject *Sender, bool MainLoop, ClassPar * VarPar)
0 >>>else
0 >>>    for(int ll = 0; ll < thisVar->lay; ll++)
0 >>>        for(int ii = 0; ii < thisVar->dim; ii++)
0 >>>            if(thisVar->layvalues != NULL)
0 >>>                Sy += FloatToStrF(thisVar->layvalues[ll][ii], ffGeneral, 4, 0) + " ";
0 >>>}//raf835:end void __fastcall TMain::ControlReadState(TObject *Sender, bool MainLoop, ClassPar * VarPar)
0 >>>else  if(thisVar->ivalues != NULL)
0 >>>    Sy += FloatToStrF(thisVar->ilayvalues[ll][ii], ffGeneral, 0, 0) + " ";
0 >>>}//raf835:end void __fastcall TMain::ControlReadState(TObject *Sender, bool MainLoop, ClassPar * VarPar)
0 >>>}//raf835:end void __fastcall TMain::ControlReadState(TObject *Sender, bool MainLoop, ClassPar * VarPar)
0 >>>Sx = Sx + "\t" + Sy;
0 >>>}//raf835:end void __fastcall TMain::ControlReadState(TObject *Sender, bool MainLoop, ClassPar * VarPar)
0 >>>else if(thisVar->lay == 0)
0 >>>    for(int ii = 0; ii < thisVar->dim; ii++)
0 >>>        if(thisVar->values != NULL)
0 >>>            DataFile >> thisVar->values[ii];
0 >>>        else if(thisVar->ivalues != NULL)
0 >>>            DataFile >> thisVar->ivalues[ii];
0 >>>}//raf835:end void __fastcall TMain::ControlReadState(TObject *Sender, bool MainLoop, ClassPar * VarPar)
0 >>>else
0 >>>    for(int ll = 0; ll < thisVar->lay; ll++)
0 >>>        for(int ii = 0; ii < thisVar->dim; ii++)
0 >>>            if(thisVar->layvalues != NULL)
0 >>>                DataFile >> thisVar->layvalues[ll][ii];
0 >>>            else  if(thisVar->ivalues != NULL)
0 >>>                DataFile >> thisVar->ilayvalues[ll][ii];
0 >>>}//raf835:end void __fastcall TMain::ControlReadState(TObject *Sender, bool MainLoop, ClassPar * VarPar)
0 >>>}//raf835:end void __fastcall TMain::ControlReadState(TObject *Sender, bool MainLoop, ClassPar * VarPar)
0 >>>DataFile.ignore(180, '#');
0 >>>getline(DataFile, Line);
0 >>>}//raf835:end void __fastcall TMain::ControlReadState(TObject *Sender, bool MainLoop, ClassPar * VarPar)
0 >>>else
0 >>>    Application->MessageBox((String("State File variable ") + S.c_str()).c_str(),
0 >>>                            "Unknown variable", MB_OK);
0 >>>DataFile.ignore(180, '#');
0 >>>getline(DataFile, Line);
0 >>>}//raf835:end void __fastcall TMain::ControlReadState(TObject *Sender, bool MainLoop, ClassPar * VarPar)
0 >>>}//raf835:end void __fastcall TMain::ControlReadState(TObject *Sender, bool MainLoop, ClassPar * VarPar)
0 >>>if(MainLoop)
0 >>>    bool Wild2 = false;
0 >>>ClassPar * TraceVarPar = ParFind("basin TraceVars");
0 >>>if(TraceVarPar && !TraceVarPar->Strings->Strings[0].IsEmpty()) 
0 >>>    Wild2 = TraceVarPar->Strings->Strings[0].Pos("@") == 0;
0 >>>for(int ii = 0; ii < TraceVarPar->Strings->Count; ++ii)
0 >>>    String Trimmed = TraceVarPar->Strings->Strings[ii].Trim();
0 >>>if(!Trimmed.IsEmpty())
0 >>>    int jj = ListBox1->Items->IndexOf(Trimmed);
0 >>>if(jj > -1)
0 >>>    for(int ii = 0; ii < Global::OurModulesList->Count; ii++)
0 >>>        ClassVar * thisVar = VarFind(string(Global::OurModulesList->Strings[ii].c_str()) + ' ' + TraceVarPar->Strings->Strings[0].c_str());
0 >>>if(thisVar)
0 >>>    break;
0 >>>}//raf835:end void __fastcall TMain::ControlReadState(TObject *Sender, bool MainLoop, ClassPar * VarPar)
0 >>>thisVar = (ClassVar*) ListBox1->Items->Objects[jj];
0 >>>if(thisVar)
0 >>>    Sx += ("\t" + String(Trimmed));
0 >>>Sy ="";
0 >>>if(thisVar->lay == 0)
0 >>>    for(int ii = 0; ii < thisVar->dim; ii++)
0 >>>        if(thisVar->values != NULL)
0 >>>            Sy += FloatToStrF(thisVar->values[ii], ffGeneral, 4, 0) + " ";
0 >>>}//raf835:end void __fastcall TMain::ControlReadState(TObject *Sender, bool MainLoop, ClassPar * VarPar)
0 >>>else if(thisVar->ivalues != NULL)
0 >>>    Sy += FloatToStrF(thisVar->ivalues[ii], ffFixed, 0, 0) + " ";
0 >>>}//raf835:end void __fastcall TMain::ControlReadState(TObject *Sender, bool MainLoop, ClassPar * VarPar)
0 >>>}//raf835:end void __fastcall TMain::ControlReadState(TObject *Sender, bool MainLoop, ClassPar * VarPar)
0 >>>else
0 >>>    for(int ll = 0; ll < thisVar->lay; ll++)
0 >>>        for(int ii = 0; ii < thisVar->dim; ii++)
0 >>>            if(thisVar->layvalues != NULL)
0 >>>                Sy += FloatToStrF(thisVar->layvalues[ll][ii], ffGeneral, 4, 0) + " ";
0 >>>}//raf835:end void __fastcall TMain::ControlReadState(TObject *Sender, bool MainLoop, ClassPar * VarPar)
0 >>>else  if(thisVar->ivalues != NULL)
0 >>>    Sy += FloatToStrF(thisVar->ilayvalues[ll][ii], ffGeneral, 0, 0) + " ";
0 >>>}//raf835:end void __fastcall TMain::ControlReadState(TObject *Sender, bool MainLoop, ClassPar * VarPar)
0 >>>}//raf835:end void __fastcall TMain::ControlReadState(TObject *Sender, bool MainLoop, ClassPar * VarPar)
0 >>>Sx = Sx + "\t" + Sy;
0 >>>}//raf835:end void __fastcall TMain::ControlReadState(TObject *Sender, bool MainLoop, ClassPar * VarPar)
0 >>>}//raf835:end void __fastcall TMain::ControlReadState(TObject *Sender, bool MainLoop, ClassPar * VarPar)
0 >>>}//raf835:end void __fastcall TMain::ControlReadState(TObject *Sender, bool MainLoop, ClassPar * VarPar)
0 >>>}//raf835:end void __fastcall TMain::ControlReadState(TObject *Sender, bool MainLoop, ClassPar * VarPar)
0 >>>}//raf835:end void __fastcall TMain::ControlReadState(TObject *Sender, bool MainLoop, ClassPar * VarPar)
0 >>>if(!Sx.IsEmpty())
0 >>>    LoopList->Add(Sx);
0 >>>}//raf835:end void __fastcall TMain::ControlReadState(TObject *Sender, bool MainLoop, ClassPar * VarPar)
0 >>>void __fastcall TMain::OnHint(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 41 @ void __fastcall TMain::OnHint(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 42 @ void __fastcall TMain::OnHint(TObject *Sender)";
1 >>>    StatusBar1->Panels->Items[0]->Text = Application->Hint;
1 >>>    StatusBar1->Refresh();
1 >>>}
0 >>>void __fastcall TMain::LogClick(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 42 @ void __fastcall TMain::LogClick(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 43 @ void __fastcall TMain::LogClick(TObject *Sender)";
1 >>>    LogForm->ShowModal();
1 >>>}
0 >>>void __fastcall TMain::ParametersClick(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 43 @ void __fastcall TMain::ParametersClick(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 44 @ void __fastcall TMain::ParametersClick(TObject *Sender)";
1 >>>    Parameter->ShowModal();
1 >>>}
0 >>>void __fastcall TMain::UpDownOBSIndxClick(TObject *Sender, TUDBtnType Button)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 44 @ void __fastcall TMain::UpDownOBSIndxClick(TObject *Sender, TUDBtnType Button)\n");  fclose(stdout);
1 >>>    cout << "signature# 45 @ void __fastcall TMain::UpDownOBSIndxClick(TObject *Sender, TUDBtnType Button)";
1 >>>    LabelOBSIndx->Caption = LabelOBSIndx->Caption.SubString(1,4) + String(UpDownOBSIndx->Position);
1 >>>    LabelOBSIndx->Refresh();
1 >>>}
0 >>>void __fastcall TMain::UpdateDim(CRHM::TDim Dim, long dim)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 45 @ void __fastcall TMain::UpdateDim(CRHM::TDim Dim, long dim)\n");  fclose(stdout);
1 >>>    cout << "signature# 46 @ void __fastcall TMain::UpdateDim(CRHM::TDim Dim, long dim)";
1 >>>    switch(Dim)
1 >>>    case CRHM::NHRU :
1 >>>    Global::nhru = dim;
1 >>>    Global::maxhru = dim;
1 >>>    UpDownHRUIndx->Max = Global::maxhru;
1 >>>    UpDownHRUIndx->Position = 1;
1 >>>    LabelHRUIndx->Caption = "HRU 1";
1 >>>    LabelHRUIndx->Refresh();
1 >>>    break;
1 >>>case CRHM::NOBS :
1 >>>    Global::nobs = dim;
1 >>>    Global::maxobs = dim;
1 >>>    UpDownOBSIndx->Max = Global::maxobs;
1 >>>    UpDownOBSIndx->Position = 1;
1 >>>    LabelOBSIndx->Caption = "OBS 1";
1 >>>    LabelOBSIndx->Refresh();
1 >>>    break;
1 >>>case CRHM::NLAY :
1 >>>    Global::nlay = dim;
1 >>>    Global::maxlay = dim;
1 >>>    break;
1 >>>}
0 >>>}//raf835:end void __fastcall TMain::UpdateDim(CRHM::TDim Dim, long dim)
0 >>>void __fastcall TMain::HTMLhelp1Click(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 46 @ void __fastcall TMain::HTMLhelp1Click(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 47 @ void __fastcall TMain::HTMLhelp1Click(TObject *Sender)";
1 >>>    String Name = ApplicationDir + "crhm.chm";
1 >>>    FindFileName(Name);
1 >>>    HtmlHelp(0, Name.c_str(), HH_HELP_CONTEXT, 1000);
1 >>>}
0 >>>void __fastcall TMain::PrjAutoRunClick(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 47 @ void __fastcall TMain::PrjAutoRunClick(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 48 @ void __fastcall TMain::PrjAutoRunClick(TObject *Sender)";
1 >>>    if(PrjAutoRun->Checked)
1 >>>        PrjAutoRun->Checked = false;
1 >>>    else
1 >>>        PrjAutoRun->Checked = true;
1 >>>}
0 >>>void __fastcall TMain::RemoveSharedParams(void)  
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 48 @ void __fastcall TMain::RemoveSharedParams(void)\n");  fclose(stdout);
1 >>>    Global::Mapgetvar.clear();
1 >>>    Global::Mapputvar.clear();
1 >>>    Global::Mapreadvar.clear();
1 >>>    Global::Mapdeclvar.clear();
1 >>>    Global::Mapdeclstat.clear();
1 >>>    Global::Mapdeclpar.clear();
1 >>>    Global::Mapdeclobs.clear();
1 >>>    Global::DeclRootList->Clear(); 
1 >>>    Global::BuildFlag = CRHM::BUILD; 
1 >>>    for(int ii = 0; ii < Global::OurModulesList->Count; ++ii)
1 >>>        ((ClassModule*) Global::OurModulesList->Objects[ii])->decl();
1 >>>    Global::BuildFlag = CRHM::DECL; 
1 >>>    ClassPar *thisPar;
1 >>>    MapPar::iterator itPar;
1 >>>    long count;
1 >>>    itPar = Global::SharedMapPars.begin();
1 >>>    while (itPar !=  Global::SharedMapPars.end())
1 >>>        thisPar = (*itPar).second;
1 >>>    count = ClassParFindParBld(thisPar);
1 >>>    Global::MapPars.erase("Shared " + thisPar->param);
1 >>>    delete thisPar; 
1 >>>    ++itPar;
1 >>>}
0 >>>Global::SharedMapPars.clear();
0 >>>}//raf835:end void __fastcall TMain::RemoveSharedParams(void)  
0 >>>void __fastcall TMain::SetSharedParams(ClassPar *basinPar)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 49 @ void __fastcall TMain::SetSharedParams(ClassPar *basinPar)\n");  fclose(stdout);
1 >>>    cout << "signature# 49 @ void __fastcall TMain::SetSharedParams(ClassPar *basinPar)";
1 >>>    ClassPar *thisPar;
1 >>>    MapPar::iterator itPar;
1 >>>    for(itPar = Global::MapPars.begin(); itPar != Global::MapPars.end(); ++itPar)
1 >>>        thisPar = (*itPar).second;
1 >>>    if(basinPar == thisPar) 
1 >>>        continue;
1 >>>    if(thisPar->param == basinPar->param && thisPar->dim == basinPar->dim)
1 >>>        thisPar->Change(*basinPar);
1 >>>}
0 >>>}//raf835:end void __fastcall TMain::SetSharedParams(ClassPar *basinPar)
0 >>>void __fastcall TMain::SqueezeParams(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 50 @ void __fastcall TMain::SqueezeParams(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 50 @ void __fastcall TMain::SqueezeParams(TObject *Sender)";
1 >>>    paras MapInfo; 
1 >>>    ClassPar *thisPar, *thisPar2;
1 >>>    MapPar::iterator itPar; 
1 >>>    itPar = Global::MapPars.begin();
1 >>>    while (itPar !=  Global::MapPars.end())
1 >>>        thisPar = (*itPar).second;
1 >>>    string S = ((*itPar).second)->param;
1 >>>    Pairinfo Item = Pairinfo(S, Pinfo(new Classinfo(thisPar)));
1 >>>    MapInfo.insert(Item);
1 >>>    ++itPar;
1 >>>} 
0 >>>paras::iterator itPar2, itPar3, itPar4;
0 >>>itPar2 = MapInfo.begin();
0 >>>pair<paras::iterator, paras::iterator> range;
0 >>>GrpParas Matched; 
0 >>>string Key; 
0 >>>MapPar MapParsNew; 
0 >>>while (itPar2 !=  MapInfo.end())
0 >>>    string S = (*itPar2).first;
0 >>>long thiscnt = MapInfo.count(S.c_str()); 
0 >>>if(thiscnt > 1)
0 >>>    range = MapInfo.equal_range(S.c_str());
0 >>>long greatestCnt = 0;
0 >>>bool first = true;
0 >>>ClassPar *SharedPar = NULL; 
0 >>>for(itPar3 = range.first; itPar3 != range.second; itPar3++)
0 >>>    Classinfo *info3 = ((*itPar3).second).get();
0 >>>if(info3->rootinfo == NULL)
0 >>>    info3->rootinfo = info3;
0 >>>thisPar = info3->thisPar;
0 >>>range.first++;
0 >>>if(info3->matched) 
0 >>>    continue;
0 >>>PairPar Item = PairPar(thisPar->module, thisPar);
0 >>>Matched.insert(Item);
0 >>>for(itPar4 = range.first; itPar4 != range.second; itPar4++)
0 >>>    Classinfo *info4 = ((*itPar4).second).get();
0 >>>if(info4->matched) 
0 >>>    continue;
0 >>>thisPar2 = info4->thisPar;
0 >>>bool match = thisPar->Same(*thisPar2) && !thisPar->Inhibit_share;
0 >>>if(match)
0 >>>    PairPar Item = PairPar(thisPar->module, thisPar2);
0 >>>Matched.insert(Item);
0 >>>info4->matched = true;
0 >>>thisPar2->Identical = thisPar; 
0 >>>if(++info3->rootinfo->cnt > greatestCnt)
0 >>>    greatestCnt = info3->rootinfo->cnt;
0 >>>Key = info3->rootinfo->thisPar->module;
0 >>>}//raf835:end void __fastcall TMain::SqueezeParams(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::SqueezeParams(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::SqueezeParams(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::SqueezeParams(TObject *Sender)
0 >>>GrpParas::iterator itPar5;
0 >>>if(Matched.count(Key) > 1)
0 >>>    pair<GrpParas::iterator, GrpParas::iterator> range2;
0 >>>range2 = Matched.equal_range(Key);
0 >>>bool first = true;
0 >>>for(itPar5 = range2.first; itPar5 != range2.second; itPar5++)
0 >>>    thisPar = (*itPar5).second;
0 >>>if(first)
0 >>>    thisPar->module = "Shared";
0 >>>PairPar Item = PairPar("Shared " + thisPar->param, thisPar);
0 >>>MapParsNew.insert(Item);
0 >>>Global::SharedMapPars.insert(Item);
0 >>>first = false;
0 >>>}//raf835:end void __fastcall TMain::SqueezeParams(TObject *Sender)
0 >>>else  
0 >>>    delete thisPar;
0 >>>(*itPar5).second = NULL; 
0 >>>}//raf835:end void __fastcall TMain::SqueezeParams(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::SqueezeParams(TObject *Sender)
0 >>>for(itPar5 = Matched.begin(); itPar5 != Matched.end(); itPar5++)
0 >>>    thisPar = (*itPar5).second;
0 >>>if(!thisPar) 
0 >>>    continue;
0 >>>PairPar Item = PairPar(thisPar->module + ' ' + thisPar->param, thisPar);
0 >>>MapParsNew.insert(Item);
0 >>>}//raf835:end void __fastcall TMain::SqueezeParams(TObject *Sender)
0 >>>Matched.clear();
0 >>>}//raf835:end void __fastcall TMain::SqueezeParams(TObject *Sender)
0 >>>else
0 >>>    Classinfo *info = ((*itPar2).second).get();
0 >>>thisPar = info->thisPar;
0 >>>PairPar Item = PairPar(thisPar->module + ' ' + thisPar->param, thisPar);
0 >>>MapParsNew.insert(Item);
0 >>>}//raf835:end void __fastcall TMain::SqueezeParams(TObject *Sender)
0 >>>MapInfo.erase(S.c_str());
0 >>>itPar2 = MapInfo.begin();
0 >>>}//raf835:end void __fastcall TMain::SqueezeParams(TObject *Sender)
0 >>>Global::MapPars.clear();
0 >>>Global::MapPars = MapParsNew;
0 >>>}//raf835:end void __fastcall TMain::SqueezeParams(TObject *Sender)
0 >>>void __fastcall TMain::FormActivate(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 51 @ void __fastcall TMain::FormActivate(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 51 @ void __fastcall TMain::FormActivate(TObject *Sender)";
1 >>>#ifdef CRHM_DLL
1 >>>#ifdef NO_MODULES
1 >>>    AboutBox->Label2->Caption = String("Version: CRHM_DLL_NONE ") + CurrentVersion;
1 >>>#else CRHM_2
1 >>>    AboutBox->Label2->Caption = String("Version: CRHM_DLL ") + CurrentVersion;
1 >>>#endif
1 >>>#elif defined CRHM_2
1 >>>    AboutBox->Label2->Caption = String("Version: CRHM ") + CurrentVersion;
1 >>>#elif defined QUINTON
1 >>>    AboutBox->Label2->Caption = String("Version: CRHM_QUINTON ") + CurrentVersion;
1 >>>#else
1 >>>    AboutBox->Label2->Caption = String("Version: CRHM ") + CurrentVersion;
1 >>>#endif
1 >>>    Global::crhmLog = LogForm->Handle;
1 >>>    for(int pp = 0; pp < ParamCount(); ++pp)
1 >>>        String FileS = ParamStr(pp+1);
1 >>>    if(FileExistsSp(FileS))
1 >>>        if(LowerCase(ExtractFileExt(FileS)) == ".prj")
1 >>>            CommandLine = true;  
1 >>>    OpenDialogPrj->FileName = FileS;
1 >>>    OpenDialogPrj->InitialDir = ExtractFilePath(AnsiReplaceStr(OpenDialogPrj->FileName, "/", "\\")); 
1 >>>    if(OpenDialogPrj->InitialDir.IsEmpty())
1 >>>        OpenDialogPrj->InitialDir = GetCurrentDir();
1 >>>    SetCurrentDir(OpenDialogPrj->InitialDir);
1 >>>    OpenDialogObs->InitialDir = OpenDialogPrj->InitialDir;
1 >>>    FileDefaults(Sender);
1 >>>    DoPrjOpen(Sender);
1 >>>}
0 >>>else if(LowerCase(ExtractFileExt(FileS)) == ".obs")
0 >>>    TDateTime Dt = TDateTime::CurrentDateTime();
0 >>>Chart->Title->Text->Clear();
0 >>>Chart->Title->Text->Add("Current Date: " + Dt.DateString() +  FormatDateTime(" hh:mm", Dt));
0 >>>OpenDialogObs->FileName = FileS;
0 >>>String path = ExtractFilePath(AnsiReplaceStr(OpenDialogObs->FileName, "/", "\\")); 
0 >>>if(path.IsEmpty())
0 >>>    path = GetCurrentDir();
0 >>>FileS = path + "\\" + FileS;
0 >>>}//raf835:end void __fastcall TMain::FormActivate(TObject *Sender)
0 >>>OpenDialogObs->InitialDir = path;
0 >>>OpenObsFile(Sender, FileS);
0 >>>int iFileHandle  = FileOpen(FileS, fmOpenRead);
0 >>>int T = FileGetDate(iFileHandle);
0 >>>ProjectFileDate = FileDateToDateTime(T);
0 >>>char Buf[121];
0 >>>FileRead(iFileHandle, Buf, 120);
0 >>>String C(Buf);
0 >>>int n = C.Pos("\r");
0 >>>C.SetLength(n-1);
0 >>>FileClose(iFileHandle);
0 >>>String SS = ProjectFileDate.DateString() + FormatDateTime(" hh:mm", ProjectFileDate);
0 >>>Chart->SubTitle->Text->Clear();
0 >>>Chart->SubTitle->Text->Add(FileS + " Last modified: " + SS);
0 >>>Chart->SubTitle->Text->Add("Description: " + C);
0 >>>}//raf835:end void __fastcall TMain::FormActivate(TObject *Sender)
0 >>>else if(LowerCase(ExtractFileExt(FileS)) == ".par")
0 >>>    if(!CommandLine) 
0 >>>        continue;
0 >>>ifstream DataFile;
0 >>>int c, Cols;
0 >>>string ss;
0 >>>bool TooFewHRUs = false;
0 >>>string module, param, Descrip, Line, S, s;
0 >>>ClassPar *thisPar;
0 >>>OpenDialogPar->FileName = FileS;
0 >>>String path = ExtractFilePath(AnsiReplaceStr(OpenDialogPar->FileName, "/", "\\")); 
0 >>>if(path.IsEmpty())
0 >>>    path = GetCurrentDir();
0 >>>FileS = path + "\\" + FileS;
0 >>>}//raf835:end void __fastcall TMain::FormActivate(TObject *Sender)
0 >>>OpenDialogPar->InitialDir = path;
0 >>>DataFile.open(OpenDialogPar->FileName.c_str());
0 >>>if(!DataFile)
0 >>>    Application->MessageBox("cannot open file", "File Error", MB_OK);
0 >>>return;
0 >>>}//raf835:end void __fastcall TMain::FormActivate(TObject *Sender)
0 >>>getline(DataFile, Descrip);
0 >>>DataFile.ignore(80, '#');
0 >>>getline(DataFile, Line);
0 >>>RemoveSharedParams(); 
0 >>>while(!DataFile.eof())
0 >>>    DataFile.clear();
0 >>>DataFile >> module;
0 >>>if(module[1] == '#') break;
0 >>>DataFile  >> param;
0 >>>if(DataFile.eof()) return; 
0 >>>DataFile.ignore(80, '\n'); 
0 >>>S = "";
0 >>>do
0 >>>    getline(DataFile, ss);
0 >>>S += ss + ' ';
0 >>>while(c = DataFile.peek(), iscntrl(c) || isspace(c))
0 >>>    DataFile.get();
0 >>>} while(c = DataFile.peek(), !isalpha(c) && c != '#' && !DataFile.eof());
0 >>>string Sc = S; 
0 >>>string::iterator pos; 
0 >>>bool inField = false;
0 >>>for(pos = Sc.begin(); pos != Sc.end(); ++pos)
0 >>>    if(*pos == '\'')
0 >>>        inField = !inField;
0 >>>if(inField && *pos == ' ')
0 >>>    *pos = '_';
0 >>>}//raf835:end void __fastcall TMain::FormActivate(TObject *Sender)
0 >>>istringstream instr; 
0 >>>instr.clear();
0 >>>instr.str(Sc);
0 >>>Cols = 0;
0 >>>for (;;)
0 >>>    instr >> s;
0 >>>if(instr.fail()) break;
0 >>>++Cols; 
0 >>>}//raf835:end void __fastcall TMain::FormActivate(TObject *Sender)
0 >>>if(module == "Shared")
0 >>>    MapPar::iterator itPar;
0 >>>for(itPar = Global::MapPars.begin(); itPar != Global::MapPars.end(); ++itPar)
0 >>>    thisPar = (*itPar).second;
0 >>>if(thisPar->param == string(param))
0 >>>    if(thisPar->dim == Cols/thisPar->lay) 
0 >>>        break;
0 >>>    else if(thisPar->varType == CRHM::Txt && thisPar->dimen < CRHM::NHRU) 
0 >>>        break;
0 >>>    else   
0 >>>    {
1 >>>        if(thisPar->param == string(param) && (thisPar->dim == Cols/thisPar->dim))
1 >>>            break;
1 >>>        else
1 >>>            thisPar = NULL;
1 >>>    }
0 >>>}//raf835:end void __fastcall TMain::FormActivate(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::FormActivate(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::FormActivate(TObject *Sender)
0 >>>else
0 >>>    thisPar = ClassParFind(module, param); 
0 >>>if(thisPar)
0 >>>    ClassPar *newPar = new ClassPar(*thisPar);
0 >>>newPar->module = module; 
0 >>>if(thisPar->varType == CRHM::Txt)
0 >>>    newPar->Strings->DelimitedText = S.c_str();
0 >>>}//raf835:end void __fastcall TMain::FormActivate(TObject *Sender)
0 >>>else
0 >>>    istringstream instr; 
0 >>>instr.clear();
0 >>>instr.str(S);
0 >>>for(int jj = 0; jj<thisPar->lay; jj++)
0 >>>    for(int ii = 0; ii < newPar->dim; ii++)
0 >>>        if(newPar->varType == CRHM::Float)
0 >>>            instr >> newPar->layvalues[jj][ii];
0 >>>        else if(newPar->varType == CRHM::Int)
0 >>>            float x;
0 >>>instr >> x;
0 >>>newPar->ilayvalues[jj][ii] = x;
0 >>>}//raf835:end void __fastcall TMain::FormActivate(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::FormActivate(TObject *Sender)
0 >>>if(newPar->dim > Cols)
0 >>>    if(!TooFewHRUs)
0 >>>        Application->MessageBox("Too few HRUs defined in the Project file",
0 >>>                                "parameters not complete", MB_OK);
0 >>>TooFewHRUs = true;
0 >>>}//raf835:end void __fastcall TMain::FormActivate(TObject *Sender)
0 >>>for(int ii = Cols; ii < newPar->dim; ii++)
0 >>>    if(newPar->varType == CRHM::Float)
0 >>>        newPar->layvalues[jj][ii] = newPar->layvalues[jj][ii-1];
0 >>>    else
0 >>>        newPar->ilayvalues[jj][ii] = newPar->ilayvalues[jj][ii-1];
0 >>>}//raf835:end void __fastcall TMain::FormActivate(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::FormActivate(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::FormActivate(TObject *Sender)
0 >>>if(module == "Shared")
0 >>>    SetSharedParams(newPar); 
0 >>>delete newPar;
0 >>>}//raf835:end void __fastcall TMain::FormActivate(TObject *Sender)
0 >>>else
0 >>>    ClassParSet(newPar);  
0 >>>}//raf835:end void __fastcall TMain::FormActivate(TObject *Sender)
0 >>>else
0 >>>    CRHMException Except("Unknown Module Parameter: " + string(module) + " -> "+ string(param) +
0 >>>                         " in " + string(OpenDialogPrj->FileName.c_str()), ERR);
0 >>>Application->MessageBox(Except.Message.c_str(), "Unknown Parameter in project file", MB_OK);
0 >>>LogError(Except);
0 >>>while(c = DataFile.peek(), !isalpha(c) && c != '#')
0 >>>    DataFile.ignore(256, '\n');
0 >>>}//raf835:end void __fastcall TMain::FormActivate(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::FormActivate(TObject *Sender)
0 >>>DataFile.close();
0 >>>SqueezeParams(Sender);  
0 >>>}//raf835:end void __fastcall TMain::FormActivate(TObject *Sender)
0 >>>else
0 >>>    Application->MessageBox(String(FileS + " - file extension not 'prj', 'obs' or 'par'").c_str(), "Problem with File extension", MB_OK);
0 >>>}//raf835:end void __fastcall TMain::FormActivate(TObject *Sender)
0 >>>else
0 >>>    Application->MessageBox(String(FileS + " - file does not exist").c_str(), "Problem with File", MB_OK);
0 >>>}//raf835:end void __fastcall TMain::FormActivate(TObject *Sender)
0 >>>if(PrjAutoRun->Checked)
0 >>>    if(!Global::OurModulesList->Count && ListBox4->Items->Count)
0 >>>        if(Last1->Checked) LastRprtObs(Sender);
0 >>>if(All1->Checked) AllRprtObs(Sender);
0 >>>if(DebugScreen1->Checked) DebugScreen1Rprt(Sender);
0 >>>if(SummaryScreen1->Checked) SummaryScreen1Rprt(Sender);
0 >>>}//raf835:end void __fastcall TMain::FormActivate(TObject *Sender)
0 >>>else
0 >>>    RunClick(Sender);
0 >>>Main->Refresh();
0 >>>}//raf835:end void __fastcall TMain::FormActivate(TObject *Sender)
0 >>>CommandLine = false;
0 >>>if(PrjAutoExit->Checked && !PlotControl->IntervalControl && (All1->Checked || Last1->Checked || DebugScreen1->Checked || SummaryScreen1->Checked))
0 >>>    Close();
0 >>>}//raf835:end void __fastcall TMain::FormActivate(TObject *Sender)
0 >>>biweekly1->Checked = true; 
0 >>>}//raf835:end void __fastcall TMain::FormActivate(TObject *Sender)
0 >>>void __fastcall TMain::WMMainUpdateDim(TMessage &Message)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 52 @ void __fastcall TMain::WMMainUpdateDim(TMessage &Message)\n");  fclose(stdout);
1 >>>    cout << "signature# 52 @ void __fastcall TMain::WMMainUpdateDim(TMessage &Message)";
1 >>>    UpdateDim((CRHM::TDim) Message.WParam, (long) Message.LParam);
1 >>>}
0 >>>void __fastcall TMain::WMMainUpdateStatus(TMessage &Message)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 53 @ void __fastcall TMain::WMMainUpdateStatus(TMessage &Message)\n");  fclose(stdout);
1 >>>    cout << "signature# 53 @ void __fastcall TMain::WMMainUpdateStatus(TMessage &Message)";
1 >>>    String S = (*((String*) Message.WParam)).c_str();
1 >>>    StatusBar1->Panels->Items[0]->Text = S;
1 >>>    StatusBar1->Repaint();
1 >>>}
0 >>>void __fastcall TMain::WMMainUpdateDirty(TMessage &Message)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 54 @ void __fastcall TMain::WMMainUpdateDirty(TMessage &Message)\n");  fclose(stdout);
1 >>>    cout << "signature# 54 @ void __fastcall TMain::WMMainUpdateDirty(TMessage &Message)";
1 >>>    dirty = true;
1 >>>}
0 >>>void __fastcall TMain::PrjReportClick(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 55 @ void __fastcall TMain::PrjReportClick(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 55 @ void __fastcall TMain::PrjReportClick(TObject *Sender)";
1 >>>    MapPar::iterator itPar;
1 >>>    MapDim::iterator itDim;
1 >>>    ClassPar *thisPar;
1 >>>    TStringList *SumList = new TStringList;
1 >>>    SumList->Add(DescripPrj.c_str());
1 >>>    SumList->Add("");
1 >>>    TDateTime Dt = TDateTime::CurrentDateTime();
1 >>>    SumList->Add("CURRENT TIME: " + Dt.DateString() +  FormatDateTime(" hh:mm", Dt));
1 >>>    SumList->Add("");
1 >>>    SumList->Add("CRHM " + AboutBox->Label2->Caption);
1 >>>    SumList->Add("");
1 >>>    SumList->Add("PROJECT FILE NAME:");
1 >>>    SumList->Add("");
1 >>>    if((OpenDialogPrj->FileName.LowerCase()).Pos(".prj") && ProjectOpen && !dirty)
1 >>>        String S = ProjectFileDate.DateString() + FormatDateTime(" hh:mm", ProjectFileDate);
1 >>>    SumList->Add(SaveDialogPrj->FileName + "  dated " + S);
1 >>>}
0 >>>else if (dirty)
0 >>>    SumList->Add("WARNING: Project not saved");
0 >>>SumList->Add("");
0 >>>SumList->Add("DIMENSIONS:");
0 >>>SumList->Add(" ");
0 >>>SumList->Add(String("nhru " + String(Global::nhru)));
0 >>>SumList->Add(String("nlay " + String(Global::nlay)));
0 >>>SumList->Add(String("nobs " + String(Global::nobs)));
0 >>>SumList->Add(" ");
0 >>>if(!Global::MapAKA.empty())
0 >>>    Mapstr2::iterator it;
0 >>>SumList->Add("AKAs:");
0 >>>SumList->Add(" ");
0 >>>for (it = Global::MapAKA.begin(); it !=  Global::MapAKA.end(); ++it)
0 >>>    string Var = (*it).first + ' ' + (*it).second;
0 >>>SumList->Add(Var.c_str());
0 >>>}//raf835:end void __fastcall TMain::PrjReportClick(TObject *Sender)
0 >>>SumList->Add(" ");
0 >>>}//raf835:end void __fastcall TMain::PrjReportClick(TObject *Sender)
0 >>>SumList->Add("OBSERVATIONS:");
0 >>>SumList->Add(" ");
0 >>>for(int ii = 0; ii < ObsFilesList->Count; ii++)
0 >>>    String S = ObsFilesList->Strings[ii];
0 >>>ClassData * FileData = (ClassData *) ObsFilesList->Objects[ii];
0 >>>TDateTime Dt1 = FileData->Dt1;
0 >>>if(FileData->Interval < 1.0)
0 >>>    Dt1 += FileData->Interval; 
0 >>>TDateTime Dt2 = FileData->Dt2;
0 >>>S +=  "         ( " + Dt1.DateString() +  FormatDateTime(" hh:mm", Dt1) + " - "
0 >>>      + Dt2.DateString() +  FormatDateTime(" hh:mm", Dt2) + ", Interval = ";
0 >>>if(FileData->Times != NULL)
0 >>>    S +=  "sparse data file )";
0 >>>else if(FileData->Interval < 1.0)
0 >>>    S +=  FormatDateTime("hh:mm", (TDateTime) FileData->Interval) + " )";
0 >>>else
0 >>>    S +=  "daily )";
0 >>>SumList->Add(S);
0 >>>}//raf835:end void __fastcall TMain::PrjReportClick(TObject *Sender)
0 >>>SumList->Add(" ");
0 >>>SumList->Add("DATES:");
0 >>>SumList->Add(" ");
0 >>>String S;
0 >>>S = DateTimePicker1->Date.FormatString("yyyy m d");
0 >>>if(ObsFilesList->Count == 0)
0 >>>    S = S + " " + FloatToStrF(Global::Freq, ffGeneral, 0, 0);
0 >>>SumList->Add(S);
0 >>>S = DateTimePicker2->Date.FormatString("yyyy m d");
0 >>>SumList->Add(S);
0 >>>SumList->Add(" ");
0 >>>#ifdef CRHM_DLL
0 >>>SumList->Add("DLLs:");
0 >>>SumList->Add(" ");
0 >>>for(int ii = 0; ii < OpenDLLs->Count; ii++)
0 >>>    String S = OpenDLLs->Strings[ii];
0 >>>SumList->Add(S);
0 >>>}//raf835:end void __fastcall TMain::PrjReportClick(TObject *Sender)
0 >>>SumList->Add(" ");
0 >>>#endif
0 >>>SumList->Add("MODULES:");
0 >>>SumList->Add(" ");
0 >>>for(int ii = 0; ii < Global::OurModulesList->Count; ii++)
0 >>>    String S = Global::OurModulesList->Strings[ii];
0 >>>ClassModule* thisModule = (ClassModule*) Global::OurModulesList->Objects[ii];
0 >>>if(thisModule->variation > 0)
0 >>>    string AA("#0 ");
0 >>>AA[1] += log(thisModule->variation)/log(2) + 1;
0 >>>S = S + AA.c_str();
0 >>>}//raf835:end void __fastcall TMain::PrjReportClick(TObject *Sender)
0 >>>else
0 >>>    S = S + " ";
0 >>>S = S + thisModule->DLLName;
0 >>>S = S + thisModule->Version;
0 >>>SumList->Add(S);
0 >>>}//raf835:end void __fastcall TMain::PrjReportClick(TObject *Sender)
0 >>>SumList->Add(" ");
0 >>>SumList->Add("PARAMETERS:");
0 >>>SumList->Add(" ");
0 >>>for (itPar = Global::MapPars.begin(); itPar !=  Global::MapPars.end(); itPar++)
0 >>>    thisPar = (*itPar).second;
0 >>>String S = String(thisPar->module.c_str()) + " - " +
0 >>>           String(thisPar->param.c_str());
0 >>>if(thisPar->varType != CRHM::Txt)
0 >>>    S += " <" + FloatToStrF(thisPar->minVal, ffGeneral, 4, 0)+ " to " + FloatToStrF(thisPar->maxVal, ffGeneral, 4, 0) + ">";
0 >>>SumList->Add(S);
0 >>>for(int jj = 0; jj<thisPar->lay; jj++)
0 >>>    S = "";
0 >>>for(int ii = 0; ii < thisPar->dim; ii++)
0 >>>    if(thisPar->varType == CRHM::Float)
0 >>>        S = S + FloatToStrF(thisPar->layvalues[jj][ii], ffGeneral, 4, 0) + " ";
0 >>>    else if(thisPar->varType == CRHM::Int)
0 >>>        S = S + FloatToStrF(thisPar->ilayvalues[jj][ii], ffGeneral, 8, 0) + " ";
0 >>>    else if(thisPar->varType == CRHM::Txt)
0 >>>        if(thisPar->Strings->Count > ii)
0 >>>            S = S + "'" + thisPar->Strings->Strings[ii] + "' ";
0 >>>if(ii%10 == 9)
0 >>>    SumList->Add(S);
0 >>>S = "";
0 >>>}//raf835:end void __fastcall TMain::PrjReportClick(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::PrjReportClick(TObject *Sender)
0 >>>if(!S.IsEmpty())
0 >>>{
1 >>>    SumList->Add(S);
1 >>>    S = "";
1 >>>}
0 >>>}//raf835:end void __fastcall TMain::PrjReportClick(TObject *Sender)
0 >>>if(!S.IsEmpty()) SumList->Add(S);
0 >>>SumList->Add(" ");
0 >>>}//raf835:end void __fastcall TMain::PrjReportClick(TObject *Sender)
0 >>>SumList->Add(" ");
0 >>>SumList->Add("INITIAL STATE:");
0 >>>SumList->Add(" ");
0 >>>TMenuItem *StateItem;
0 >>>StateItem = MainMenu1->Items->Items[5];
0 >>>if(StateItem->Count > 5)  
0 >>>{
1 >>>    for(int ii = 5; ii < StateItem->Count; ++ii)
1 >>>        SumList->Add(StateItem->Items[ii]->Caption);
1 >>>}
0 >>>SumList->Add(" ");
0 >>>SumList->Add("FINAL STATE:");
0 >>>SumList->Add(" ");
0 >>>if(SaveStateFlag)
0 >>>    SumList->Add(SaveDialogState->FileName);
0 >>>}//raf835:end void __fastcall TMain::PrjReportClick(TObject *Sender)
0 >>>SumList->Add(" ");
0 >>>Rprt->SummaryList = SumList;
0 >>>Rprt->ShowModal();
0 >>>Rprt->SummaryList = NULL;
0 >>>delete SumList;
0 >>>LogForm->ClearRunLogs();
0 >>>}//raf835:end void __fastcall TMain::PrjReportClick(TObject *Sender)
0 >>>void __fastcall TMain::DLL1OpenClick(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 56 @ void __fastcall TMain::DLL1OpenClick(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 56 @ void __fastcall TMain::DLL1OpenClick(TObject *Sender)";
1 >>>    OpenDialogDLL->Filter = "DLL Files (*.dll)|*.dll";
1 >>>    OpenDialogDLL->Title = "Open DLL File";
1 >>>    OpenDialogDLL->DefaultExt = "dll";
1 >>>    if(OpenDialogDLL->Execute())
1 >>>        OpenDialogDLL->InitialDir = ExtractFilePath(AnsiReplaceStr(OpenDialogDLL->FileName, "/", "\\")); 
1 >>>    if(OpenDialogDLL->InitialDir.IsEmpty())
1 >>>        OpenDialogDLL->InitialDir = GetCurrentDir();
1 >>>    Global::PendingDLLModuleList->Clear(); 
1 >>>    OpenDLLFile(OpenDialogDLL->FileName);
1 >>>    dirty = true;
1 >>>    UpdateOurModules();
1 >>>}
0 >>>}//raf835:end void __fastcall TMain::DLL1OpenClick(TObject *Sender)
0 >>>void __fastcall TMain::DllFileCloseAux(String FileName)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 57 @ void __fastcall TMain::DllFileCloseAux(String FileName)\n");  fclose(stdout);
1 >>>    cout << "signature# 57 @ void __fastcall TMain::DllFileCloseAux(String FileName)";
1 >>>    TMenuItem *DllItem, *DllItem2;
1 >>>    DllItem = MainMenu1->Items->Items[3];
1 >>>    for(int ii = DllItem->Count-1; ii > 3; --ii) 
1 >>>        if(FileName == DllItem->Items[ii]->Caption)
1 >>>            break;
1 >>>    int Pos  = OpenDLLs->IndexOf(FileName);
1 >>>    DllItem = MainMenu1->Items->Items[3];
1 >>>    DllItem->Delete(Pos+4);  
1 >>>    HINSTANCE Dll = (HINSTANCE) OpenDLLs->Objects[Pos];
1 >>>    DllDelete(FileName);           
1 >>>    OpenDLLs->Delete(Pos);  
1 >>>    FreeLibrary(Dll); 
1 >>>    if((int) Global::OurHelpList->Objects[Pos+InitModCnt])  
1 >>>    {
2 >>>        DllItem = MainMenu1->Items->Items[MainMenu1->Items->Count-1];
2 >>>        DllItem->Delete(Pos+2+InitModCnt);  
2 >>>    }
1 >>>    Global::OurHelpList->Delete(Pos+InitModCnt);  
1 >>>}
0 >>>void __fastcall TMain::DllFileClose(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 58 @ void __fastcall TMain::DllFileClose(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 58 @ void __fastcall TMain::DllFileClose(TObject *Sender)";
1 >>>    TMenuItem *DllItem;
1 >>>    TMenuItem * thisMenu = (TMenuItem *) Sender;
1 >>>    String S = thisMenu->Caption;
1 >>>    if(!DllinUse(S))
1 >>>        int Pos  = OpenDLLs->IndexOf(S);
1 >>>    DllItem = MainMenu1->Items->Items[3];
1 >>>    DllItem->Delete(Pos+4);  
1 >>>    HINSTANCE Dll = (HINSTANCE) OpenDLLs->Objects[Pos];
1 >>>    DllDelete(S);           
1 >>>    OpenDLLs->Delete(Pos);  
1 >>>    FreeLibrary(Dll); 
1 >>>    if((int) Global::OurHelpList->Objects[Pos+InitModCnt])  
1 >>>    {
2 >>>        DllItem = MainMenu1->Items->Items[MainMenu1->Items->Count-1];
2 >>>        DllItem->Delete(Pos+2+InitModCnt);  
2 >>>    }
1 >>>    Global::OurHelpList->Delete(Pos+InitModCnt);  
1 >>>}
0 >>>}//raf835:end void __fastcall TMain::DllFileClose(TObject *Sender)
0 >>>void __fastcall TMain::DLL1CloseALLClick(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 59 @ void __fastcall TMain::DLL1CloseALLClick(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 59 @ void __fastcall TMain::DLL1CloseALLClick(TObject *Sender)";
1 >>>    TMenuItem *DllItem, *DllItem2;
1 >>>    DllItem = MainMenu1->Items->Items[3];
1 >>>    for(int ii = DllItem->Count-1; ii > 3; --ii)
1 >>>        String S = DllItem->Items[ii]->Caption;
1 >>>    if(!DllinUse(S))
1 >>>        int Pos  = OpenDLLs->IndexOf(S);
1 >>>    HINSTANCE Dll = (HINSTANCE) OpenDLLs->Objects[Pos];
1 >>>    DllItem->Delete(ii);
1 >>>    DllDelete(S);           
1 >>>    OpenDLLs->Delete(Pos);  
1 >>>    FreeLibrary(Dll);  
1 >>>    if((int) Global::OurHelpList->Objects[Pos+InitModCnt])  
1 >>>    {
2 >>>        DllItem2 = MainMenu1->Items->Items[MainMenu1->Items->Count-1];
2 >>>        DllItem2->Delete(Pos+2+InitModCnt);  
2 >>>    }
1 >>>    Global::OurHelpList->Delete(Pos+InitModCnt);  
1 >>>}
0 >>>}//raf835:end void __fastcall TMain::DLL1CloseALLClick(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::DLL1CloseALLClick(TObject *Sender)
0 >>>bool __fastcall TMain::DllinUse(String FileName)
0 >>>{
1 >>>    cout << "signature# 60 @ bool __fastcall TMain::DllinUse(String FileName)";
1 >>>    for(int ii = 0; ii < Global::OurModulesList->Count; ii++)
1 >>>        ClassModule* thisModule = (ClassModule*) Global::OurModulesList->Objects[ii];
1 >>>    if(thisModule->DLLName == FileName)
1 >>>        Application->MessageBox(("DLL in use " + FileName).c_str(), "Cannot close DLL File", MB_OK    );
1 >>>    return true;
1 >>>}
0 >>>}//raf835:end void __fastcall TMain::DLL1CloseALLClick(TObject *Sender)
0 >>>return false;
0 >>>}//raf835:end void __fastcall TMain::DLL1CloseALLClick(TObject *Sender)
0 >>>void __fastcall TMain::CompactDlls(void)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 60 @ void __fastcall TMain::CompactDlls(void)\n");  fclose(stdout);
1 >>>    cout << "signature# 61 @ void __fastcall TMain::CompactDlls(void)";
1 >>>    TMenuItem *DllItem;
1 >>>    bool* UsedList = new bool [OpenDLLs->Count];
1 >>>    for(int ii = 0; ii < OpenDLLs->Count; ii++) UsedList[ii] = false;
1 >>>    for(int ii = 0; ii < Global::OurModulesList->Count; ii++)
1 >>>        ClassModule* thisModule = (ClassModule*) Global::OurModulesList->Objects[ii];
1 >>>    if(thisModule->DLLName.IsEmpty()) continue;
1 >>>    if(thisModule->isGroup || thisModule->isStruct)
1 >>>        list<ModulePtr> ::iterator iterM;
1 >>>    iterM = ((ClassMacro *) thisModule)->Modules.begin();
1 >>>    while(iterM != ((ClassMacro *) thisModule)->Modules.end())
1 >>>        boost::weak_ptr<ClassModule> MP((*iterM));
1 >>>    int jj = OpenDLLs->IndexOf((*iterM)->DLLName);
1 >>>    if(jj >= 0) UsedList[jj] = true;
1 >>>    ++iterM;
1 >>>}
0 >>>}//raf835:end void __fastcall TMain::CompactDlls(void)
0 >>>else  
0 >>>{
1 >>>    int jj = OpenDLLs->IndexOf(thisModule->DLLName);
1 >>>    if(jj >= 0) UsedList[jj] = true;
1 >>>}
0 >>>}//raf835:end void __fastcall TMain::CompactDlls(void)
0 >>>for(int ii = OpenDLLs->Count-1; ii >= 0; --ii)
0 >>>    if(!UsedList[ii])
0 >>>        DllItem = MainMenu1->Items->Items[3];
0 >>>DllItem->Delete(ii+4);  
0 >>>HINSTANCE Dll = (HINSTANCE) OpenDLLs->Objects[ii];
0 >>>DllDelete(OpenDLLs->Strings[ii]);
0 >>>OpenDLLs->Delete(ii); 
0 >>>FreeLibrary(Dll); 
0 >>>if((int) Global::OurHelpList->Objects[ii+1])  
0 >>>{
1 >>>    DllItem = MainMenu1->Items->Items[MainMenu1->Items->Count-1];
1 >>>    DllItem->Delete(ii+3);  
1 >>>}
0 >>>Global::OurHelpList->Delete(ii+1);  
0 >>>}//raf835:end void __fastcall TMain::CompactDlls(void)
0 >>>delete [] UsedList;
0 >>>}//raf835:end void __fastcall TMain::CompactDlls(void)
0 >>>bool __fastcall TMain::OpenDLLFile(String FileName)
0 >>>{
1 >>>    cout << "signature# 62 @ bool __fastcall TMain::OpenDLLFile(String FileName)";
1 >>>    TStringList *DesiredModuleList;
1 >>>    if(OpenDLLs->IndexOf(FileName) != -1)   
1 >>>    {
2 >>>        if(Application->MessageBox(String("Reload DLL \"" + FileName + "\" to change module selection?").c_str(),
2 >>>                                   "DLL already loaded!", MB_OKCANCEL) == IDOK)
2 >>>            DllFileCloseAux(FileName);
2 >>>        else
2 >>>            return true;
2 >>>    }
1 >>>    if(Global::PendingDLLModuleList->Count > 0)  
1 >>>    {
2 >>>        DesiredModuleList = new TStringList; 
2 >>>        DesiredModuleList->AddStrings(Global::PendingDLLModuleList);
2 >>>    }
1 >>>    else
1 >>>        DesiredModuleList = NULL;
1 >>>    HINSTANCE DLL = LoadLibrary(FileName.c_str());
1 >>>    if (DLL)
1 >>>        LoadUserModules = (LoadModuleType *) GetProcAddress(DLL, "_MoveModulesToGlobal");
1 >>>    if (LoadUserModules)
1 >>>        LoadUserModules(FileName);
1 >>>    if(DesiredModuleList != NULL)
1 >>>        for(int ii = Global::PendingDLLModuleList->Count-1; ii >= 0; --ii)
1 >>>            if(DesiredModuleList->IndexOf(Global::PendingDLLModuleList->Strings[ii]) == -1)
1 >>>                Global::PendingDLLModuleList->Delete(ii);
1 >>>}
0 >>>delete DesiredModuleList;
0 >>>DesiredModuleList = NULL;
0 >>>((ClassModule*) Global::PendingDLLModuleList->Objects[0])->OurAdmin->Accept(mrYesToAll);
0 >>>}//raf835:end void __fastcall TMain::CompactDlls(void)
0 >>>else
0 >>>    ((ClassModule*) Global::PendingDLLModuleList->Objects[0])->OurAdmin->Accept();
0 >>>OpenDLLs->AddObject(FileName, (TObject*) DLL);
0 >>>UpDateModelMenu();
0 >>>TMenuItem *DllItem, *NewItem;
0 >>>DllItem = MainMenu1->Items->Items[3];
0 >>>NewItem = new TMenuItem(DllItem);
0 >>>NewItem->Caption = FileName;
0 >>>NewItem->OnClick = DllFileClose;
0 >>>DllItem->Insert(DllItem->Count, NewItem);
0 >>>return true;
0 >>>}//raf835:end void __fastcall TMain::CompactDlls(void)
0 >>>else
0 >>>    ShowMessage(SysErrorMessage(GetLastError()));
0 >>>FreeLibrary(DLL);  
0 >>>}//raf835:end void __fastcall TMain::CompactDlls(void)
0 >>>}//raf835:end void __fastcall TMain::CompactDlls(void)
0 >>>else
0 >>>    ShowMessage(SysErrorMessage(GetLastError()));
0 >>>ShowMessage("Unable to load the DLL");
0 >>>}//raf835:end void __fastcall TMain::CompactDlls(void)
0 >>>return false;
0 >>>}//raf835:end void __fastcall TMain::CompactDlls(void)
0 >>>void __fastcall TMain::DllDelete(String FileName)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 61 @ void __fastcall TMain::DllDelete(String FileName)\n");  fclose(stdout);
1 >>>    cout << "signature# 63 @ void __fastcall TMain::DllDelete(String FileName)";
1 >>>    for(int ii = Global::AllModulesList->Count-1; ii >= 0; --ii)   
1 >>>    {
2 >>>        String ZZ = Global::AllModulesList->Strings[ii];
2 >>>        ClassModule* thisModule = (ClassModule*) Global::AllModulesList->Objects[ii];
2 >>>        if(thisModule->DLLName == FileName)
2 >>>            Global::AllModulesList->Delete(ii);
2 >>>    }
1 >>>    for(int ii = Global::AllModelsList->Count-1; ii >= 0 ; --ii)   
1 >>>    {
2 >>>        String Z = Global::AllModelsList->Strings[ii]; 
2 >>>        int Index = (int) Global::AllModelsList->Objects[ii]; 
2 >>>        Administer *p = (Administer*) Global::ModelModulesList->Objects[Index];
2 >>>        if(p->DLLName == FileName)
2 >>>            Global::AllModelsList->Delete(ii);  
2 >>>    }
1 >>>    UpDateModelMenu();
1 >>>    dirty = true;
1 >>>}
0 >>>void __fastcall TMain::UpDateModelMenu(void)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 62 @ void __fastcall TMain::UpDateModelMenu(void)\n");  fclose(stdout);
1 >>>    cout << "signature# 64 @ void __fastcall TMain::UpDateModelMenu(void)";
1 >>>    TMenuItem *ObsItem, *NewItem;
1 >>>    ObsItem = MainMenu1->Items->Items[2];
1 >>>    while(ObsItem->Count > 6)
1 >>>        ObsItem->Delete(ObsItem->Count-1);
1 >>>    for(int ii = 0; ii < Global::AllModelsList->Count; ii++)
1 >>>        NewItem = new TMenuItem(ObsItem);
1 >>>    NewItem->Caption = Global::AllModelsList->Strings[ii];
1 >>>    NewItem->OnClick = BldModelClick;
1 >>>    NewItem->Tag = ii;
1 >>>    ObsItem->Insert(ObsItem->Count, NewItem);
1 >>>}
0 >>>ObsItem = MainMenu1->Items->Items[MainMenu1->Items->Count-1];
0 >>>while(ObsItem->Count > 4)
0 >>>    ObsItem->Delete(ObsItem->Count-3);
0 >>>for(int ii = 0; ii < Global::OurHelpList->Count; ii++)
0 >>>    if((int) Global::OurHelpList->Objects[ii])
0 >>>        NewItem = new TMenuItem(ObsItem);
0 >>>NewItem->Caption = Global::OurHelpList->Strings[ii];
0 >>>NewItem->OnClick = OpenHelp;
0 >>>NewItem->Tag = 0;  
0 >>>if((InitModCnt >> ii) || OpenDLLs == NULL)   
0 >>>{
1 >>>    NewItem->Tag = 1;
1 >>>}
0 >>>else
0 >>>    String Fix = Global::OurHelpList->Strings[ii] + ".chm"; 
0 >>>if(FindFileName(Fix))
0 >>>    NewItem->Tag = -(ii+1);
0 >>>NewItem->Hint = Global::OurHelpList->Strings[ii] + ".chm";
0 >>>}//raf835:end void __fastcall TMain::UpDateModelMenu(void)
0 >>>}//raf835:end void __fastcall TMain::UpDateModelMenu(void)
0 >>>NewItem->Enabled = NewItem->Tag;
0 >>>ObsItem->Insert(ObsItem->Count-2, NewItem);
0 >>>}//raf835:end void __fastcall TMain::UpDateModelMenu(void)
0 >>>}//raf835:end void __fastcall TMain::UpDateModelMenu(void)
0 >>>UpDateHelpMenu();
0 >>>}//raf835:end void __fastcall TMain::UpDateModelMenu(void)
0 >>>void __fastcall TMain::UpDateHelpMenu(void)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 63 @ void __fastcall TMain::UpDateHelpMenu(void)\n");  fclose(stdout);
1 >>>    cout << "signature# 65 @ void __fastcall TMain::UpDateHelpMenu(void)";
1 >>>    TMenuItem *HelpItem, *NewItem;
1 >>>    HelpItem = MainMenu1->Items->Items[MainMenu1->Items->Count-1];
1 >>>    int NumDlls = 0;
1 >>>#ifdef CRHM_DLL
1 >>>    NumDlls = OpenDLLs->Count;
1 >>>#endif
1 >>>    while(HelpItem->Count > 4 + InitModCnt + NumDlls)
1 >>>        HelpItem->Delete(HelpItem->Count-3);
1 >>>    for(int ii = 0; ii < PrjObsHelp->Count; ii++)
1 >>>        if(PrjObsHelp->Strings[ii].IsEmpty()) continue;  
1 >>>    NewItem = new TMenuItem(HelpItem);
1 >>>    NewItem->Caption = PrjObsHelp->Strings[ii];
1 >>>    NewItem->OnClick = OpenHelp;
1 >>>    NewItem->Tag = (int) PrjObsHelp->Objects[ii];
1 >>>    HelpItem->Insert(HelpItem->Count-1, NewItem);
1 >>>    if(ii == PrjObsHelp->Count-1 || ii == 0)
1 >>>        HelpItem->InsertNewLineAfter(HelpItem->Items[HelpItem->Count-2]);
1 >>>}
0 >>>}//raf835:end void __fastcall TMain::UpDateHelpMenu(void)
0 >>>void __fastcall TMain::DeleteListBox3Click(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 64 @ void __fastcall TMain::DeleteListBox3Click(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 66 @ void __fastcall TMain::DeleteListBox3Click(TObject *Sender)";
1 >>>    TComponent *pComponent = PopupListBox3->PopupComponent;
1 >>>    if(pComponent)
1 >>>        if(pComponent->ClassNameIs("TListBox") && pComponent->Name == "ListBox3")
1 >>>            int StartCnt = ListBox3->Items->Count;
1 >>>    for(int ii = StartCnt-1; ii >= 0; --ii)
1 >>>        if(ListBox3->Selected[ii])
1 >>>            ListBox4RemoveFuncts(Sender, ListBox3->Items->Strings[ii]);
1 >>>    if(SeriesCnt <= 0)
1 >>>        ListBox3->Items->Delete(ii);
1 >>>}
0 >>>else
0 >>>    bool Found = false;
0 >>>for(int jj = 0; jj < SeriesCnt; jj++)
0 >>>    if(cdSeries[jj]->Title == ListBox3->Items->Strings[ii])
0 >>>        Found = true;
0 >>>ClassVar* thisVar =  (ClassVar *) cdSeries[jj]->Tag;
0 >>>thisVar->TchrtOpt = cdSeries[jj]->VertAxis == aRightAxis;
0 >>>cdSeries[jj]->ParentChart = NULL;
0 >>>cdSeries[jj]->Clear();
0 >>>for(int kk = jj+1; kk < SeriesCnt; kk++)
0 >>>    cdSeries[kk-1] = cdSeries[kk];
0 >>>ListBox3->Items->Delete(ii);
0 >>>SeriesCnt--;
0 >>>break;
0 >>>}//raf835:end void __fastcall TMain::DeleteListBox3Click(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::DeleteListBox3Click(TObject *Sender)
0 >>>if(!Found) ListBox3->Items->Delete(ii);
0 >>>}//raf835:end void __fastcall TMain::DeleteListBox3Click(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::DeleteListBox3Click(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::DeleteListBox3Click(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::DeleteListBox3Click(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::DeleteListBox3Click(TObject *Sender)
0 >>>else
0 >>>    MessageBeep(0);
0 >>>}//raf835:end void __fastcall TMain::DeleteListBox3Click(TObject *Sender)
0 >>>void __fastcall TMain::NegateListBox3Click(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 65 @ void __fastcall TMain::NegateListBox3Click(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 67 @ void __fastcall TMain::NegateListBox3Click(TObject *Sender)";
1 >>>    TComponent *pComponent = PopupListBox3->PopupComponent;
1 >>>    if(pComponent)
1 >>>        if(pComponent->ClassNameIs("TListBox") && pComponent->Name == "ListBox3")
1 >>>            int StartCnt = ListBox3->Items->Count;
1 >>>    for(int ii = StartCnt-1; ii >= 0; --ii)
1 >>>        if(ListBox3->Selected[ii])
1 >>>            if(SeriesCnt <= 0)
1 >>>                Application->MessageBox("please run the model first", "Warning", MB_OK);
1 >>>    return;
1 >>>}
0 >>>else
0 >>>    for(int Indx = 0; Indx < SeriesCnt; Indx++)
0 >>>        if(cdSeries[Indx]->Title == ListBox3->Items->Strings[ii])
0 >>>            long stop = cdSeries[Indx]->Count();
0 >>>for (int iii = 0; iii < stop; iii++)
0 >>>    cdSeries[Indx]->YValue[iii] = -1*cdSeries[Indx]->YValue[iii];
0 >>>break;
0 >>>}//raf835:end void __fastcall TMain::NegateListBox3Click(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::NegateListBox3Click(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::NegateListBox3Click(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::NegateListBox3Click(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::NegateListBox3Click(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::NegateListBox3Click(TObject *Sender)
0 >>>else
0 >>>    MessageBeep(0);
0 >>>}//raf835:end void __fastcall TMain::NegateListBox3Click(TObject *Sender)
0 >>>void __fastcall TMain::AbsListBox3Click(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 66 @ void __fastcall TMain::AbsListBox3Click(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 68 @ void __fastcall TMain::AbsListBox3Click(TObject *Sender)";
1 >>>    TComponent *pComponent = PopupListBox3->PopupComponent;
1 >>>    if(pComponent)
1 >>>        if(pComponent->ClassNameIs("TListBox") && pComponent->Name == "ListBox3")
1 >>>            int StartCnt = ListBox3->Items->Count;
1 >>>    for(int ii = StartCnt-1; ii >= 0; --ii)
1 >>>        if(ListBox3->Selected[ii])
1 >>>            if(SeriesCnt <= 0)
1 >>>                Application->MessageBox("please run the model first", "Warning", MB_OK);
1 >>>    return;
1 >>>}
0 >>>else
0 >>>    for(int Indx = 0; Indx < SeriesCnt; Indx++)
0 >>>        if(cdSeries[Indx]->Title == ListBox3->Items->Strings[ii])
0 >>>            long stop = cdSeries[Indx]->Count();
0 >>>for (int iii = 0; iii < stop; iii++)
0 >>>    cdSeries[Indx]->YValue[iii] = fabs(cdSeries[Indx]->YValue[iii]);
0 >>>break;
0 >>>}//raf835:end void __fastcall TMain::AbsListBox3Click(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::AbsListBox3Click(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::AbsListBox3Click(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::AbsListBox3Click(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::AbsListBox3Click(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::AbsListBox3Click(TObject *Sender)
0 >>>else
0 >>>    MessageBeep(0);
0 >>>}//raf835:end void __fastcall TMain::AbsListBox3Click(TObject *Sender)
0 >>>void __fastcall TMain::ListBox4RemoveFuncts(TObject *Sender, String Svar)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 67 @ void __fastcall TMain::ListBox4RemoveFuncts(TObject *Sender, String Svar)\n");  fclose(stdout);
1 >>>    cout << "signature# 69 @ void __fastcall TMain::ListBox4RemoveFuncts(TObject *Sender, String Svar)";
1 >>>    for(long ii = 0; ii < ListBox4->Items->Count; ++ii)
1 >>>        long Indx = ListBox4->Items->Strings[ii].Pos(Svar); 
1 >>>    if(Indx > 0)
1 >>>        TLineSeries *cdSeries = (TLineSeries *) ListBox4->Items->Objects[ii];
1 >>>    if(cdSeries)
1 >>>        cdSeries->ParentChart = NULL;
1 >>>    cdSeries->Clear();
1 >>>}
0 >>>ListBox4->Items->Delete(ii);  
0 >>>}//raf835:end void __fastcall TMain::ListBox4RemoveFuncts(TObject *Sender, String Svar)
0 >>>}//raf835:end void __fastcall TMain::ListBox4RemoveFuncts(TObject *Sender, String Svar)
0 >>>}//raf835:end void __fastcall TMain::ListBox4RemoveFuncts(TObject *Sender, String Svar)
0 >>>void __fastcall TMain::DeleteListBox4Click(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 68 @ void __fastcall TMain::DeleteListBox4Click(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 70 @ void __fastcall TMain::DeleteListBox4Click(TObject *Sender)";
1 >>>    TComponent *pComponent = PopupListBox4->PopupComponent;
1 >>>    if(pComponent)
1 >>>        if(pComponent->ClassNameIs("TListBox") && pComponent->Name == "ListBox4")
1 >>>            int StartCnt = ListBox4->Items->Count;
1 >>>    for(long ii = StartCnt-1; ii >= 0; --ii)
1 >>>        if(ListBox4->Selected[ii])
1 >>>            TLineSeries *cdSeries = (TLineSeries *) ListBox4->Items->Objects[ii];
1 >>>    ClassVar* thisVar =  (ClassVar *) cdSeries->Tag;
1 >>>    if(thisVar)  
1 >>>    {
2 >>>        thisVar->TchrtOpt = cdSeries->VertAxis == aRightAxis;
2 >>>        if(thisVar->FunKind > CRHM::FOBS)  
2 >>>        {
3 >>>            if(thisVar->FileData)
3 >>>                delete thisVar->FileData;
3 >>>            thisVar->FileData = NULL;
3 >>>            delete thisVar;
3 >>>        }
2 >>>    }
1 >>>    cdSeries->ParentChart = NULL;
1 >>>    cdSeries->Clear();
1 >>>    ListBox4->Items->Delete(ii);  
1 >>>}
0 >>>}//raf835:end void __fastcall TMain::DeleteListBox4Click(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::DeleteListBox4Click(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::DeleteListBox4Click(TObject *Sender)
0 >>>else
0 >>>    MessageBeep(0);
0 >>>}//raf835:end void __fastcall TMain::DeleteListBox4Click(TObject *Sender)
0 >>>void __fastcall TMain::NegateListBox4Click(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 69 @ void __fastcall TMain::NegateListBox4Click(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 71 @ void __fastcall TMain::NegateListBox4Click(TObject *Sender)";
1 >>>    TComponent *pComponent = PopupListBox4->PopupComponent;
1 >>>    if(pComponent)
1 >>>        if(pComponent->ClassNameIs("TListBox") && pComponent->Name == "ListBox4")
1 >>>            int StartCnt = ListBox4->Items->Count;
1 >>>    for(int ii = StartCnt-1; ii >= 0; --ii)
1 >>>        if(ListBox4->Selected[ii])
1 >>>            TLineSeries *Series = (TLineSeries *) ListBox4->Items->Objects[ii];
1 >>>    long stop = Series->Count();
1 >>>    for (int iii = 0; iii < stop; iii++)
1 >>>        Series->YValue[iii] = -1*Series->YValue[iii];
1 >>>}
0 >>>}//raf835:end void __fastcall TMain::NegateListBox4Click(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::NegateListBox4Click(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::NegateListBox4Click(TObject *Sender)
0 >>>else
0 >>>    MessageBeep(0);
0 >>>}//raf835:end void __fastcall TMain::NegateListBox4Click(TObject *Sender)
0 >>>void __fastcall TMain::AddListBox1Click(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 70 @ void __fastcall TMain::AddListBox1Click(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 72 @ void __fastcall TMain::AddListBox1Click(TObject *Sender)";
1 >>>    TComponent *pComponent = PopupListBox1->PopupComponent;
1 >>>    if(pComponent)
1 >>>        if(pComponent->ClassNameIs("TListBox") && pComponent->Name == "ListBox1")
1 >>>            int StartCnt = ListBox1->Items->Count;
1 >>>    for(int ii = 0; ii < StartCnt; ++ii)
1 >>>        if(ListBox1->Selected[ii])
1 >>>            if(ListBox1->Items->Strings[ii][1] == ' ')
1 >>>                continue;
1 >>>    ClassVar *thisVar =  (ClassVar *) ListBox1->Items->Objects[ii];
1 >>>    if(thisVar->dimen == CRHM::BASIN && UpDownHRUIndx->Position > 1 ||
1 >>>            UpDownHRUIndx->Position > thisVar->dim || !thisVar->values && !thisVar->ivalues)
1 >>>        return;
1 >>>    String S = BuildHru(ListBox1->Items->Strings[ii], UpDownHRUIndx->Position, thisVar->dimen);
1 >>>    if(UpDownOBSIndx->Position > 0)
1 >>>        if(!thisVar->values && !thisVar->ivalues) return;
1 >>>    if(thisVar->lay == 0)
1 >>>        UpDownOBSIndx->Position = 1;
1 >>>    LabelOBSIndx->Caption = "LAY 1";
1 >>>    UpDownOBSIndx->Refresh();
1 >>>}
0 >>>else
0 >>>    S = BuildLay(S, UpDownOBSIndx->Position);
0 >>>}//raf835:end void __fastcall TMain::AddListBox1Click(TObject *Sender)
0 >>>int indx = IndexOf(ListBox3, S);
0 >>>if(indx == -1) ListBox3->Items->AddObject(S, ListBox1->Items->Objects[ii]);
0 >>>}//raf835:end void __fastcall TMain::AddListBox1Click(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::AddListBox1Click(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::AddListBox1Click(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::AddListBox1Click(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::AddListBox1Click(TObject *Sender)
0 >>>void __fastcall TMain::ListBox1Click(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 71 @ void __fastcall TMain::ListBox1Click(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 73 @ void __fastcall TMain::ListBox1Click(TObject *Sender)";
1 >>>    if(LabelOBSIndx->Caption[1] != 'L')
1 >>>        UpDownOBSIndx->Max = Global::maxlay;
1 >>>    UpDownOBSIndx->Position = 1;
1 >>>    LabelOBSIndx->Caption = "LAY 1";
1 >>>    LabelOBSIndx->Refresh();
1 >>>}
0 >>>long Showing = ListBox1->ItemIndex;
0 >>>if(Showing > -1)
0 >>>    if(ListBox1->Items->Strings[Showing][1] == ' ')
0 >>>        LabelVar->Caption = "Module description";
0 >>>ClassModule* thisModule = (ClassModule*) ListBox1->Items->Objects[Showing];
0 >>>if(thisModule)
0 >>>    StatusBar1->Panels->Items[2]->Text = thisModule->Description;
0 >>>else
0 >>>    StatusBar1->Panels->Items[2]->Text = "";
0 >>>return;
0 >>>}//raf835:end void __fastcall TMain::ListBox1Click(TObject *Sender)
0 >>>LabelVar->Caption = "Variable help";
0 >>>ClassVar *thisVar =  (ClassVar *) ListBox1->Items->Objects[Showing];
0 >>>StatusBar1->Panels->Items[2]->Text = string(thisVar->help +"    units: " + thisVar->units).c_str();
0 >>>Chart->Axes->Items[2]->Title->Caption = thisVar->units.c_str();
0 >>>if(thisVar->lay <= 1)
0 >>>    UpDownOBSIndx->Position = 1;
0 >>>LabelOBSIndx->Caption = "LAY 1";
0 >>>UpDownOBSIndx->Position = 0;
0 >>>UpDownOBSIndx->Refresh();
0 >>>}//raf835:end void __fastcall TMain::ListBox1Click(TObject *Sender)
0 >>>else if(thisVar->lay > UpDownOBSIndx->Max)
0 >>>    UpDownOBSIndx->Max = thisVar->lay;
0 >>>if(UpDownOBSIndx->Position > thisVar->lay)
0 >>>    UpDownOBSIndx->Position = 1;
0 >>>LabelOBSIndx->Caption = LabelOBSIndx->Caption.SubString(1,4) + String(UpDownOBSIndx->Position);
0 >>>LabelOBSIndx->Refresh();
0 >>>}//raf835:end void __fastcall TMain::ListBox1Click(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::ListBox1Click(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::ListBox1Click(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::ListBox1Click(TObject *Sender)
0 >>>void __fastcall TMain::AddListBox2Click(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 72 @ void __fastcall TMain::AddListBox2Click(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 74 @ void __fastcall TMain::AddListBox2Click(TObject *Sender)";
1 >>>    TComponent *pComponent = PopupListBox2->PopupComponent;
1 >>>    if(pComponent)
1 >>>        if((pComponent->ClassNameIs("TListBox") && pComponent->Name == "ListBox2")
1 >>>                || (pComponent->ClassNameIs("TLabel") && pComponent->Name == "LabelFunct"))
1 >>>            int StartCnt = ListBox2->Items->Count;
1 >>>    for(int ii = 0; ii < StartCnt; ++ii)
1 >>>        if(ListBox2->Selected[ii])
1 >>>            int Indx = UpDownOBSIndx->Position;
1 >>>    int IndxMax = ((ClassVar *) ListBox2->Items->Objects[ii])->cnt;
1 >>>    if(Indx > IndxMax) Indx = IndxMax;
1 >>>    String S = ListBox2->Items->Strings[ii] +
1 >>>               "(" + String(Indx) + ")" + Sstrings[Funct];
1 >>>    int iii = IndexOf(ListBox4, S);
1 >>>    if(iii == -1)
1 >>>        TLineSeries *cdSeries;
1 >>>    if(((ClassVar *) ListBox2->Items->Objects[ii])->FileData->Times == NULL)
1 >>>        cdSeries = new TLineSeries(this);
1 >>>    else
1 >>>        cdSeries = (TLineSeries *) new TPointSeries(this);
1 >>>    ClassVar* thisVar = (ClassVar*) ListBox2->Items->Objects[ii];
1 >>>    cdSeries->Tag = (int) thisVar; 
1 >>>    cdSeries->VertAxis = (TVertAxis) thisVar->TchrtOpt;
1 >>>    cdSeries->XValues->DateTime = TRUE;
1 >>>    CurrentColor = colours[ii % ncolours];
1 >>>    cdSeries->Color = CurrentColor;
1 >>>    cdSeries->ParentChart = Chart;
1 >>>    cdSeries->Title = S;
1 >>>    ListBox4->Items->AddObject(S, (TObject *) cdSeries);
1 >>>    AddObsPlot(Sender, (ClassVar *) ListBox2->Items->Objects[ii], cdSeries, S, Funct);
1 >>>} 
0 >>>}//raf835:end void __fastcall TMain::AddListBox2Click(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::AddListBox2Click(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::AddListBox2Click(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::AddListBox2Click(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::AddListBox2Click(TObject *Sender)
0 >>>void __fastcall TMain::ListBox2Click(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 73 @ void __fastcall TMain::ListBox2Click(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 75 @ void __fastcall TMain::ListBox2Click(TObject *Sender)";
1 >>>    if(LabelOBSIndx->Caption[1] != 'O')
1 >>>        UpDownOBSIndx->Max = Global::maxobs;
1 >>>    UpDownOBSIndx->Position = 1;
1 >>>    LabelOBSIndx->Caption = "OBS 1";
1 >>>    LabelOBSIndx->Refresh();
1 >>>}
0 >>>long Showing = ListBox2->ItemIndex;
0 >>>if(Showing > -1)
0 >>>    ClassVar *thisVar =  (ClassVar *) ListBox2->Items->Objects[Showing];
0 >>>StatusBar1->Panels->Items[1]->Text = string(thisVar->help +
0 >>>                                     "  units: " +  thisVar->units +
0 >>>                                     "  File: " + thisVar->FileData->DataFileName).c_str();
0 >>>Chart->Axes->Items[2]->Title->Caption = thisVar->units.c_str();
0 >>>LabelFunct->Caption = FStrings[Funct];
0 >>>}//raf835:end void __fastcall TMain::ListBox2Click(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::ListBox2Click(TObject *Sender)
0 >>>void __fastcall TMain::FunctionListBox2Click(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 74 @ void __fastcall TMain::FunctionListBox2Click(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 76 @ void __fastcall TMain::FunctionListBox2Click(TObject *Sender)";
1 >>>    CoolBar1->Show(); 
1 >>>}
0 >>>void __fastcall TMain::LabelFunctClick(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 75 @ void __fastcall TMain::LabelFunctClick(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 77 @ void __fastcall TMain::LabelFunctClick(TObject *Sender)";
1 >>>    if(Funct >= CRHM::DLTA)
1 >>>        Funct = CRHM::FOBS;
1 >>>    else
1 >>>        Funct = (TFun) (Funct + 1);
1 >>>    LabelFunct->Caption = FStrings[Funct];
1 >>>}
0 >>>void __fastcall TMain::FormClick(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 76 @ void __fastcall TMain::FormClick(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 78 @ void __fastcall TMain::FormClick(TObject *Sender)";
1 >>>    if(Global::BuildFlag != CRHM::RUN)
1 >>>        return;
1 >>>    PlotControl->ShowModal();
1 >>>    if(!PlotControl->IntervalControl)  
1 >>>    {
2 >>>        RefreshTime = 0;
2 >>>        SetCaptureControl(Main);
2 >>>    }
1 >>>}
0 >>>void __fastcall TMain::OpenHelp(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 77 @ void __fastcall TMain::OpenHelp(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 79 @ void __fastcall TMain::OpenHelp(TObject *Sender)";
1 >>>    TMenuItem *thisMenu = (TMenuItem *) Sender;
1 >>>    String Name;
1 >>>    String as = thisMenu->Caption;
1 >>>    if(as.Pos(".") > 0) as = as.SubString(1, as.Length()-4);
1 >>>    as += ".chm";
1 >>>    switch (thisMenu->Tag)
1 >>>    case 1: 
1 >>>case 2: 
1 >>>    Name = ProjectDir + as;
1 >>>    if(!FileExistsSp(Name))  
1 >>>        Name = ApplicationDir + as;
1 >>>    break;
1 >>>default: 
1 >>>    if(thisMenu->Tag > 3)
1 >>>        TMenuItem *ObsItem = MainMenu1->Items->Items[1];
1 >>>    int ii = thisMenu->Tag;
1 >>>    String path = ObsItem->Items[ii]->Caption;
1 >>>    path = path.Delete(1, path.Pos(" "));
1 >>>    path = ExtractFilePath(AnsiReplaceStr(path, "/", "\\")); 
1 >>>    Name =  path + as;
1 >>>}
0 >>>else
0 >>>    int ii = labs(thisMenu->Tag)-1;
0 >>>String path = OpenDLLs->Strings[ii-InitModCnt];
0 >>>path = ExtractFilePath(AnsiReplaceStr(path, "/", "\\")); 
0 >>>Name = path + as;
0 >>>}//raf835:end void __fastcall TMain::OpenHelp(TObject *Sender)
0 >>>break;
0 >>>}//raf835:end void __fastcall TMain::OpenHelp(TObject *Sender)
0 >>>FindFileName(Name);
0 >>>HtmlHelp(0, Name.c_str(), HH_DISPLAY_TOPIC, NULL); 
0 >>>}//raf835:end void __fastcall TMain::OpenHelp(TObject *Sender)
0 >>>void __fastcall TMain::DoObsStatus(TObject *Sender, bool &First)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 78 @ void __fastcall TMain::DoObsStatus(TObject *Sender, bool &First)\n");  fclose(stdout);
1 >>>    cout << "signature# 80 @ void __fastcall TMain::DoObsStatus(TObject *Sender, bool &First)";
1 >>>    if(First)
1 >>>        for(int ii = 0; ii < ObsFilesList->Count; ii++)
1 >>>            ClassData * FileData = (ClassData *) ObsFilesList->Objects[ii];
1 >>>    FileData->TimeIndx = 0;
1 >>>}
0 >>>First = false;
0 >>>}//raf835:end void __fastcall TMain::DoObsStatus(TObject *Sender, bool &First)
0 >>>for(int ii = 0; ii < ObsFilesList->Count; ii++)
0 >>>    ClassData * FileData = (ClassData *) ObsFilesList->Objects[ii];
0 >>>FileData->GoodInterval = true;
0 >>>if(ii == 0)    
0 >>>{
1 >>>    FileData->GoodDay = true;
1 >>>    continue;
1 >>>}
0 >>>FileData->GoodInterval = true;
0 >>>if(FileData->Times != NULL)   
0 >>>{
1 >>>    FileData->GoodDay = false;
1 >>>    while (FileData->Times[FileData->TimeIndx] < Global::DTnow
1 >>>            && FileData->TimeIndx < FileData->Lines-1)
1 >>>        ++FileData->TimeIndx;
1 >>>    if(FileData->Times[FileData->TimeIndx] != Global::DTnow)
1 >>>        FileData->GoodInterval = false;
1 >>>}
0 >>>else   
0 >>>{
1 >>>    long Index = Global::DTindx*FileData->Freq/Global::Freq;
1 >>>    if(Index < FileData->IndxMin || Index > FileData->IndxMax)
1 >>>        FileData->GoodInterval = false;
1 >>>    FileData->GoodDay = false;
1 >>>    continue;
1 >>>}
0 >>>if(Index%FileData->Freq == 0)  
0 >>>{
1 >>>    FileData->GoodDay = true;
1 >>>    if(FileData->Freq <= 1) continue; 
1 >>>    Index+= Global::Freq -1; 
1 >>>    if(Index < FileData->IndxMin || Index > FileData->IndxMax)
1 >>>        FileData->GoodDay = false;
1 >>>    continue;
1 >>>}
0 >>>continue;
0 >>>}//raf835:end void __fastcall TMain::DoObsStatus(TObject *Sender, bool &First)
0 >>>else   
0 >>>{
1 >>>    if(FileData->GoodDay)
1 >>>        FileData->GoodInterval = true;
1 >>>    else if(Index < FileData->IndxMin || Index > FileData->IndxMax)
1 >>>        FileData->GoodInterval = false;
1 >>>}
0 >>>}//raf835:end void __fastcall TMain::DoObsStatus(TObject *Sender, bool &First)
0 >>>}//raf835:end void __fastcall TMain::DoObsStatus(TObject *Sender, bool &First)
0 >>>}//raf835:end void __fastcall TMain::DoObsStatus(TObject *Sender, bool &First)
0 >>>void __fastcall TMain::HRUsAddListBox1Click(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 79 @ void __fastcall TMain::HRUsAddListBox1Click(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 81 @ void __fastcall TMain::HRUsAddListBox1Click(TObject *Sender)";
1 >>>    TComponent *pComponent = PopupListBox1->PopupComponent;
1 >>>    if(pComponent)
1 >>>        if(pComponent->ClassNameIs("TListBox") && pComponent->Name == "ListBox1")
1 >>>            int StartCnt = ListBox1->Items->Count;
1 >>>    for(int ii = 0; ii < StartCnt; ++ii)
1 >>>        if(ListBox1->Selected[ii])
1 >>>            if(ListBox1->Items->Strings[ii][1] == ' ')
1 >>>                continue;
1 >>>    for(int hh = UpDownHRUIndx->Position; /*hh < UpDownHRUIndx->Max+1*/; ++hh)
1 >>>        ClassVar *thisVar =  (ClassVar *) ListBox1->Items->Objects[ii];
1 >>>    if(thisVar->dimen == CRHM::BASIN && hh > 1 || hh > thisVar->dim || !thisVar->values && !thisVar->ivalues)
1 >>>        break;
1 >>>    String S = BuildHru(ListBox1->Items->Strings[ii], hh, thisVar->dimen);
1 >>>    if(UpDownOBSIndx->Position > 0)
1 >>>        if(thisVar->lay == 0)
1 >>>            UpDownOBSIndx->Position = 1;
1 >>>    LabelOBSIndx->Caption = "LAY 1";
1 >>>    UpDownOBSIndx->Refresh();
1 >>>}
0 >>>else
0 >>>    S = BuildLay(S, UpDownOBSIndx->Position);
0 >>>}//raf835:end void __fastcall TMain::HRUsAddListBox1Click(TObject *Sender)
0 >>>int indx = IndexOf(ListBox3, S);
0 >>>if(indx == -1) ListBox3->Items->AddObject(S, ListBox1->Items->Objects[ii]);
0 >>>}//raf835:end void __fastcall TMain::HRUsAddListBox1Click(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::HRUsAddListBox1Click(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::HRUsAddListBox1Click(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::HRUsAddListBox1Click(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::HRUsAddListBox1Click(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::HRUsAddListBox1Click(TObject *Sender)
0 >>>void __fastcall TMain::LAYsAddListBox1Click(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 80 @ void __fastcall TMain::LAYsAddListBox1Click(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 82 @ void __fastcall TMain::LAYsAddListBox1Click(TObject *Sender)";
1 >>>    TComponent *pComponent = PopupListBox1->PopupComponent;
1 >>>    if(pComponent)
1 >>>        if(pComponent->ClassNameIs("TListBox") && pComponent->Name == "ListBox1")
1 >>>            int StartCnt = ListBox1->Items->Count;
1 >>>    for(int ii = 0; ii < StartCnt; ++ii)
1 >>>        if(ListBox1->Selected[ii])
1 >>>            if(ListBox1->Items->Strings[ii][1] == ' ')
1 >>>                continue;
1 >>>    ClassVar *thisVar =  (ClassVar *) ListBox1->Items->Objects[ii];
1 >>>    if(thisVar->dimen == CRHM::BASIN && UpDownHRUIndx->Position > 1 ||
1 >>>            UpDownHRUIndx->Position > thisVar->dim || !thisVar->values && !thisVar->ivalues)
1 >>>        return;
1 >>>    String S = BuildHru(ListBox1->Items->Strings[ii], UpDownHRUIndx->Position, thisVar->dimen);
1 >>>    if(UpDownOBSIndx->Position > 0)
1 >>>        if(thisVar->lay == 0)
1 >>>            UpDownOBSIndx->Position = 1;
1 >>>    LabelOBSIndx->Caption = "LAY 1";
1 >>>    UpDownOBSIndx->Refresh();
1 >>>    int indx = IndexOf(ListBox3, S);
1 >>>    if(indx == -1) ListBox3->Items->AddObject(S, ListBox1->Items->Objects[ii]);
1 >>>}
0 >>>else
0 >>>    long lls = UpDownOBSIndx->Position;
0 >>>long lle = thisVar->lay+1;
0 >>>if(ShiftDown)
0 >>>    lls = 1;
0 >>>lle = UpDownOBSIndx->Position+1;
0 >>>}//raf835:end void __fastcall TMain::LAYsAddListBox1Click(TObject *Sender)
0 >>>for(long ll = lls; ll < lle; ++ll)
0 >>>    String S2 = BuildLay(S, ll);
0 >>>int indx = IndexOf(ListBox3, S2);
0 >>>if(indx == -1) ListBox3->Items->AddObject(S2, ListBox1->Items->Objects[ii]);
0 >>>}//raf835:end void __fastcall TMain::LAYsAddListBox1Click(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::LAYsAddListBox1Click(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::LAYsAddListBox1Click(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::LAYsAddListBox1Click(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::LAYsAddListBox1Click(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::LAYsAddListBox1Click(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::LAYsAddListBox1Click(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::LAYsAddListBox1Click(TObject *Sender)
0 >>>void __fastcall TMain::HRUsLAYsAddListBox1Click(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 81 @ void __fastcall TMain::HRUsLAYsAddListBox1Click(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 83 @ void __fastcall TMain::HRUsLAYsAddListBox1Click(TObject *Sender)";
1 >>>    TComponent *pComponent = PopupListBox1->PopupComponent;
1 >>>    if(pComponent)
1 >>>        if(pComponent->ClassNameIs("TListBox") && pComponent->Name == "ListBox1")
1 >>>            int StartCnt = ListBox1->Items->Count;
1 >>>    for(int ii = 0; ii < StartCnt; ++ii)
1 >>>        if(ListBox1->Selected[ii])
1 >>>            if(ListBox1->Items->Strings[ii][1] == ' ')
1 >>>                continue;
1 >>>    for(int hh = UpDownHRUIndx->Position; hh < UpDownHRUIndx->Max+1; ++hh)
1 >>>        ClassVar *thisVar =  (ClassVar *) ListBox1->Items->Objects[ii];
1 >>>    if(thisVar->dimen == CRHM::BASIN && hh > 1 || hh > thisVar->dim || !thisVar->values && !thisVar->ivalues)
1 >>>        break;
1 >>>    String S = BuildHru(ListBox1->Items->Strings[ii], hh, thisVar->dimen);
1 >>>    if(UpDownOBSIndx->Position > 0)
1 >>>        if(thisVar->lay == 0)
1 >>>            UpDownOBSIndx->Position = 1;
1 >>>    LabelOBSIndx->Caption = "LAY 1";
1 >>>    UpDownOBSIndx->Refresh();
1 >>>    int indx = IndexOf(ListBox3, S);
1 >>>    if(indx == -1) ListBox3->Items->AddObject(S, ListBox1->Items->Objects[ii]);
1 >>>}
0 >>>else
0 >>>    long lls = UpDownOBSIndx->Position;
0 >>>long lle = thisVar->lay+1;
0 >>>if(ShiftDown)
0 >>>    lls = 1;
0 >>>lle = UpDownOBSIndx->Position+1;
0 >>>}//raf835:end void __fastcall TMain::HRUsLAYsAddListBox1Click(TObject *Sender)
0 >>>for(long ll = lls; ll < lle; ++ll)
0 >>>    String S2 = BuildLay(S, ll);
0 >>>int indx = IndexOf(ListBox3, S2);
0 >>>if(indx == -1) ListBox3->Items->AddObject(S2, ListBox1->Items->Objects[ii]);
0 >>>}//raf835:end void __fastcall TMain::HRUsLAYsAddListBox1Click(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::HRUsLAYsAddListBox1Click(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::HRUsLAYsAddListBox1Click(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::HRUsLAYsAddListBox1Click(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::HRUsLAYsAddListBox1Click(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::HRUsLAYsAddListBox1Click(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::HRUsLAYsAddListBox1Click(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::HRUsLAYsAddListBox1Click(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::HRUsLAYsAddListBox1Click(TObject *Sender)
0 >>>void __fastcall TMain::ResetPickers(void)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 82 @ void __fastcall TMain::ResetPickers(void)\n");  fclose(stdout);
1 >>>    cout << "signature# 84 @ void __fastcall TMain::ResetPickers(void)";
1 >>>    DateTimePicker1->MinDate = -80000;
1 >>>    DateTimePicker1->MaxDate =  80000;
1 >>>    DateTimePicker2->MinDate = -80000;
1 >>>    DateTimePicker2->MaxDate =  80000;
1 >>>    Global::DTstart = 0; 
1 >>>    Global::DTend = 0; 
1 >>>}
0 >>>bool __fastcall TMain::AppHelp(WORD Command, int Data, bool &CallHelp)
0 >>>{
1 >>>    cout << "signature# 85 @ bool __fastcall TMain::AppHelp(WORD Command, int Data, bool &CallHelp)";
1 >>>    if(Command == HELP_CONTEXT || Command == HELP_CONTEXTPOPUP)
1 >>>        String Name = ApplicationDir + "crhm.chm";
1 >>>    FindFileName(Name);
1 >>>    HtmlHelp(NULL, Name.c_str(), HH_HELP_CONTEXT, Data);  
1 >>>    CallHelp = false; 
1 >>>    return true;
1 >>>}
0 >>>else
0 >>>    CallHelp = true; 
0 >>>return false;
0 >>>}//raf835:end void __fastcall TMain::ResetPickers(void)
0 >>>}//raf835:end void __fastcall TMain::ResetPickers(void)
0 >>>void __fastcall TMain::FlipTicMouseDown(TObject *Sender,
0 >>>                                        TMouseButton Button, TShiftState Shift, int X, int Y)
0 >>>{
1 >>>    cout << "signature# 86 @ TMouseButton Button, TShiftState Shift, int X, int Y)";
1 >>>    bool flip;
1 >>>    if(Shift.Contains(ssLeft))
1 >>>        if(!SeriesCnt)
1 >>>            return;
1 >>>    if(Shift.Contains(ssCtrl))
1 >>>        flip = !cdSeries[0]->Visible;
1 >>>    for (int ii = 0; ii < SeriesCnt; ii ++)
1 >>>        cdSeries[ii]->Visible = flip;
1 >>>}
0 >>>else
0 >>>    for (int ii = 0; ii < SeriesCnt; ii ++)
0 >>>        cdSeries[ii]->Visible = !cdSeries[ii]->Visible;
0 >>>}//raf835:end void __fastcall TMain::ResetPickers(void)
0 >>>else
0 >>>    TLineSeries *cdSeries;
0 >>>if(!ListBox4->Items->Count)
0 >>>    return;
0 >>>if(Shift.Contains(ssCtrl))
0 >>>    cdSeries = (TLineSeries *) ListBox4->Items->Objects[0];
0 >>>flip = !cdSeries->Visible;
0 >>>for (int ii = 0; ii < ListBox4->Items->Count; ii ++)
0 >>>    cdSeries = (TLineSeries *) ListBox4->Items->Objects[ii];
0 >>>cdSeries->Visible = flip;
0 >>>}//raf835:end void __fastcall TMain::ResetPickers(void)
0 >>>}//raf835:end void __fastcall TMain::ResetPickers(void)
0 >>>else
0 >>>    for (int ii = 0; ii < ListBox4->Items->Count; ii ++)
0 >>>        cdSeries = (TLineSeries *) ListBox4->Items->Objects[ii];
0 >>>cdSeries->Visible = !cdSeries->Visible;
0 >>>}//raf835:end void __fastcall TMain::ResetPickers(void)
0 >>>}//raf835:end void __fastcall TMain::ResetPickers(void)
0 >>>}//raf835:end void __fastcall TMain::ResetPickers(void)
0 >>>void __fastcall TMain::Analysis1Click(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 83 @ void __fastcall TMain::Analysis1Click(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 87 @ void __fastcall TMain::Analysis1Click(TObject *Sender)";
1 >>>    Analysis->ShowModal();
1 >>>}
0 >>>void __fastcall TMain::FlowDiagramClick(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 84 @ void __fastcall TMain::FlowDiagramClick(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 88 @ void __fastcall TMain::FlowDiagramClick(TObject *Sender)";
1 >>>    FlowForm->SetTitle(Main->Text.SubString(53, Main->Text.Length()));
1 >>>    FlowForm->ShowModal();
1 >>>}
0 >>>String __fastcall TMain::ExtractHruLay(String S, long &Hru, long &Lay)
0 >>>{
1 >>>    cout << "signature# 89 @ String __fastcall TMain::ExtractHruLay(String S, long &Hru, long &Lay)";
1 >>>    long jj = S.LastDelimiter("(");
1 >>>    long jj1 = S.LastDelimiter(",");
1 >>>    long jj2 = S.LastDelimiter(")");
1 >>>    Lay = 0;
1 >>>    if(jj1 != 0)
1 >>>        Lay = (S.SubString(jj1+1, jj2-jj1-1)).ToInt();
1 >>>    else
1 >>>        jj1 = jj2;
1 >>>    if(!HruNames)
1 >>>        Hru = (S.SubString(jj+1, jj1-jj-1)).ToInt();
1 >>>}
0 >>>else
0 >>>    Hru = ListHruNames->IndexOf(S.SubString(jj+1, jj1-jj-1));
0 >>>if(Hru == -1) 
0 >>>    Hru = (S.SubString(jj+1, jj1-jj-1)).ToInt();
0 >>>else if(Hru == 0) ++Hru;
0 >>>}//raf835:end void __fastcall TMain::FlowDiagramClick(TObject *Sender)
0 >>>return S.SubString(1, jj-1);
0 >>>}//raf835:end void __fastcall TMain::FlowDiagramClick(TObject *Sender)
0 >>>String __fastcall TMain::ExtractHruLayFunct(String S, long &Hru, long &Lay, String &Funct, String &FullName)
0 >>>{
1 >>>    cout << "signature# 90 @ String __fastcall TMain::ExtractHruLayFunct(String S, long &Hru, long &Lay, String &Funct, String &FullName)";
1 >>>    long jj = S.LastDelimiter("(");
1 >>>    long jj1 = S.Pos(",");
1 >>>    long jj2 = S.LastDelimiter(")");
1 >>>    long jj3 = S.LastDelimiter("_");
1 >>>    long jj4 = S.LastDelimiter(")");
1 >>>    Lay = 0;
1 >>>    if(jj1 != 0)
1 >>>        Lay = (S.SubString(jj1+1, jj2-jj1-1)).ToInt();
1 >>>    else
1 >>>        jj1 = jj2;
1 >>>    if(!HruNames)
1 >>>        Hru = (S.SubString(jj+1, jj1-jj-1)).ToInt();
1 >>>    if(jj3 > jj2) 
1 >>>        Funct = S.SubString(jj4+1, S.Length());
1 >>>}
0 >>>else
0 >>>    Hru = ListHruNames->IndexOf(S.SubString(jj+1, jj1-jj-1));
0 >>>if(Hru == -1) 
0 >>>    Hru = (S.SubString(jj+1, jj1-jj-1)).ToInt();
0 >>>else if(Hru == 0) ++Hru;
0 >>>}//raf835:end void __fastcall TMain::FlowDiagramClick(TObject *Sender)
0 >>>FullName = S.SubString(1, jj2); 
0 >>>return S.SubString(1, jj-1); 
0 >>>}//raf835:end void __fastcall TMain::FlowDiagramClick(TObject *Sender)
0 >>>String __fastcall TMain::BuildHru(String S, long Hru, CRHM::TDim dimen)
0 >>>{
1 >>>    cout << "signature# 91 @ String __fastcall TMain::BuildHru(String S, long Hru, CRHM::TDim dimen)";
1 >>>    if(!HruNames)
1 >>>        return S  + "(" + String(Hru) + ")";
1 >>>    else
1 >>>        String SS;
1 >>>    if(dimen == CRHM::BASIN)
1 >>>        SS = "(" + ListHruNames->Strings[0] + ")";
1 >>>    else
1 >>>        SS = "(" + ListHruNames->Strings[Hru] + ")";
1 >>>    return S + SS;
1 >>>}
0 >>>}//raf835:end void __fastcall TMain::FlowDiagramClick(TObject *Sender)
0 >>>String __fastcall TMain::BuildLay(String S, long Lay)
0 >>>{
1 >>>    cout << "signature# 92 @ String __fastcall TMain::BuildLay(String S, long Lay)";
1 >>>    return S.SubString(1, S.Length()-1) + "," + String(Lay) + ")";
1 >>>}
0 >>>void __fastcall TMain::HruNameClick(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 85 @ void __fastcall TMain::HruNameClick(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 93 @ void __fastcall TMain::HruNameClick(TObject *Sender)";
1 >>>    MapPar::iterator itPar;
1 >>>    ClassPar *newPar;
1 >>>    long Hru, Lay;
1 >>>    ListBox3->Sorted = false;
1 >>>    if(!ListHruNames)
1 >>>        ListHruNames = new TStringList;
1 >>>    MapGrpNames = new MapstrSS;
1 >>>    if((itPar = Global::MapPars.find("basin basin_name")) != Global::MapPars.end())
1 >>>        newPar = (*itPar).second;
1 >>>    ListHruNames->Add(newPar->Strings->Strings[0]);
1 >>>}
0 >>>else
0 >>>    ListHruNames->Add("Basin");
0 >>>if((itPar = Global::MapPars.find("basin hru_names")) != Global::MapPars.end())
0 >>>    newPar = (*itPar).second;
0 >>>for(int ii = 0; ii < newPar->Strings->Count; ++ii)
0 >>>    ListHruNames->Add(newPar->Strings->Strings[ii]);
0 >>>}//raf835:end void __fastcall TMain::HruNameClick(TObject *Sender)
0 >>>else
0 >>>    for(int ii = 0; ii < Global::nhru; ++ii)
0 >>>        ListHruNames->Add("hru" + String(ii));
0 >>>}//raf835:end void __fastcall TMain::HruNameClick(TObject *Sender)
0 >>>for(int ii = 0; ii < Global::OurModulesList->Count; ++ii)
0 >>>    ClassModule* Mod = (ClassModule*) Global::OurModulesList->Objects[ii];
0 >>>String S = Global::OurModulesList->Strings[ii];
0 >>>if(Mod->GroupCnt > 0 || Mod->StructCnt > 0)
0 >>>    if(Mod->GroupCnt > 0)
0 >>>        string AA;
0 >>>GroupEnding(AA, Mod->GroupCnt);
0 >>>Pairstr Item = Pairstr(AA.c_str(), ('@' + Mod->Name).c_str());
0 >>>MapGrpNames->insert(Item);
0 >>>}//raf835:end void __fastcall TMain::HruNameClick(TObject *Sender)
0 >>>else if(Mod->StructCnt > 0)
0 >>>    string AA;
0 >>>GroupEnding(AA, Mod->GroupCnt);
0 >>>Pairstr Item = Pairstr(AA.c_str(), ('@' + Mod->Name).c_str());
0 >>>MapGrpNames->insert(Item);
0 >>>}//raf835:end void __fastcall TMain::HruNameClick(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::HruNameClick(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::HruNameClick(TObject *Sender)
0 >>>for(int ii = 0; ListBox3->Items->Count > ii; ++ii)
0 >>>    String S = ListBox3->Items->Strings[ii];
0 >>>ClassVar *thisVar =  (ClassVar *) ListBox3->Items->Objects[ii];
0 >>>HruNames = false;
0 >>>S = ExtractHruLay(S, Hru, Lay);
0 >>>HruNames = true;
0 >>>S = BuildHru(S, Hru, thisVar->dimen);
0 >>>if(Lay)
0 >>>    S = BuildLay(S, Lay);
0 >>>int Indx = S.Pos("@"); 
0 >>>if(Indx)
0 >>>    MapstrSS::iterator it;
0 >>>if((it = MapGrpNames->find(S.SubString(Indx, 2))) != MapGrpNames->end())
0 >>>    String NewName = (*it).second;
0 >>>S.Delete(Indx, 2);
0 >>>S.Insert(NewName, Indx);
0 >>>}//raf835:end void __fastcall TMain::HruNameClick(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::HruNameClick(TObject *Sender)
0 >>>ListBox3->Items->Strings[ii] = S;
0 >>>}//raf835:end void __fastcall TMain::HruNameClick(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::HruNameClick(TObject *Sender)
0 >>>else  
0 >>>{
1 >>>    for(int ii = 0; ListBox3->Items->Count > ii; ++ii)
1 >>>        String S = ListBox3->Items->Strings[ii];
1 >>>    HruNames = true;
1 >>>    S = ExtractHruLay(S, Hru, Lay);
1 >>>    HruNames = false;
1 >>>    S = BuildHru(S, Hru, CRHM::NHRU);  
1 >>>    if(Lay)
1 >>>        S = BuildLay(S, Lay);
1 >>>    int Indx = S.Pos("@");
1 >>>    if(Indx)  
1 >>>    {
2 >>>        MapstrSS::iterator it;
2 >>>        for (it = MapGrpNames->begin(); it !=  MapGrpNames->end(); ++it)
2 >>>            int pos = S.Pos((*it).second);
2 >>>        if(pos)  
2 >>>        {
3 >>>            String NewName = (*it).first;
3 >>>            String Name = (*it).second;
3 >>>            int Len = Name.Length();
3 >>>            int End = S.Pos("(");
3 >>>            if(End-pos == Len)  
3 >>>            {
4 >>>                S.Delete(pos, Len);
4 >>>                S.Insert(NewName, pos);
4 >>>                break;
4 >>>            }
3 >>>        }
2 >>>    }
1 >>>}
0 >>>ListBox3->Items->Strings[ii] = S;
0 >>>}//raf835:end void __fastcall TMain::HruNameClick(TObject *Sender)
0 >>>delete ListHruNames;
0 >>>ListHruNames = NULL;
0 >>>delete MapGrpNames;
0 >>>MapGrpNames = NULL;
0 >>>}//raf835:end void __fastcall TMain::HruNameClick(TObject *Sender)
0 >>>ListBox3->Sorted = false;
0 >>>}//raf835:end void __fastcall TMain::HruNameClick(TObject *Sender)
0 >>>String __fastcall TMain::HRUStdString(String S)  
0 >>>{
1 >>>    long Hru, Lay;
1 >>>    if(ListHruNames)
1 >>>        String SS = ExtractHruLay(S, Hru, Lay);
1 >>>    HruNames = false; 
1 >>>    S = BuildHru(SS, Hru, CRHM::NHRU);  
1 >>>    if(Lay)
1 >>>        S = BuildLay(S, Lay);
1 >>>    HruNames = true; 
1 >>>}
0 >>>return S;
0 >>>}//raf835:end void __fastcall TMain::HruNameClick(TObject *Sender)
0 >>>void __fastcall TMain::Last1Click(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 86 @ void __fastcall TMain::Last1Click(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 94 @ void __fastcall TMain::Last1Click(TObject *Sender)";
1 >>>    if(Last1->Checked)
1 >>>        Last1->Checked = false;
1 >>>    else
1 >>>        Last1->Checked = true;
1 >>>    All1->Checked = false;
1 >>>}
0 >>>}//raf835:end void __fastcall TMain::Last1Click(TObject *Sender)
0 >>>void __fastcall TMain::All1Click(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 87 @ void __fastcall TMain::All1Click(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 95 @ void __fastcall TMain::All1Click(TObject *Sender)";
1 >>>    if(All1->Checked)
1 >>>        All1->Checked = false;
1 >>>    else
1 >>>        All1->Checked = true;
1 >>>    Last1->Checked = false;
1 >>>}
0 >>>}//raf835:end void __fastcall TMain::All1Click(TObject *Sender)
0 >>>void __fastcall TMain::DebugScreen1Click(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 88 @ void __fastcall TMain::DebugScreen1Click(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 96 @ void __fastcall TMain::DebugScreen1Click(TObject *Sender)";
1 >>>    if(DebugScreen1->Checked)
1 >>>        DebugScreen1->Checked = false;
1 >>>    else
1 >>>        DebugScreen1->Checked = true;
1 >>>}
0 >>>void __fastcall TMain::Last1Rprt(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 89 @ void __fastcall TMain::Last1Rprt(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 97 @ void __fastcall TMain::Last1Rprt(TObject *Sender)";
1 >>>    TStringList *LogList = new TStringList;
1 >>>    String S, Sx, Sy;
1 >>>    ClassVar *thisVar;
1 >>>    Sx = "time";
1 >>>    Sy = "units";
1 >>>    for(int vv = 0; vv < SeriesCnt; ++vv)
1 >>>        S = cdSeries[vv]->Title;
1 >>>    Sx += "\t" + S;
1 >>>    thisVar =  (ClassVar *) cdSeries[vv]->Tag;
1 >>>    S = thisVar->units.c_str();
1 >>>    Sy += "\t" + S;
1 >>>}
0 >>>LogList->Add(Sx);
0 >>>LogList->Add(Sy);
0 >>>int nn = cdSeries[0]->Count();
0 >>>Sx = FloatToStrF(cdSeries[0]->XValue[nn-1], ffGeneral, 10, 0);
0 >>>for (int vv = 0; vv < SeriesCnt; ++vv)
0 >>>    thisVar =  (ClassVar *) cdSeries[vv]->Tag;
0 >>>int prec = 6;
0 >>>if(thisVar->varType == CRHM::Int || thisVar->varType == CRHM::ReadI)
0 >>>    prec = 4;
0 >>>Sy = FloatToStrF(cdSeries[vv]->YValue[nn-1], ffGeneral, prec, 0);
0 >>>Sx = Sx + "\t" + Sy;
0 >>>}//raf835:end void __fastcall TMain::Last1Rprt(TObject *Sender)
0 >>>LogList->Add(Sx);
0 >>>ClassPar *thisPar;
0 >>>thisPar = ParFind("basin RUN_ID");
0 >>>long ID = 0;
0 >>>if(!thisPar)
0 >>>    MapPar::iterator itPar;
0 >>>for (itPar = Global::MapPars.begin(); itPar !=  Global::MapPars.end(); itPar++)
0 >>>    thisPar = (*itPar).second;
0 >>>if(thisPar->param == "RUN_ID" && thisPar->ivalues[0] > 0)
0 >>>    ID = thisPar->ivalues[0];
0 >>>break;
0 >>>}//raf835:end void __fastcall TMain::Last1Rprt(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::Last1Rprt(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::Last1Rprt(TObject *Sender)
0 >>>else
0 >>>    ID = thisPar->ivalues[0];
0 >>>String FileName = "CRHM_output";
0 >>>if(ID > 0)
0 >>>    FileName += String("_") + ID;
0 >>>LogList->SaveToFile(OpenDialogPrj->InitialDir + "\\" + FileName + ".txt");
0 >>>LogList->Clear();
0 >>>}//raf835:end void __fastcall TMain::Last1Rprt(TObject *Sender)
0 >>>void __fastcall TMain::All1Rprt(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 90 @ void __fastcall TMain::All1Rprt(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 98 @ void __fastcall TMain::All1Rprt(TObject *Sender)";
1 >>>    TStringList *LogList = new TStringList;
1 >>>    String S, Sx, Sy;
1 >>>    ClassVar *thisVar;
1 >>>    TDateTime Dt;
1 >>>    Sx = "time";
1 >>>    Sy = "units";
1 >>>    for(int vv = 0; vv < SeriesCnt; ++vv)
1 >>>        S = cdSeries[vv]->Title;
1 >>>    Sx += "\t" + S;
1 >>>    thisVar =  (ClassVar *) cdSeries[vv]->Tag;
1 >>>    S = thisVar->units.c_str();
1 >>>    Sy += "\t" + S;
1 >>>}
0 >>>LogList->Add(Sx);
0 >>>LogList->Add(Sy);
0 >>>for(int nn = 0; nn < cdSeries[0]->Count(); ++nn)
0 >>>    switch (Global::TimeFormat)
0 >>>    case CRHM::MS:
0 >>>Sx = FloatToStrF(cdSeries[0]->XValue[nn], ffGeneral, 10, 0);
0 >>>break;
0 >>>case CRHM::MMDDYYYY:
0 >>>Dt = TDateTime (cdSeries[0]->XValue[nn]);
0 >>>Sx = FormatDateTime("mm/dd/yyyy hh:mm ", Dt);
0 >>>break;
0 >>>case CRHM::YYYYMMDD:
0 >>>Dt = TDateTime (cdSeries[0]->XValue[nn]);
0 >>>Sx = FormatDateTime("yyyy-mm-dd hh:mm ", Dt);
0 >>>break;
0 >>>}//raf835:end void __fastcall TMain::All1Rprt(TObject *Sender)
0 >>>for (int vv = 0; vv < SeriesCnt; ++vv)
0 >>>    if(cdSeries[0]->Count() == cdSeries[vv]->Count())  
0 >>>    {
1 >>>        ClassVar *thisVar =  (ClassVar *) cdSeries[vv]->Tag;
1 >>>        int prec = 6;
1 >>>        if(thisVar->varType == CRHM::Int || thisVar->varType == CRHM::ReadI)
1 >>>            prec = 4;
1 >>>        Sy = FloatToStrF(cdSeries[vv]->YValue[nn], ffGeneral, prec, 0);
1 >>>        Sx = Sx + "\t" + Sy;
1 >>>    }
0 >>>}//raf835:end void __fastcall TMain::All1Rprt(TObject *Sender)
0 >>>LogList->Add(Sx);
0 >>>}//raf835:end void __fastcall TMain::All1Rprt(TObject *Sender)
0 >>>ClassPar *thisPar;
0 >>>thisPar = ParFind("basin RUN_ID");
0 >>>long ID = 0;
0 >>>if(!thisPar)
0 >>>    MapPar::iterator itPar;
0 >>>for (itPar = Global::MapPars.begin(); itPar !=  Global::MapPars.end(); itPar++)
0 >>>    thisPar = (*itPar).second;
0 >>>if(thisPar->param == "RUN_ID" && thisPar->ivalues[0] > 0)
0 >>>    ID = thisPar->ivalues[0];
0 >>>break;
0 >>>}//raf835:end void __fastcall TMain::All1Rprt(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::All1Rprt(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::All1Rprt(TObject *Sender)
0 >>>else
0 >>>    ID = thisPar->ivalues[0];
0 >>>String FileName = "CRHM_output";
0 >>>if(ID > 0)
0 >>>    FileName += String("_") + ID;
0 >>>LogList->SaveToFile(OpenDialogPrj->InitialDir + "\\" + FileName + ".txt");
0 >>>LogList->Clear();
0 >>>}//raf835:end void __fastcall TMain::All1Rprt(TObject *Sender)
0 >>>void __fastcall TMain::DebugScreen1Rprt(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 91 @ void __fastcall TMain::DebugScreen1Rprt(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 99 @ void __fastcall TMain::DebugScreen1Rprt(TObject *Sender)";
1 >>>    ClassPar *thisPar;
1 >>>    thisPar = ParFind("basin RUN_ID");
1 >>>    long ID = 0;
1 >>>    if(!thisPar)
1 >>>        MapPar::iterator itPar;
1 >>>    for (itPar = Global::MapPars.begin(); itPar !=  Global::MapPars.end(); itPar++)
1 >>>        thisPar = (*itPar).second;
1 >>>    if(thisPar->param == "RUN_ID" && thisPar->ivalues[0] > 0)
1 >>>        ID = thisPar->ivalues[0];
1 >>>    break;
1 >>>}
0 >>>}//raf835:end void __fastcall TMain::DebugScreen1Rprt(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::DebugScreen1Rprt(TObject *Sender)
0 >>>else
0 >>>    ID = thisPar->ivalues[0];
0 >>>String FileName = "CRHM_output";
0 >>>if(ID > 0)
0 >>>    FileName += String("_") + ID;
0 >>>LogForm->MemoDebug->Lines->SaveToFile(OpenDialogPrj->InitialDir + "\\" + FileName + ".log");
0 >>>}//raf835:end void __fastcall TMain::DebugScreen1Rprt(TObject *Sender)
0 >>>void __fastcall TMain::AddArray1Click(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 92 @ void __fastcall TMain::AddArray1Click(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 100 @ void __fastcall TMain::AddArray1Click(TObject *Sender)";
1 >>>    TComponent *pComponent = PopupListBox2->PopupComponent;
1 >>>    if(pComponent)
1 >>>        if((pComponent->ClassNameIs("TListBox") && pComponent->Name == "ListBox2")
1 >>>                || (pComponent->ClassNameIs("TLabel") && pComponent->Name == "LabelFunct"))
1 >>>            int StartCnt = ListBox2->Items->Count;
1 >>>    for(int ii = 0; ii < StartCnt; ++ii)
1 >>>        if(ListBox2->Selected[ii])
1 >>>            int IndxMax = ((ClassVar *) ListBox2->Items->Objects[ii])->cnt;
1 >>>    for(int nn = UpDownOBSIndx->Position; nn < IndxMax+1; ++nn)
1 >>>        String S = ListBox2->Items->Strings[ii] +
1 >>>                   "(" + String(nn) + ")" + Sstrings[Funct];
1 >>>    int iii = IndexOf(ListBox4, S);
1 >>>    if(iii == -1)
1 >>>        TLineSeries *cdSeries;
1 >>>    if(((ClassVar *) ListBox2->Items->Objects[ii])->FileData->Times == NULL)
1 >>>        cdSeries = new TLineSeries(this);
1 >>>    else
1 >>>        cdSeries = (TLineSeries *) new TPointSeries(this);
1 >>>    ClassVar* thisVar = (ClassVar*) ListBox2->Items->Objects[ii];
1 >>>    cdSeries->Tag = (int) thisVar; 
1 >>>    cdSeries->VertAxis = (TVertAxis) thisVar->TchrtOpt;
1 >>>    cdSeries->XValues->DateTime = TRUE;
1 >>>    CurrentColor = colours[nn % ncolours];
1 >>>    cdSeries->Color = CurrentColor;
1 >>>    cdSeries->ParentChart = Chart;
1 >>>    cdSeries->Title = S;
1 >>>    ListBox4->Items->AddObject(S, (TObject *) cdSeries);
1 >>>    AddObsPlot(Sender, (ClassVar *) ListBox2->Items->Objects[ii], cdSeries, S, Funct);
1 >>>} 
0 >>>}//raf835:end void __fastcall TMain::AddArray1Click(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::AddArray1Click(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::AddArray1Click(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::AddArray1Click(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::AddArray1Click(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::AddArray1Click(TObject *Sender)
0 >>>void __fastcall TMain::PrjAutoExitClick(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 93 @ void __fastcall TMain::PrjAutoExitClick(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 101 @ void __fastcall TMain::PrjAutoExitClick(TObject *Sender)";
1 >>>    if(PrjAutoExit->Checked)
1 >>>        PrjAutoExit->Checked = false;
1 >>>    else
1 >>>        PrjAutoExit->Checked = true;
1 >>>}
0 >>>void __fastcall TMain::ParameterBackUp(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 94 @ void __fastcall TMain::ParameterBackUp(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 102 @ void __fastcall TMain::ParameterBackUp(TObject *Sender)";
1 >>>    MapPar::iterator itPar;
1 >>>    ClassPar *thisPar;
1 >>>    for(itPar = Global::MapPars.begin(); itPar != Global::MapPars.end(); ++itPar)
1 >>>        thisPar = (*itPar).second;
1 >>>    thisPar->BackUp(); 
1 >>>}
0 >>>}//raf835:end void __fastcall TMain::ParameterBackUp(TObject *Sender)
0 >>>void __fastcall TMain::ParameterRestore(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 95 @ void __fastcall TMain::ParameterRestore(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 103 @ void __fastcall TMain::ParameterRestore(TObject *Sender)";
1 >>>    MapPar::iterator itPar;
1 >>>    ClassPar *thisPar;
1 >>>    for(itPar = Global::MapPars.begin(); itPar != Global::MapPars.end(); ++itPar)
1 >>>        thisPar = (*itPar).second;
1 >>>    thisPar->Restore(); 
1 >>>}
0 >>>}//raf835:end void __fastcall TMain::ParameterRestore(TObject *Sender)
0 >>>void __fastcall TMain::VariableBackUp(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 96 @ void __fastcall TMain::VariableBackUp(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 104 @ void __fastcall TMain::VariableBackUp(TObject *Sender)";
1 >>>    MapVar::iterator itVar;
1 >>>    ClassVar *thisVar;
1 >>>    TempTime = Global::DTindx;
1 >>>    for(itVar = Global::MapVars.begin(); itVar != Global::MapVars.end(); ++itVar)
1 >>>        thisVar = (*itVar).second;
1 >>>    thisVar->BackUp(); 
1 >>>}
0 >>>}//raf835:end void __fastcall TMain::VariableBackUp(TObject *Sender)
0 >>>void __fastcall TMain::VariableRestore(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 97 @ void __fastcall TMain::VariableRestore(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 105 @ void __fastcall TMain::VariableRestore(TObject *Sender)";
1 >>>    MapVar::iterator itVar;
1 >>>    ClassVar *thisVar;
1 >>>    Global::DTindx = TempTime;
1 >>>    for(itVar = Global::MapVars.begin(); itVar != Global::MapVars.end(); ++itVar)
1 >>>        thisVar = (*itVar).second;
1 >>>    if(thisVar->name == "Julian_window")
1 >>>        continue;
1 >>>    if(thisVar->name == "Julian_lockout")
1 >>>        continue;
1 >>>    if(thisVar->name == "t0_Var")
1 >>>        continue;
1 >>>    if(thisVar->name == "t0_Acc")
1 >>>        continue;
1 >>>    if(thisVar->name == "t0_inhibit#")
1 >>>        continue;
1 >>>    thisVar->Restore(); 
1 >>>}
0 >>>}//raf835:end void __fastcall TMain::VariableRestore(TObject *Sender)
0 >>>ClassVar *VarFind(string name)
0 >>>{
1 >>>    cout << "signature# 106 @ ClassVar *VarFind(string name)";
1 >>>    MapVar::iterator itVar;
1 >>>    if((itVar = Global::MapVars.find(name)) == Global::MapVars.end())
1 >>>        return NULL;
1 >>>    else
1 >>>        return ((*itVar).second);
1 >>>}
0 >>>ClassPar *ParFind(string name)  
0 >>>{
1 >>>    MapPar::iterator itPar;
1 >>>    if((itPar = Global::MapPars.find(name)) != Global::MapPars.end())
1 >>>        return ((*itPar).second);
1 >>>    else
1 >>>        return NULL;
1 >>>}
0 >>>void __fastcall TMain::Macro1Click(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 98 @ void __fastcall TMain::Macro1Click(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 107 @ void __fastcall TMain::Macro1Click(TObject *Sender)";
1 >>>    if(FormEntry->ShowModal() == mrOk)
1 >>>        if(InitMacroCnt && InitModCnt)
1 >>>            --InitModCnt;
1 >>>    InitMacroCnt = 0;
1 >>>}
0 >>>ListBoxMacroClear(Sender); 
0 >>>AdminMacro.MacroClear();
0 >>>MacroLoad(Sender);
0 >>>AdminMacro.MacroUpdate();
0 >>>InitModules(Sender);
0 >>>}//raf835:end void __fastcall TMain::Macro1Click(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::Macro1Click(TObject *Sender)
0 >>>void __fastcall TMain::MacroLoad(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 99 @ void __fastcall TMain::MacroLoad(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 108 @ void __fastcall TMain::MacroLoad(TObject *Sender)";
1 >>>    Global::GroupCntTrk = 0;
1 >>>    Global::StructCntTrk = 0;
1 >>>    ClearModules(Sender, false);
1 >>>    if(Global::MacroModulesList->Count > 0)
1 >>>        int Macro = 0;
1 >>>    while (Macro < Global::MacroModulesList->Count)
1 >>>        string s(Global::MacroModulesList->Strings[Macro].c_str());
1 >>>    string::size_type ppp = s.find_last_not_of(' ');
1 >>>    if(s.empty() || ppp == string::npos || s[0] == '/')
1 >>>        ++Macro;
1 >>>    continue;
1 >>>}
0 >>>string Desc;
0 >>>string::size_type pp = s.find_first_of(" /");
0 >>>if(pp != string::npos)
0 >>>    Desc = s.substr(pp);
0 >>>s = s.substr(0, pp);
0 >>>pp = Desc.find_first_not_of(" /");
0 >>>Desc = Desc.substr(pp);
0 >>>Desc = '\'' + Desc + '\''; 
0 >>>}//raf835:end void __fastcall TMain::MacroLoad(TObject *Sender)
0 >>>else
0 >>>    Desc = "'no description given'"; 
0 >>>ClassMacro *Custom = new ClassMacro(s, Macro, "04/20/06", Desc);
0 >>>AdminMacro.AddModule(Custom);
0 >>>String S;
0 >>>while(S = Global::MacroModulesList->Strings[Macro].TrimLeft(), !(S.SubString(1,3) == "end" &&
0 >>>        (S.Length() == 3 || S.IsDelimiter(" /", 4))) && Macro < Global::MacroModulesList->Count)
0 >>>    ++Macro;
0 >>>++Macro;
0 >>>}//raf835:end void __fastcall TMain::MacroLoad(TObject *Sender)
0 >>>AdminMacro.LoadCRHM("Macro");
0 >>>AdminMacro.Accept(mrYesToAll);
0 >>>if(InitMacroCnt == 0)
0 >>>    InitMacroCnt = 1;
0 >>>++InitModCnt;
0 >>>}//raf835:end void __fastcall TMain::MacroLoad(TObject *Sender)
0 >>>UpDateModelMenu();
0 >>>if(SeriesCnt > 0)
0 >>>    for (int ii = 0; ii < SeriesCnt; ii ++)
0 >>>        cdSeries[ii]->ParentChart = NULL;
0 >>>cdSeries[ii]->Clear();
0 >>>}//raf835:end void __fastcall TMain::MacroLoad(TObject *Sender)
0 >>>SeriesCnt = 0;
0 >>>}//raf835:end void __fastcall TMain::MacroLoad(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::MacroLoad(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::MacroLoad(TObject *Sender)
0 >>>void __fastcall TMain::FormClose(TObject *Sender, TCloseAction &Action)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 100 @ void __fastcall TMain::FormClose(TObject *Sender, TCloseAction &Action)\n");  fclose(stdout);
1 >>>    PrjCloseClick(Sender);
1 >>>    if(cancel)
1 >>>        Action = caNone; 
1 >>>    else
1 >>>        HtmlHelp(0, NULL, HH_CLOSE_ALL, 0);
1 >>>    if(ListHruNames)
1 >>>        delete ListHruNames;
1 >>>    delete MapGrpNames;
1 >>>}
0 >>>}//raf835:end void __fastcall TMain::FormClose(TObject *Sender, TCloseAction &Action)
0 >>>}//raf835:end void __fastcall TMain::FormClose(TObject *Sender, TCloseAction &Action)
0 >>>void __fastcall TMain::AKA1Click(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 101 @ void __fastcall TMain::AKA1Click(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 109 @ void __fastcall TMain::AKA1Click(TObject *Sender)";
1 >>>    FormAKA->ShowModal();
1 >>>}
0 >>>bool __fastcall TMain::FindFileName(String &FileName)
0 >>>{
1 >>>    cout << "signature# 110 @ bool __fastcall TMain::FindFileName(String &FileName)";
1 >>>    String FilePart;
1 >>>    String ApplicationDir = ExtractFilePath(AnsiReplaceStr(Application->ExeName, "/", "\\")); 
1 >>>    String ProjectDir = ExtractFilePath(AnsiReplaceStr(OpenDialogPrj->FileName, "/", "\\")); 
1 >>>    if(FileExistsSp(FileName)) 
1 >>>        return true;
1 >>>    int Pos = FileName.LastDelimiter("\\/" );
1 >>>    if(Pos)
1 >>>        FilePart = FileName.SubString(Pos+1, FileName.Length());
1 >>>    if(FileExistsSp(FilePart))  
1 >>>    {
2 >>>        FileName = FilePart;
2 >>>        return true;
2 >>>    }
1 >>>}
0 >>>else
0 >>>    FilePart = FileName;
0 >>>String NewFileName = ProjectDir + FilePart;
0 >>>if(FileExistsSp(NewFileName))
0 >>>    FileName = NewFileName;
0 >>>return true;
0 >>>}//raf835:end void __fastcall TMain::AKA1Click(TObject *Sender)
0 >>>NewFileName = ApplicationDir + FilePart;
0 >>>if(FileExistsSp(NewFileName))
0 >>>    FileName = NewFileName;
0 >>>return true;
0 >>>}//raf835:end void __fastcall TMain::AKA1Click(TObject *Sender)
0 >>>return false;
0 >>>}//raf835:end void __fastcall TMain::AKA1Click(TObject *Sender)
0 >>>void __fastcall TMain::SaveChartTemplateClick(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 102 @ void __fastcall TMain::SaveChartTemplateClick(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 111 @ void __fastcall TMain::SaveChartTemplateClick(TObject *Sender)";
1 >>>    if(SaveChartTemplate->Checked)
1 >>>        SaveChartTemplate->Checked = false;
1 >>>    else
1 >>>        SaveChartTemplate->Checked = true;
1 >>>}
0 >>>void __fastcall TMain::UpdateOurModules(void)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 103 @ void __fastcall TMain::UpdateOurModules(void)\n");  fclose(stdout);
1 >>>    cout << "signature# 112 @ void __fastcall TMain::UpdateOurModules(void)";
1 >>>    for(int ii = 0; ii < Global::OurModulesList->Count; ii++)
1 >>>        int jj = Global::AllModulesList->IndexOf(Global::OurModulesList->Strings[ii]);
1 >>>    if(jj < 0)
1 >>>        CRHMException Except((Global::OurModulesList->Strings[ii] + " Module not defined in CRHM model").c_str(), ERR);
1 >>>    Global::OurModulesList->Clear();
1 >>>    Application->MessageBox(Except.Message.c_str(), "Missing module", MB_OK);
1 >>>    LogError(Except);
1 >>>}
0 >>>else
0 >>>    Global::OurModulesList->Objects[ii] = Global::AllModulesList->Objects[jj];
0 >>>}//raf835:end void __fastcall TMain::UpdateOurModules(void)
0 >>>}//raf835:end void __fastcall TMain::UpdateOurModules(void)
0 >>>long __fastcall TMain::IndexOf(TListBox *Box, const AnsiString S)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 104 @ long __fastcall TMain::IndexOf(TListBox *Box, const AnsiString S)\n");  fclose(stdout);
1 >>>    cout << "signature# 113 @ long __fastcall TMain::IndexOf(TListBox *Box, const AnsiString S)";
1 >>>    for(int ii = 0; ii < Box->Count; ++ii)
1 >>>        if(Box->Items->Strings[ii] == S)
1 >>>            return ii;
1 >>>}
0 >>>return -1;
0 >>>}//raf835:end long __fastcall TMain::IndexOf(TListBox *Box, const AnsiString S)
0 >>>void __fastcall TMain::AddObsFunct1Click(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 105 @ void __fastcall TMain::AddObsFunct1Click(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 114 @ void __fastcall TMain::AddObsFunct1Click(TObject *Sender)";
1 >>>    TComponent *pComponent = PopupListBox3->PopupComponent;
1 >>>    if(pComponent)
1 >>>        if(pComponent->ClassNameIs("TListBox") && pComponent->Name == "ListBox3")
1 >>>            for(int ii = 0; ii < ListBox3->Items->Count; ++ii)
1 >>>                if(ListBox3->Selected[ii])
1 >>>                    if(Funct == CRHM::FOBS)
1 >>>                        Application->MessageBox("cannot be a simple observation function", "Warning", MB_OK);
1 >>>    return;
1 >>>}
0 >>>int Index;
0 >>>for(Index = 0; Index < Main->Chart->SeriesCount(); ++Index)
0 >>>    if(ListBox3->Items->Strings[ii] == Main->Chart->Series[Index]->Title)
0 >>>        break;
0 >>>String S = ListBox3->Items->Strings[ii] + Sstrings[Funct];
0 >>>int iii = IndexOf(ListBox4, S);
0 >>>if(iii == -1 && Funct != CRHM::FOBS)
0 >>>    long jj = S.LastDelimiter("(");
0 >>>long jj2 = S.LastDelimiter(")");
0 >>>TLineSeries *cdSeries;
0 >>>ClassVar* orgVar = (ClassVar*) ListBox3->Items->Objects[ii];
0 >>>ClassVar* thisVar = new ClassVar(*orgVar);
0 >>>cdSeries = new TLineSeries(this);
0 >>>cdSeries->Tag = NULL;
0 >>>cdSeries->Tag = (int) thisVar; 
0 >>>cdSeries->VertAxis = (TVertAxis) thisVar->TchrtOpt;
0 >>>cdSeries->XValues->DateTime = TRUE;
0 >>>CurrentColor = colours[Index % ncolours];
0 >>>cdSeries->Color = CurrentColor;
0 >>>cdSeries->ParentChart = Chart;
0 >>>cdSeries->Title = S;
0 >>>if(SeriesCnt <= 0 || Index >= Main->Chart->SeriesCount() || Main->Chart->Series[Index]->Count() <= 0)
0 >>>    ListBox4->Items->AddObject(S, (TObject *) cdSeries);
0 >>>cdSeries->Tag = NULL;
0 >>>delete thisVar;
0 >>>continue;
0 >>>}//raf835:end void __fastcall TMain::AddObsFunct1Click(TObject *Sender)
0 >>>thisVar->name = S.c_str();
0 >>>thisVar->FileData = new ClassData();
0 >>>thisVar->FunKind = Funct; 
0 >>>thisVar->VarFunct = 1;
0 >>>thisVar->FileData->Data = new float*[thisVar->dim];   
0 >>>thisVar->cnt = thisVar->dim; 
0 >>>thisVar->FileData->Lines = Main->Chart->Series[Index]->Count();
0 >>>thisVar->FileData->Freq = Global::Freq;
0 >>>thisVar->FileData->IndxMin = Global::DTmin;
0 >>>thisVar->FileData->IndxMax = (thisVar->FileData->Lines/Global::Freq)*Global::Freq + thisVar->FileData->IndxMin - 1;
0 >>>thisVar->FileData->ModN = 1;
0 >>>thisVar->FileData->Interval = Global::Interval;
0 >>>thisVar->FileData->DataCnt = thisVar->dim;
0 >>>thisVar->FileData->FirstFile = false;
0 >>>thisVar->visibility = CRHM::PRIVATE;
0 >>>for (int jj = 0; jj < thisVar->dim; jj++)
0 >>>    thisVar->FileData->Data[jj] = new float[thisVar->FileData->Lines];
0 >>>long Indx;
0 >>>if(ListHruNames) 
0 >>>    Indx = ListHruNames->IndexOf(S.SubString(jj+1, jj2-jj-1)) - 1;
0 >>>else
0 >>>{
1 >>>    if(thisVar->root != "")
1 >>>        Indx = 0; 
1 >>>    else
1 >>>        Indx = (S.SubString(jj+1, jj2-jj-1)).ToInt()-1;
1 >>>}
0 >>>for (long jj = 0; jj < thisVar->FileData->Lines; jj++)
0 >>>    thisVar->FileData->Data[Indx][jj] = Main->Chart->Series[Index]->YValue[jj];
0 >>>ListBox4->Items->AddObject(S, (TObject *) cdSeries);
0 >>>AddObsPlot(Sender, thisVar, cdSeries, S, Funct);
0 >>>delete thisVar->FileData;
0 >>>thisVar->FileData = NULL;
0 >>>}//raf835:end void __fastcall TMain::AddObsFunct1Click(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::AddObsFunct1Click(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::AddObsFunct1Click(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::AddObsFunct1Click(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::AddObsFunct1Click(TObject *Sender)
0 >>>else
0 >>>    MessageBeep(0);
0 >>>}//raf835:end void __fastcall TMain::AddObsFunct1Click(TObject *Sender)
0 >>>CRHM::TFun  FindObservationType(String Kind)
0 >>>{
1 >>>    cout << "signature# 115 @ CRHM::TFun  FindObservationType(String Kind)";
1 >>>    if(Kind == "_obs") Kind = "";
1 >>>    for(int ii = CRHM::FOBS; ii <= CRHM::DLTA; ii++)
1 >>>        if(Kind == Sstrings[ii]) return (CRHM::TFun)ii;
1 >>>    return (CRHM::TFun) 0;
1 >>>}
0 >>>void __fastcall TMain::ListBoxMacroClear(TObject *Sender)  
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 106 @ void __fastcall TMain::ListBoxMacroClear(TObject *Sender)\n");  fclose(stdout);
1 >>>    ClassVar * thisVar;
1 >>>    if(SeriesCnt <= 0)
1 >>>        ListBox3->Clear();
1 >>>    else
1 >>>        int indx;
1 >>>    for(int jj = 0; jj < SeriesCnt;)
1 >>>        if(indx = ListBox3->Items->IndexOf(cdSeries[jj]->Title), indx > -1)
1 >>>            thisVar =  (ClassVar *) ListBox3->Items->Objects[indx];
1 >>>    if(thisVar->DLLName == "Macro")  
1 >>>    {
2 >>>        cdSeries[jj]->ParentChart = NULL;
2 >>>        cdSeries[jj]->Clear();
2 >>>        for(int kk = jj+1; kk < SeriesCnt; ++kk)
2 >>>            cdSeries[kk-1] = cdSeries[kk];
2 >>>        ListBox3->Items->Delete(indx);
2 >>>        SeriesCnt--; 
2 >>>    }
1 >>>    else
1 >>>        ++jj; 
1 >>>}
0 >>>}//raf835:end void __fastcall TMain::ListBoxMacroClear(TObject *Sender)  
0 >>>for(int ii = 0; ii < ListBox1->Items->Count; ii++)
0 >>>    thisVar =  (ClassVar *) ListBox1->Items->Objects[ii];
0 >>>if(thisVar != NULL && thisVar->DLLName == "Macro")
0 >>>    ListBox1->Items->Delete(ii);
0 >>>ii = 0;
0 >>>}//raf835:end void __fastcall TMain::ListBoxMacroClear(TObject *Sender)  
0 >>>}//raf835:end void __fastcall TMain::ListBoxMacroClear(TObject *Sender)  
0 >>>}//raf835:end void __fastcall TMain::ListBoxMacroClear(TObject *Sender)  
0 >>>void __fastcall TMain::StateFileClose(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 107 @ void __fastcall TMain::StateFileClose(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 116 @ void __fastcall TMain::StateFileClose(TObject *Sender)";
1 >>>    TMenuItem *ObsItem;
1 >>>    TMenuItem * thisMenu = (TMenuItem *) Sender;
1 >>>    ObsItem = MainMenu1->Items->Items[5];
1 >>>    if(ObsItem->Count > 5)
1 >>>        String S = thisMenu->Caption;
1 >>>    S = S.Delete(1, 1); 
1 >>>    int Reply = IDOK;
1 >>>    if(ProjectOpen)
1 >>>        Reply = Application->MessageBox(S.c_str(), "Close State File", IDOK);
1 >>>    if(Reply == IDOK)
1 >>>        ObsItem->Delete(5);  
1 >>>}
0 >>>}//raf835:end void __fastcall TMain::StateFileClose(TObject *Sender)
0 >>>void __fastcall TMain::StateFileCloseAll(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 108 @ void __fastcall TMain::StateFileCloseAll(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 117 @ void __fastcall TMain::StateFileCloseAll(TObject *Sender)";
1 >>>    TMenuItem *StateItem;
1 >>>    StateItem = MainMenu1->Items->Items[5];
1 >>>    if(StateItem->Count > 5)  
1 >>>    {
2 >>>        for(int ii = 5; ii < StateItem->Count;)  
2 >>>        {
3 >>>            StateItem->Delete(ii);  
3 >>>        }
2 >>>    }
1 >>>}
0 >>>void __fastcall TMain::LastRprtObs(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 109 @ void __fastcall TMain::LastRprtObs(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 118 @ void __fastcall TMain::LastRprtObs(TObject *Sender)";
1 >>>    bool Daily;
1 >>>    int SeriesCnt = ListBox4->Items->Count;
1 >>>    if(SeriesCnt <= 0) return;
1 >>>    TLineSeries *cdS = (TLineSeries *) ListBox4->Items->Objects[0];
1 >>>    ClassVar *thisVar =  (ClassVar *) cdS->Tag;
1 >>>    cdSeries = new TLineSeries*[SeriesCnt];
1 >>>    int Acnt = 0;
1 >>>    for (int ii = 0; ii < SeriesCnt ; ++ii)
1 >>>        cdSeries[Acnt] = (TLineSeries *) ListBox4->Items->Objects[ii];
1 >>>    ClassVar *thisVar =  (ClassVar *) cdSeries[Acnt]->Tag;
1 >>>    if(ii == 0)
1 >>>        if(thisVar->FunKind > MJ_W)
1 >>>            Daily = true;
1 >>>    ++Acnt;
1 >>>}
0 >>>else if(thisVar->FunKind > MJ_W && Daily || thisVar->FunKind <= MJ_W && !Daily)
0 >>>    ++Acnt;
0 >>>}//raf835:end void __fastcall TMain::LastRprtObs(TObject *Sender)
0 >>>SeriesCnt = Acnt;
0 >>>TStringList *LogList = new TStringList;
0 >>>String Sx, Sy;
0 >>>Sx = "time";
0 >>>for(int vv = 0; vv < SeriesCnt; ++vv)
0 >>>    String S = cdSeries[vv]->Title;
0 >>>Sx += "\t" + S;
0 >>>}//raf835:end void __fastcall TMain::LastRprtObs(TObject *Sender)
0 >>>LogList->Add(Sx);
0 >>>int nn = cdSeries[0]->Count();
0 >>>Sx = FloatToStrF(cdSeries[0]->XValue[nn-1], ffGeneral, 10, 0);
0 >>>for (int vv = 0; vv < SeriesCnt; ++vv)
0 >>>    ClassVar *thisVar =  (ClassVar *) cdSeries[vv]->Tag;
0 >>>int prec = 6;
0 >>>if(thisVar->varType == CRHM::Int || thisVar->varType == CRHM::ReadI)
0 >>>    prec = 4;
0 >>>Sy = FloatToStrF(cdSeries[vv]->YValue[nn-1], ffGeneral, prec, 0);
0 >>>Sx = Sx + "\t" + Sy;
0 >>>}//raf835:end void __fastcall TMain::LastRprtObs(TObject *Sender)
0 >>>LogList->Add(Sx);
0 >>>delete [] cdSeries;
0 >>>cdSeries = NULL;
0 >>>ClassPar *thisPar;
0 >>>thisPar = ParFind("basin RUN_ID");
0 >>>String FileName = "CRHM_output";
0 >>>if(thisPar)
0 >>>    if(thisPar->ivalues[0] > 0)
0 >>>        FileName += String("_") + thisPar->ivalues[0];
0 >>>LogList->SaveToFile(OpenDialogPrj->InitialDir + "\\" + FileName + ".txt");
0 >>>LogList->Clear();
0 >>>}//raf835:end void __fastcall TMain::LastRprtObs(TObject *Sender)
0 >>>void __fastcall TMain::AllRprtObs(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 110 @ void __fastcall TMain::AllRprtObs(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 119 @ void __fastcall TMain::AllRprtObs(TObject *Sender)";
1 >>>    bool Daily;
1 >>>    int SeriesCnt = ListBox4->Items->Count;
1 >>>    if(SeriesCnt <= 0) return;
1 >>>    TLineSeries *cdS = (TLineSeries *) ListBox4->Items->Objects[0];
1 >>>    ClassVar *thisVar =  (ClassVar *) cdS->Tag;
1 >>>    cdSeries = new TLineSeries*[SeriesCnt];
1 >>>    int Acnt = 0;
1 >>>    for (int ii = 0; ii < SeriesCnt ; ++ii)
1 >>>        cdSeries[Acnt] = (TLineSeries *) ListBox4->Items->Objects[ii];
1 >>>    ClassVar *thisVar =  (ClassVar *) cdSeries[Acnt]->Tag;
1 >>>    if(ii == 0)
1 >>>        if(thisVar->FunKind > MJ_W)
1 >>>            Daily = true;
1 >>>    ++Acnt;
1 >>>}
0 >>>else if(thisVar->FunKind > MJ_W && Daily || thisVar->FunKind <= MJ_W && !Daily)
0 >>>    ++Acnt;
0 >>>}//raf835:end void __fastcall TMain::AllRprtObs(TObject *Sender)
0 >>>SeriesCnt = Acnt;
0 >>>TStringList *LogList = new TStringList;
0 >>>String Sx, Sy;
0 >>>Sx = "time";
0 >>>for(int vv = 0; vv < SeriesCnt; ++vv)
0 >>>    String S = cdSeries[vv]->Title;
0 >>>Sx += "\t" + S;
0 >>>}//raf835:end void __fastcall TMain::AllRprtObs(TObject *Sender)
0 >>>LogList->Add(Sx);
0 >>>for(int nn = 0; nn < cdSeries[0]->Count(); ++nn)
0 >>>    Sx = FloatToStrF(cdSeries[0]->XValue[nn], ffGeneral, 10, 0);
0 >>>for (int vv = 0; vv < SeriesCnt; ++vv)
0 >>>    ClassVar *thisVar =  (ClassVar *) cdSeries[vv]->Tag;
0 >>>int prec = 6;
0 >>>if(thisVar->varType == CRHM::Int || thisVar->varType == CRHM::ReadI)
0 >>>    prec = 4;
0 >>>Sy = FloatToStrF(cdSeries[vv]->YValue[nn], ffGeneral, prec, 0);
0 >>>Sx = Sx + "\t" + Sy;
0 >>>}//raf835:end void __fastcall TMain::AllRprtObs(TObject *Sender)
0 >>>LogList->Add(Sx);
0 >>>}//raf835:end void __fastcall TMain::AllRprtObs(TObject *Sender)
0 >>>delete [] cdSeries;
0 >>>cdSeries = NULL;
0 >>>ClassPar *thisPar;
0 >>>thisPar = ParFind("basin RUN_ID");
0 >>>String FileName = "CRHM_output";
0 >>>if(thisPar)
0 >>>    if(thisPar->ivalues[0] > 0)
0 >>>        FileName += String("_") + thisPar->ivalues[0];
0 >>>LogList->SaveToFile(OpenDialogPrj->InitialDir + "\\" + FileName + ".txt");
0 >>>LogList->Clear();
0 >>>}//raf835:end void __fastcall TMain::AllRprtObs(TObject *Sender)
0 >>>bool __fastcall TMain::FileExistsSp(String FileName)
0 >>>{
1 >>>    cout << "signature# 120 @ bool __fastcall TMain::FileExistsSp(String FileName)";
1 >>>    ifstream DataFile;
1 >>>    DataFile.open(FileName.c_str());
1 >>>    if(DataFile)
1 >>>        DataFile.close();
1 >>>    return true;
1 >>>}
0 >>>else
0 >>>    return false;
0 >>>}//raf835:end void __fastcall TMain::AllRprtObs(TObject *Sender)
0 >>>String __fastcall TMain::DeclObsName(ClassVar *thisVar)
0 >>>{
1 >>>    cout << "signature# 121 @ String __fastcall TMain::DeclObsName(ClassVar *thisVar)";
1 >>>    String Newname = thisVar->name.c_str();
1 >>>    int jj = Global::OurModulesList->IndexOf(thisVar->module.c_str()); 
1 >>>    if(jj > -1 && Newname.Pos("#") > 0)  
1 >>>    {
2 >>>        ClassModule* thisModule = (ClassModule*) Global::OurModulesList->Objects[jj];
2 >>>        if(thisModule->isGroup)  
2 >>>        {
3 >>>            String AA;
3 >>>            GroupEnding(AA, thisModule->GroupCnt);
3 >>>            Newname += AA;
3 >>>        }
2 >>>    }
1 >>>    return Newname;
1 >>>}
0 >>>void __fastcall TMain::Label4Click(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 111 @ void __fastcall TMain::Label4Click(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 122 @ void __fastcall TMain::Label4Click(TObject *Sender)";
1 >>>    ClassVar *thisVar;
1 >>>    MapVar::iterator itVar;
1 >>>    String Labels[] = {"Variables", "Variables by Module", "Diagnostic Variables", "Private Variables"};
1 >>>    String Newname;
1 >>>    ++Box1Disply;
1 >>>    if(Box1Disply > CRHM::PRIVATE)
1 >>>        Box1Disply = CRHM::OUTPUT;
1 >>>    Label4->Caption = Labels[Box1Disply];
1 >>>    ListBox1->Items->Clear();
1 >>>    Max_Name_Width1 = 0;
1 >>>    Max_Name_Width2 = 0;
1 >>>    SendMessage(ListBox1->Handle,
1 >>>                LB_SETHORIZONTALEXTENT, 150, 0);
1 >>>    if(Box1Disply == CRHM::OUTPUT)
1 >>>        ListBox1->Sorted = true;
1 >>>    for (itVar = Global::MapVars.begin(); itVar !=  Global::MapVars.end(); itVar++)
1 >>>        thisVar = (*itVar).second;
1 >>>    if(thisVar->varType < CRHM::Read && thisVar->visibility == CRHM::USUAL &&
1 >>>            thisVar->dimen != CRHM::NREB &&
1 >>>            (thisVar->values || thisVar->ivalues) && !thisVar->FileData)
1 >>>        Newname = DeclObsName(thisVar);
1 >>>    if(IndexOf(ListBox1, Newname) == -1)
1 >>>        ListBox1->Items->AddObject(Newname, (TObject*) thisVar);
1 >>>    if(Newname.Length() > Max_Name_Width2)
1 >>>        Max_Name_Width2 = Newname.Length();
1 >>>}
0 >>>}//raf835:end void __fastcall TMain::Label4Click(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::Label4Click(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::Label4Click(TObject *Sender)
0 >>>else
0 >>>    ListBox1->Sorted = false;
0 >>>String S0;
0 >>>for(int ii = 0; ii < Global::OurModulesList->Count; ii++)
0 >>>    String S = Global::OurModulesList->Strings[ii];
0 >>>ClassModule* thisModule = (ClassModule*) Global::OurModulesList->Objects[ii];
0 >>>if(S0 != S)
0 >>>    if(!S0.IsEmpty())
0 >>>        ListBox1->Items->Add(" ");
0 >>>S0 = S;
0 >>>if(thisModule->variation != 0)
0 >>>    String AA("#0");
0 >>>AA[2] += log(thisModule->variation)/log(2) + 1;
0 >>>S0 += AA;
0 >>>}//raf835:end void __fastcall TMain::Label4Click(TObject *Sender)
0 >>>S0 = "   --- " + S0;
0 >>>ListBox1->Items->AddObject(S0 + " ---", Global::OurModulesList->Objects[ii]);
0 >>>if(S0.Length() > Max_Name_Width1)
0 >>>    Max_Name_Width1 = S0.Length();
0 >>>}//raf835:end void __fastcall TMain::Label4Click(TObject *Sender)
0 >>>switch (Box1Disply)  
0 >>>{
1 >>>case CRHM::USUAL :
1 >>>    for (itVar = Global::MapVars.begin(); itVar !=  Global::MapVars.end(); itVar++)
1 >>>        thisVar = (*itVar).second;
1 >>>    if(S == thisVar->module.c_str() && thisVar->visibility == CRHM::USUAL &&
1 >>>            Variation_Decide(thisVar->variation_set, thisModule->variation) &&
1 >>>            thisVar->dimen != CRHM::NREB &&
1 >>>            (thisVar->values || thisVar->ivalues) && !thisVar->FileData)
1 >>>        if(UpDownOBSIndx->Max < thisVar->lay && thisVar->dimen == CRHM::NDEF)
1 >>>            UpDownOBSIndx->Max = thisVar->lay;
1 >>>    Newname = DeclObsName(thisVar);
1 >>>    if(IndexOf(ListBox1, Newname) == -1)
1 >>>        ListBox1->Items->AddObject(Newname, (TObject*) thisVar);
1 >>>    if(Newname.Length() > Max_Name_Width2)
1 >>>        Max_Name_Width2 = Newname.Length();
1 >>>}
0 >>>}//raf835:end void __fastcall TMain::Label4Click(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::Label4Click(TObject *Sender)
0 >>>break;
0 >>>case CRHM::DIAGNOSTIC : 
0 >>>for (itVar = Global::MapVars.begin(); itVar !=  Global::MapVars.end(); itVar++)
0 >>>    thisVar = (*itVar).second;
0 >>>if(S == thisVar->module.c_str() && thisVar->visibility == CRHM::DIAGNOSTIC &&
0 >>>        thisVar->dimen != CRHM::NREB &&
0 >>>        (thisVar->values || thisVar->ivalues) && !thisVar->FileData)
0 >>>    Newname = DeclObsName(thisVar);
0 >>>if(IndexOf(ListBox1, Newname) == -1)
0 >>>    ListBox1->Items->AddObject(Newname, (TObject*) thisVar);
0 >>>if(Newname.Length() > Max_Name_Width2)
0 >>>    Max_Name_Width2 = Newname.Length();
0 >>>}//raf835:end void __fastcall TMain::Label4Click(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::Label4Click(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::Label4Click(TObject *Sender)
0 >>>break;
0 >>>case CRHM::PRIVATE : 
0 >>>for (itVar = Global::MapVars.begin(); itVar !=  Global::MapVars.end(); itVar++)
0 >>>    thisVar = (*itVar).second;
0 >>>if(S == thisVar->module.c_str() && thisVar->visibility == CRHM::PRIVATE &&
0 >>>        thisVar->dimen != CRHM::NREB &&
0 >>>        (thisVar->values || thisVar->ivalues) && !thisVar->FileData)
0 >>>    Newname = DeclObsName(thisVar);
0 >>>if(IndexOf(ListBox1, Newname) == -1)
0 >>>    ListBox1->Items->AddObject(Newname, (TObject*) thisVar);
0 >>>if(Newname.Length() > Max_Name_Width2)
0 >>>    Max_Name_Width2 = Newname.Length();
0 >>>}//raf835:end void __fastcall TMain::Label4Click(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::Label4Click(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::Label4Click(TObject *Sender)
0 >>>break;
0 >>>}//raf835:end void __fastcall TMain::Label4Click(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::Label4Click(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::Label4Click(TObject *Sender)
0 >>>if(Max_Name_Width2 > Max_Name_Width1) 
0 >>>    Max_Name_Width1 = Max_Name_Width2;
0 >>>if(Max_Name_Width1*6 > ListBox1->Width)
0 >>>    ListBox1->ScrollWidth = Max_Name_Width1*6;
0 >>>Max_Name_Width1 += 5; 
0 >>>if(Max_Name_Width2*6 > ListBox3->Width)
0 >>>    ListBox3->ScrollWidth = Max_Name_Width1*6;
0 >>>if(Max_Name_Width2*6 > ListBox2->Width)
0 >>>    ListBox2->ScrollWidth = Max_Name_Width2*6;
0 >>>Max_Name_Width2 += 5; 
0 >>>if(Max_Name_Width2*6 > ListBox4->Width)
0 >>>    ListBox4->ScrollWidth = Max_Name_Width2*6;
0 >>>}//raf835:end void __fastcall TMain::Label4Click(TObject *Sender)
0 >>>bool __fastcall TMain::isSimple(string module)  
0 >>>{
1 >>>    int jj = Global::AllModulesList->IndexOf(module.c_str());
1 >>>    ClassModule* thisModule = (ClassModule*) Global::AllModulesList->Objects[jj];
1 >>>    if(!(thisModule->isGroup || thisModule->isStruct))
1 >>>        return true;
1 >>>    else
1 >>>        return false;
1 >>>}
0 >>>bool TMain::Variation_Decide(int Variation_set, long Variation)
0 >>>{
1 >>>    cout << "signature# 123 @ bool TMain::Variation_Decide(int Variation_set, long Variation)";
1 >>>    VandP V;
1 >>>    V.Set(Variation);
1 >>>    long variations = V.GetV(); 
1 >>>    if((Variation_set & 2048) != 0 && variations == 0 || 
1 >>>            (Variation_set & 4096) != 0 ||                        
1 >>>            (Variation_set == 0) ||                               
1 >>>            (variations & Variation_set) != 0)                 
1 >>>        return true;
1 >>>    else
1 >>>        return false;
1 >>>}
0 >>>void __fastcall TMain::ListBox1KeyDown(TObject *Sender, WORD &Key,
0 >>>                                       TShiftState Shift)
0 >>>{
1 >>>    cout << "signature# 124 @ TShiftState Shift)";
1 >>>    if(Shift.Contains(ssShift))
1 >>>        ShiftDown = true;
1 >>>}
0 >>>void __fastcall TMain::ListBox1KeyUp(TObject *Sender, WORD &Key,
0 >>>                                     TShiftState Shift)
0 >>>{
1 >>>    cout << "signature# 125 @ TShiftState Shift)";
1 >>>    ShiftDown = false;
1 >>>}
0 >>>void __fastcall TMain::FreqDefault1Click(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 112 @ void __fastcall TMain::FreqDefault1Click(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 126 @ void __fastcall TMain::FreqDefault1Click(TObject *Sender)";
1 >>>    const long OK_Values[14] = {1, 2, 3, 4, 6, 8, 12, 24, 48, 72, 96, 144, 192, 288};
1 >>>    if(ObsFilesList->Count == 0)
1 >>>loop:
1 >>>        long Warn = Application->MessageBox(" Yes - increase, \n No - decrease or\n Cancel - exit.\n\n This is only effective when NO observation files are open.",
1 >>>                                            String("Do you want to change the default interval? Currently: " + String(Global::Freq)).c_str(), MB_YESNOCANCEL);
1 >>>    if(Warn == IDYES || Warn == IDNO)
1 >>>        for(int ii = 0; ii < 14; ++ii)
1 >>>            if(Global::Freq == OK_Values[ii])
1 >>>                if(Warn == IDYES)
1 >>>                    if(ii == 13)
1 >>>                        Global::Freq = OK_Values[0];
1 >>>                    else
1 >>>                        Global::Freq = OK_Values[ii+1];
1 >>>}
0 >>>else if(ii == 0)
0 >>>    Global::Freq = OK_Values[13];
0 >>>else
0 >>>    Global::Freq = OK_Values[ii-1];
0 >>>}//raf835:end void __fastcall TMain::FreqDefault1Click(TObject *Sender)
0 >>>Global::Interval = 1.0/Global::Freq;
0 >>>goto loop;
0 >>>}//raf835:end void __fastcall TMain::FreqDefault1Click(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::FreqDefault1Click(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::FreqDefault1Click(TObject *Sender)
0 >>>return;
0 >>>}//raf835:end void __fastcall TMain::FreqDefault1Click(TObject *Sender)
0 >>>else
0 >>>    Application->MessageBox("Only operates when NO observation files are open.", String("changes the default interval? Currently: " + String(Global::Freq)).c_str(), MB_OK);
0 >>>}//raf835:end void __fastcall TMain::FreqDefault1Click(TObject *Sender)
0 >>>long __fastcall TMain::CheckforModule(String S, long Pos)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 113 @ long __fastcall TMain::CheckforModule(String S, long Pos)\n");  fclose(stdout);
1 >>>    cout << "signature# 127 @ long __fastcall TMain::CheckforModule(String S, long Pos)";
1 >>>    long jj = Global::AllModulesList->IndexOf(S);
1 >>>    if(jj > -1)
1 >>>        return jj;
1 >>>    else  
1 >>>    {
2 >>>        jj = Global::OldModuleName->IndexOf(S); 
2 >>>        if(jj == -1)
2 >>>            return jj; 
2 >>>        Global::OurModulesList->Strings[Pos] = Global::NewModuleName->Strings[jj]; 
2 >>>        String Message = "Converting module " + Global::OldModuleName->Strings[jj] + " to " + Global::NewModuleName->Strings[jj];
2 >>>        LogMessage(Message.c_str());
2 >>>        Application->MessageBox(Message.c_str(), "Save File (Use a new project file name until satisfied with changes!)", MB_OK);
2 >>>        return (long) Global::OldModuleName->Objects[jj]; 
2 >>>    }
1 >>>}
0 >>>void __fastcall TMain::daily1Click(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 114 @ void __fastcall TMain::daily1Click(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 128 @ void __fastcall TMain::daily1Click(TObject *Sender)";
1 >>>    PlotControl->PlotUpdate->ItemIndex = 2;
1 >>>    daily1->Checked = true;
1 >>>}
0 >>>void __fastcall TMain::biweekly1Click(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 115 @ void __fastcall TMain::biweekly1Click(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 129 @ void __fastcall TMain::biweekly1Click(TObject *Sender)";
1 >>>    PlotControl->PlotUpdate->ItemIndex = 3;
1 >>>    biweekly1->Checked = true;
1 >>>}
0 >>>void __fastcall TMain::weekly1Click(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 116 @ void __fastcall TMain::weekly1Click(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 130 @ void __fastcall TMain::weekly1Click(TObject *Sender)";
1 >>>    PlotControl->PlotUpdate->ItemIndex = 4;
1 >>>    weekly1->Checked = true;
1 >>>}
0 >>>void __fastcall TMain::monthly1Click(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 117 @ void __fastcall TMain::monthly1Click(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 131 @ void __fastcall TMain::monthly1Click(TObject *Sender)";
1 >>>    PlotControl->PlotUpdate->ItemIndex = 5;
1 >>>    monthly1->Checked = true;
1 >>>}
0 >>>void __fastcall TMain::yearly1Click(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 118 @ void __fastcall TMain::yearly1Click(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 132 @ void __fastcall TMain::yearly1Click(TObject *Sender)";
1 >>>    PlotControl->PlotUpdate->ItemIndex = 6;
1 >>>    yearly1->Checked = true;
1 >>>}
0 >>>void __fastcall TMain::atend1Click(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 119 @ void __fastcall TMain::atend1Click(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 133 @ void __fastcall TMain::atend1Click(TObject *Sender)";
1 >>>    PlotControl->PlotUpdate->ItemIndex = 7;
1 >>>    atend1->Checked = true;
1 >>>}
0 >>>void __fastcall TMain::VarObsFunct_Update(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 120 @ void __fastcall TMain::VarObsFunct_Update(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 134 @ void __fastcall TMain::VarObsFunct_Update(TObject *Sender)";
1 >>>    ClassVar* thisVar;
1 >>>    ClassVar* orgVar;
1 >>>    CRHM::TFun Funct;
1 >>>    long Index;
1 >>>    long nn;
1 >>>    bool isObs = false;
1 >>>    for(long ii = 0; ii < ListBox4->Items->Count; ++ii)
1 >>>        Funct = CRHM::FOBS; 
1 >>>    String S = ListBox4->Items->Strings[ii];
1 >>>    String S1, S2;
1 >>>    long jj1 = S.LastDelimiter("_");
1 >>>    S1 = S.SubString(1, jj1-1);
1 >>>    if(jj1 != 0)
1 >>>        S2 = S.SubString(jj1, S.Length());
1 >>>    for(Index = 0; Index < Main->Chart->SeriesCount(); ++Index)  
1 >>>    {
2 >>>        if(Main->Chart->Series[Index]->Title == S1)
2 >>>            break;
2 >>>    }
1 >>>    for(nn = 0; nn < 16; ++nn)  
1 >>>    {
2 >>>        if(Sstrings[nn] == S2)  
2 >>>        {
3 >>>            Funct = nn;
3 >>>            break;
3 >>>        }
2 >>>    }
1 >>>    if(Funct == CRHM::FOBS)
1 >>>        continue;  
1 >>>    long Indx = ListBox3->Items->IndexOf(S1);
1 >>>    if(Indx == -1)  
1 >>>    {
2 >>>        isObs = true;
2 >>>        jj1 = S.LastDelimiter("(");
2 >>>        string S3 = string("obs ") +  S.SubString(1, jj1-1).c_str();
2 >>>        thisVar = ClassVarFind(S3); 
2 >>>    }
1 >>>    TLineSeries * cdSeries2 = (TLineSeries *) ListBox4->Items->Objects[ii]; 
1 >>>    if(!isObs)  
1 >>>    {
2 >>>        if(cdSeries2->Tag)
2 >>>            thisVar = (ClassVar*) cdSeries2->Tag;
2 >>>        delete thisVar; 
2 >>>    }
1 >>>    orgVar = (ClassVar*) ListBox3->Items->Objects[Indx];
1 >>>    thisVar = new ClassVar(*orgVar); 
1 >>>}
0 >>>TLineSeries * cdSeries = new TLineSeries(this);
0 >>>ListBox4->Items->Objects[ii] = (TObject*) cdSeries;
0 >>>cdSeries->XValues->DateTime = TRUE;
0 >>>CurrentColor = colours[ii % ncolours];
0 >>>cdSeries->Color = CurrentColor;
0 >>>cdSeries->Title = S;
0 >>>if(ObsFunct_Toggle)
0 >>>    cdSeries->Visible = true;
0 >>>else
0 >>>    cdSeries->Visible = false;
0 >>>if(isObs)
0 >>>    AddObsPlot(Sender, thisVar, cdSeries, S, Funct);
0 >>>}//raf835:end void __fastcall TMain::VarObsFunct_Update(TObject *Sender)
0 >>>else
0 >>>    thisVar->name = S.c_str();
0 >>>thisVar->FileData = new ClassData();
0 >>>cdSeries->VertAxis = (TVertAxis) thisVar->TchrtOpt;
0 >>>thisVar->FunKind = Funct; 
0 >>>thisVar->FileData->Data = new float*[1];   
0 >>>thisVar->cnt = 1;
0 >>>thisVar->FileData->Lines = Main->Chart->Series[Index]->Count();
0 >>>thisVar->FileData->Freq = Global::Freq;
0 >>>thisVar->FileData->IndxMin = Global::DTmin;
0 >>>thisVar->FileData->IndxMax = (thisVar->FileData->Lines/Global::Freq)*Global::Freq + thisVar->FileData->IndxMin - 1;
0 >>>thisVar->FileData->ModN = 1;
0 >>>thisVar->FileData->Interval = Global::Interval;
0 >>>thisVar->FileData->DataCnt = 1;
0 >>>thisVar->FileData->FirstFile = false;
0 >>>thisVar->visibility = CRHM::PRIVATE;
0 >>>thisVar->FileData->Data[0] = new float[thisVar->FileData->Lines];
0 >>>for (long jj = 0; jj < thisVar->FileData->Lines; jj++)
0 >>>    thisVar->FileData->Data[0][jj] = Main->Chart->Series[Index]->YValue[jj];
0 >>>AddObsPlot(Sender, thisVar, cdSeries, S, Funct);
0 >>>delete thisVar->FileData;
0 >>>thisVar->FileData = NULL;
0 >>>cdSeries->Tag = (int) thisVar;
0 >>>}//raf835:end void __fastcall TMain::VarObsFunct_Update(TObject *Sender)
0 >>>cdSeries2->Clear(); 
0 >>>cdSeries2->ParentChart = NULL; 
0 >>>cdSeries->ParentChart = Chart; 
0 >>>}//raf835:end void __fastcall TMain::VarObsFunct_Update(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::VarObsFunct_Update(TObject *Sender)
0 >>>void __fastcall TMain::SummaryScreen1Click(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 121 @ void __fastcall TMain::SummaryScreen1Click(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 135 @ void __fastcall TMain::SummaryScreen1Click(TObject *Sender)";
1 >>>    if(SummaryScreen1->Checked)
1 >>>        SummaryScreen1->Checked = false;
1 >>>    else
1 >>>        SummaryScreen1->Checked = true;
1 >>>}
0 >>>void __fastcall TMain::SummaryScreen1Rprt(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 122 @ void __fastcall TMain::SummaryScreen1Rprt(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 136 @ void __fastcall TMain::SummaryScreen1Rprt(TObject *Sender)";
1 >>>    TStringList *LogList = new TStringList;
1 >>>    String S, Sx, Sy;
1 >>>    TLineSeries * cdSeries2;
1 >>>    long itime[6];
1 >>>    long Next = -1;
1 >>>    long Index;
1 >>>    long First = -1;
1 >>>    long *Wanted = new long[Main->Chart->SeriesCount()]; 
1 >>>    for(long ii = 0; ii < Main->Chart->SeriesCount(); ++ii)
1 >>>        Wanted[ii] = -1;
1 >>>    for( ; ;)  
1 >>>    {
2 >>>        First = -1;
2 >>>        for(long ii = 0; ii < ListBox4->Items->Count; ++ii)
2 >>>            S = ListBox4->Items->Strings[ii];
2 >>>        for(Index = 0; Index < Main->Chart->SeriesCount(); ++Index) 
2 >>>            if(Main->Chart->Series[Index]->Title == S)
2 >>>                long tt = S.Pos(")_");
2 >>>        if(!S.Pos(")_")) 
2 >>>            break;
2 >>>        cdSeries2 = (TLineSeries *) ListBox4->Items->Objects[ii];
2 >>>        if(Wanted[Index] == -1)
2 >>>            if(First == -1)
2 >>>                First = Index; 
2 >>>            else if(Main->Chart->Series[Index]->Count() != Main->Chart->Series[First]->Count() || Main->Chart->Series[Index]->XValue[0] != Main->Chart->Series[First]->XValue[0])
2 >>>                break;
2 >>>        Wanted[Index] = 1;
2 >>>    }
1 >>>}
0 >>>if(Index == Main->Chart->SeriesCount()) 
0 >>>    continue;
0 >>>}//raf835:end void __fastcall TMain::SummaryScreen1Rprt(TObject *Sender)
0 >>>if(First < 0)  
0 >>>{
1 >>>    break;
1 >>>}
0 >>>Sx = "Dates";
0 >>>Sy = "units";
0 >>>for(long ii = 0; ii < Main->Chart->SeriesCount(); ++ii)
0 >>>    if(Wanted[ii] > 0)
0 >>>        S = Main->Chart->Series[ii]->Title;
0 >>>Sx += "\t" + S;
0 >>>ClassVar *thisVar =  (ClassVar *) Main->Chart->Series[ii]->Tag;
0 >>>S = thisVar->units.c_str();
0 >>>Sy += "\t" + S;
0 >>>}//raf835:end void __fastcall TMain::SummaryScreen1Rprt(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::SummaryScreen1Rprt(TObject *Sender)
0 >>>LogList->Add(Sx);
0 >>>LogList->Add(Sy);
0 >>>long prec = 6;
0 >>>bool Print = FALSE;
0 >>>for(long nn = 0; nn < Main->Chart->Series[First]->Count(); ++nn)
0 >>>    double Date = Main->Chart->Series[First]->XValue[nn];
0 >>>dattim(Date, itime);
0 >>>switch(TBase)
0 >>>case 0: 
0 >>>if(Next == -1 || Next == itime[2])  
0 >>>{
1 >>>    ++Date; 
1 >>>    dattim(Date, itime);
1 >>>    if(Next != -1)
1 >>>        Print = TRUE;
1 >>>    Next = itime[2];
1 >>>}
0 >>>break;
0 >>>case 1: 
0 >>>if(Next == -1 || itime[0] == Next && itime[1] == water_year_month)
0 >>>    if(Next == -1 && itime[1] < water_year_month)
0 >>>        Next = itime[0]; 
0 >>>    else if(Next != -1)
0 >>>        Print = TRUE;
0 >>>Next = itime[0] + 1; 
0 >>>}//raf835:end void __fastcall TMain::SummaryScreen1Rprt(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::SummaryScreen1Rprt(TObject *Sender)
0 >>>break;
0 >>>case 2: 
0 >>>if(Next == -1 || itime[0] == Next && itime[1] == 1)
0 >>>    if(Next == -1 && itime[1] != 1)
0 >>>        Next = itime[0] + 1; 
0 >>>    else if(Next != -1)
0 >>>        Print = TRUE;
0 >>>Next = itime[0] + 1; 
0 >>>}//raf835:end void __fastcall TMain::SummaryScreen1Rprt(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::SummaryScreen1Rprt(TObject *Sender)
0 >>>break;
0 >>>case 3: 
0 >>>if(Next == -1 || Next == itime[1])
0 >>>    if(Next != -1)
0 >>>        Print = TRUE;
0 >>>Next = (itime[1])%12 + 1; 
0 >>>}//raf835:end void __fastcall TMain::SummaryScreen1Rprt(TObject *Sender)
0 >>>break;
0 >>>case 4: 
0 >>>break;
0 >>>}//raf835:end void __fastcall TMain::SummaryScreen1Rprt(TObject *Sender)
0 >>>if(nn == Main->Chart->Series[First]->Count()-1)  
0 >>>{
1 >>>    Print = TRUE;
1 >>>    ++nn; 
1 >>>} 
0 >>>if(Print)
0 >>>    --nn; 
0 >>>Sx = FloatToStrF(floor(Main->Chart->Series[First]->XValue[nn]), ffGeneral, 10, 0);
0 >>>TDateTime Dt2 = Main->Chart->Series[First]->XValue[nn];
0 >>>Sx = Sx + " " + Dt2.DateString();
0 >>>for (long vv = 0; vv < Main->Chart->SeriesCount(); ++vv)
0 >>>    if(Wanted[vv] > 0)
0 >>>        Sy = FloatToStrF(Main->Chart->Series[vv]->YValue[nn], ffGeneral, prec, 0);
0 >>>Sx = Sx + "\t" + Sy;
0 >>>}//raf835:end void __fastcall TMain::SummaryScreen1Rprt(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::SummaryScreen1Rprt(TObject *Sender)
0 >>>++nn; 
0 >>>LogList->Add(Sx);
0 >>>Print = FALSE;
0 >>>}//raf835:end void __fastcall TMain::SummaryScreen1Rprt(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::SummaryScreen1Rprt(TObject *Sender)
0 >>>for(long ii = 0; ii < Main->Chart->SeriesCount(); ++ii)
0 >>>    if(Wanted[ii] > 0)
0 >>>        Wanted[ii] = -2; 
0 >>>}//raf835:end void __fastcall TMain::SummaryScreen1Rprt(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::SummaryScreen1Rprt(TObject *Sender)
0 >>>ClassPar *thisPar;
0 >>>thisPar = ParFind("basin RUN_ID");
0 >>>long ID = 0;
0 >>>if(!thisPar)
0 >>>    MapPar::iterator itPar;
0 >>>for (itPar = Global::MapPars.begin(); itPar !=  Global::MapPars.end(); itPar++)
0 >>>    thisPar = (*itPar).second;
0 >>>if(thisPar->param == "RUN_ID" && thisPar->ivalues[0] > 0)
0 >>>    ID = thisPar->ivalues[0];
0 >>>break;
0 >>>}//raf835:end void __fastcall TMain::SummaryScreen1Rprt(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::SummaryScreen1Rprt(TObject *Sender)
0 >>>}//raf835:end void __fastcall TMain::SummaryScreen1Rprt(TObject *Sender)
0 >>>else
0 >>>    ID = thisPar->ivalues[0];
0 >>>String FileName = "CRHM_output";
0 >>>if(ID > 0)
0 >>>    FileName += String("_") + ID;
0 >>>LogList->SaveToFile(OpenDialogPrj->InitialDir + "\\" + FileName + ".sum");
0 >>>LogList->Clear();
0 >>>delete[] Wanted;
0 >>>}//raf835:end void __fastcall TMain::SummaryScreen1Rprt(TObject *Sender)
0 >>>void __fastcall TMain::LabelBaseMouseDown(TObject *Sender,
0 >>>        TMouseButton Button, TShiftState Shift, int X, int Y)
0 >>>{
1 >>>    cout << "signature# 137 @ TMouseButton Button, TShiftState Shift, int X, int Y)";
1 >>>    if (Button == mbRight)
1 >>>        ++water_year_month;
1 >>>    if(water_year_month > 12)
1 >>>        water_year_month = 1;
1 >>>}
0 >>>else
0 >>>    ++TBase;
0 >>>if(TBase > 4)
0 >>>    TBase = 0;
0 >>>}//raf835:end void __fastcall TMain::SummaryScreen1Rprt(TObject *Sender)
0 >>>if(TBase ==  1)
0 >>>    LabelBase->Caption = TBases[TBase] + " - " + Tmonths[water_year_month-1];
0 >>>else
0 >>>    LabelBase->Caption = TBases[TBase];
0 >>>}//raf835:end void __fastcall TMain::SummaryScreen1Rprt(TObject *Sender)
0 >>>void __fastcall TMain::MacroLoad_X(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 123 @ void __fastcall TMain::MacroLoad_X(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 138 @ void __fastcall TMain::MacroLoad_X(TObject *Sender)";
1 >>>    MacroLoad(Sender);
1 >>>}
0 >>>void __fastcall TMain::RadioGroupFunctClick(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 124 @ void __fastcall TMain::RadioGroupFunctClick(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 139 @ void __fastcall TMain::RadioGroupFunctClick(TObject *Sender)";
1 >>>    Funct = (TFun) RadioGroupFunct->ItemIndex;
1 >>>    LabelFunct->Caption = FStrings[Funct];
1 >>>}
0 >>>void __fastcall TMain::RadioGroupDisplayClick(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 125 @ void __fastcall TMain::RadioGroupDisplayClick(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 140 @ void __fastcall TMain::RadioGroupDisplayClick(TObject *Sender)";
1 >>>    switch (RadioGroupDisplay->ItemIndex)
1 >>>    case 0:
1 >>>    ObsFunct_Toggle = 0;
1 >>>    break;
1 >>>case 1:
1 >>>    ObsFunct_Toggle = 1;
1 >>>    break;
1 >>>case 2:
1 >>>    ObsFunct_Toggle = 2;
1 >>>    break;
1 >>>}
0 >>>}//raf835:end void __fastcall TMain::RadioGroupDisplayClick(TObject *Sender)
0 >>>void __fastcall TMain::CancelScreenClick(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 126 @ void __fastcall TMain::CancelScreenClick(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 141 @ void __fastcall TMain::CancelScreenClick(TObject *Sender)";
1 >>>    CoolBar1->Hide();
1 >>>}
0 >>>void __fastcall TMain::CheckBlankModule(TObject *Sender)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 127 @ void __fastcall TMain::CheckBlankModule(TObject *Sender)\n");  fclose(stdout);
1 >>>    cout << "signature# 142 @ void __fastcall TMain::CheckBlankModule(TObject *Sender)";
1 >>>    MapVar::iterator itVar;
1 >>>    ClassVar * thisVar;
1 >>>    for (itVar = Global::MapVars.begin(); itVar !=  Global::MapVars.end(); itVar++)
1 >>>        thisVar = (*itVar).second;
1 >>>    string s = thisVar->name;
1 >>>}
0 >>>}//raf835:end void __fastcall TMain::CheckBlankModule(TObject *Sender)
0 >>>long __fastcall TMain::FindWildVarFloat(string name, ClassVar* &newVar, bool OnceFlag)
0 >>>{//raf835:injection
1 >>>freopen("d:\\injection.log", "a", stdout);  printf("newmodules sign# 128 @ long __fastcall TMain::FindWildVarFloat(string name, ClassVar* &newVar, bool OnceFlag)\n");  fclose(stdout);
1 >>>    cout << "signature# 143 @ long __fastcall TMain::FindWildVarFloat(string name, ClassVar* &newVar, bool OnceFlag)";
1 >>>    string spacename = " " + name;;
1 >>>    string Var;
1 >>>    MapVar::iterator itVar;
1 >>>    for (itVar = Global::MapVars.begin(); itVar !=  Global::MapVars.end(); itVar++)
1 >>>        Var = (*itVar).first;
1 >>>    if(Var[0] == '#') 
1 >>>        continue;
1 >>>    string::size_type indx = Var.rfind(spacename); 
1 >>>    if(indx == string::npos)
1 >>>        continue; 
1 >>>}
0 >>>newVar = (*itVar).second;
0 >>>if(newVar->cnt > 0)  
0 >>>    continue;
0 >>>if(spacename.substr(1) != newVar->name) 
0 >>>    continue;
0 >>>return newVar->GetUnit();
0 >>>}//raf835:end long __fastcall TMain::FindWildVarFloat(string name, ClassVar* &newVar, bool OnceFlag)
0 >>>newVar = NULL;
0 >>>return -1;
0 >>>}//raf835:end long __fastcall TMain::FindWildVarFloat(string name, ClassVar* &newVar, bool OnceFlag)
